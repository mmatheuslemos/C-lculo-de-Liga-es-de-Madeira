/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetomadeira;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 *
 * @author mathe
 */
public class Telaentalheinclinado extends javax.swing.JFrame {

    /**
     * Creates new form TelaCorteDuplo
     */
    public Telaentalheinclinado() {
        this.setLocation(233,120);
        initComponents();
        int valorprego;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        buttonGroup8 = new javax.swing.ButtonGroup();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        tipomad = new javax.swing.JLabel();
        tamanhopeca = new javax.swing.JLabel();
        acaosol = new javax.swing.JLabel();
        result = new javax.swing.JLabel();
        teladefundoprincipal = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        Escolhamadeira = new javax.swing.JPanel();
        jComboBox15 = new javax.swing.JComboBox<>();
        jComboBox13 = new javax.swing.JComboBox<>();
        jComboBox9 = new javax.swing.JComboBox<>();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox10 = new javax.swing.JComboBox<>();
        selco = new javax.swing.JRadioButton();
        respapa = new javax.swing.JLabel();
        resecom = new javax.swing.JLabel();
        resfc0k = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        seldico = new javax.swing.JRadioButton();
        jLabel15 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        Teladimensao = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        escolhadacarga = new javax.swing.JPanel();
        Tipodevariabilidade = new javax.swing.JComboBox<>();
        paraefeitos = new javax.swing.JComboBox<>();
        variavel = new javax.swing.JComboBox<>();
        combinação = new javax.swing.JComboBox<>();
        acoescorrentes = new javax.swing.JComboBox<>();
        cargasacid = new javax.swing.JComboBox<>();
        sobrecarga = new javax.swing.JTextField();
        permanente = new javax.swing.JTextField();
        vento = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        escolhachapas = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jComboBox16 = new javax.swing.JComboBox<>();
        jComboBox12 = new javax.swing.JComboBox<>();
        jComboBox14 = new javax.swing.JComboBox<>();
        jTextField9 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jRadioButton2 = new javax.swing.JRadioButton();
        chapametal = new javax.swing.JRadioButton();
        seldico1 = new javax.swing.JRadioButton();
        selco1 = new javax.swing.JRadioButton();
        jComboBox3 = new javax.swing.JComboBox<>();
        jComboBox4 = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        soparafuso = new javax.swing.JPanel();
        escometal = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel29 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        pregoeparafuso = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        escoprego = new javax.swing.JComboBox<>();
        ligpara = new javax.swing.JRadioButton();
        ligprego = new javax.swing.JRadioButton();
        diametroprego = new javax.swing.JLabel();
        penmini = new javax.swing.JLabel();
        Bitola = new javax.swing.JLabel();
        comprprego = new javax.swing.JLabel();
        escopara = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Entalheresult = new javax.swing.JPanel();
        resultperma2 = new javax.swing.JLabel();
        resultvent2 = new javax.swing.JLabel();
        resulkmod8 = new javax.swing.JLabel();
        resulkmod9 = new javax.swing.JLabel();
        resulkmod10 = new javax.swing.JLabel();
        resulkmod11 = new javax.swing.JLabel();
        rescomcal2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        resutcis = new javax.swing.JLabel();
        tdcis = new javax.swing.JLabel();
        tensaon = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        adichapa = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        frdrecebido = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        Resultadoparafuso = new javax.swing.JPanel();
        forcasolicitante = new javax.swing.JLabel();
        resistchp = new javax.swing.JLabel();
        espechp = new javax.swing.JLabel();
        maxiresistc = new javax.swing.JLabel();
        diam = new javax.swing.JLabel();
        bet = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        betlimite = new javax.swing.JLabel();
        jlabelre = new javax.swing.JLabel();
        numpara = new javax.swing.JLabel();
        alfaetext = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        Resultadoparafuso1 = new javax.swing.JPanel();
        forc = new javax.swing.JLabel();
        diam1 = new javax.swing.JLabel();
        resutembut1 = new javax.swing.JLabel();
        resutembut2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jlabelre2 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jlabelre1 = new javax.swing.JLabel();
        numpara1 = new javax.swing.JLabel();
        alfaetext1 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        bet1 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        resultadosdospregos = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        fr = new javax.swing.JLabel();
        resistembut = new javax.swing.JLabel();
        diametfd = new javax.swing.JLabel();
        afc = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        jLabel77 = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();

        setTitle("Dimensionamento Entalhe Inclinado");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("quadro-de-madeira.png")).getImage());
        setResizable(false);
        getContentPane().setLayout(new java.awt.CardLayout());

        jPanel5.setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tipomad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tipomadMouseClicked(evt);
            }
        });
        jPanel2.add(tipomad, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 264, 180, 30));

        tamanhopeca.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tamanhopecaMouseClicked(evt);
            }
        });
        jPanel2.add(tamanhopeca, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 310, 180, 20));

        acaosol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                acaosolMouseClicked(evt);
            }
        });
        jPanel2.add(acaosol, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 350, 180, 30));

        result.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultMouseClicked(evt);
            }
        });
        jPanel2.add(result, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 390, 180, 30));

        teladefundoprincipal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetomadeira/telalateralentalhe.png"))); // NOI18N
        jPanel2.add(teladefundoprincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel5.add(jPanel2);

        jPanel1.setLayout(new java.awt.CardLayout());

        Escolhamadeira.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jComboBox15.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jComboBox15.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2" }));
        jComboBox15.setBorder(null);
        jComboBox15.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jComboBox15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox15ActionPerformed(evt);
            }
        });
        Escolhamadeira.add(jComboBox15, new org.netbeans.lib.awtextra.AbsoluteConstraints(93, 355, 50, 20));

        jComboBox13.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jComboBox13.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));
        jComboBox13.setBorder(null);
        Escolhamadeira.add(jComboBox13, new org.netbeans.lib.awtextra.AbsoluteConstraints(142, 419, 50, 20));

        jComboBox9.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jComboBox9.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Madeira Serrada", "Madeira Laminada Colada", "Madeira Compensada", "Madeira Recomposta" }));
        jComboBox9.setBorder(null);
        Escolhamadeira.add(jComboBox9, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 388, 150, 20));

        jComboBox1.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "C20", "C30", "C40", "C60" }));
        jComboBox1.setBorder(null);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        Escolhamadeira.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 50, 55, 20));

        jComboBox10.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jComboBox10.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Permanente", "Longa duração", "Média duração", "Curta duração", "Instantânea" }));
        jComboBox10.setBorder(null);
        jComboBox10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox10ActionPerformed(evt);
            }
        });
        Escolhamadeira.add(jComboBox10, new org.netbeans.lib.awtextra.AbsoluteConstraints(175, 323, 140, 20));

        selco.setBackground(new java.awt.Color(242, 103, 84));
        buttonGroup2.add(selco);
        selco.setFont(new java.awt.Font("Bahnschrift", 0, 10)); // NOI18N
        selco.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selcoMouseClicked(evt);
            }
        });
        selco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selcoActionPerformed(evt);
            }
        });
        Escolhamadeira.add(selco, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, -1, 20));

        respapa.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        respapa.setForeground(new java.awt.Color(255, 255, 255));
        respapa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Escolhamadeira.add(respapa, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 232, 50, 25));

        resecom.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        resecom.setForeground(new java.awt.Color(255, 255, 255));
        resecom.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Escolhamadeira.add(resecom, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 160, 50, 25));

        resfc0k.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        resfc0k.setForeground(new java.awt.Color(255, 255, 255));
        resfc0k.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Escolhamadeira.add(resfc0k, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 125, 50, 25));

        jLabel26.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Escolhamadeira.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 195, 50, 25));

        seldico.setBackground(new java.awt.Color(242, 103, 84));
        buttonGroup2.add(seldico);
        seldico.setFont(new java.awt.Font("Bahnschrift", 0, 10)); // NOI18N
        seldico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                seldicoMouseClicked(evt);
            }
        });
        seldico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seldicoActionPerformed(evt);
            }
        });
        Escolhamadeira.add(seldico, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 50, 20, -1));

        jLabel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel15MouseClicked(evt);
            }
        });
        Escolhamadeira.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 450, 90, 30));

        jComboBox2.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "C20", "C25", "C30" }));
        jComboBox2.setBorder(null);
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        Escolhamadeira.add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 50, 55, 20));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetomadeira/telamadeiraentalhecerto.png"))); // NOI18N
        Escolhamadeira.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel1.add(Escolhamadeira, "card11");

        Teladimensao.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextField2.setBackground(new java.awt.Color(223, 104, 4));
        jTextField2.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(255, 255, 255));
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField2.setBorder(null);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        Teladimensao.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(215, 223, 50, 25));

        jTextField3.setBackground(new java.awt.Color(223, 104, 4));
        jTextField3.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        jTextField3.setForeground(new java.awt.Color(255, 255, 255));
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField3.setBorder(null);
        Teladimensao.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 255, 50, 25));

        jTextField4.setBackground(new java.awt.Color(223, 104, 4));
        jTextField4.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        jTextField4.setForeground(new java.awt.Color(255, 255, 255));
        jTextField4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField4.setBorder(null);
        Teladimensao.add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(132, 288, 50, 25));

        jTextField5.setBackground(new java.awt.Color(223, 104, 4));
        jTextField5.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        jTextField5.setForeground(new java.awt.Color(255, 255, 255));
        jTextField5.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField5.setBorder(null);
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });
        Teladimensao.add(jTextField5, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 320, 50, 25));

        jTextField6.setBackground(new java.awt.Color(223, 104, 4));
        jTextField6.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        jTextField6.setForeground(new java.awt.Color(255, 255, 255));
        jTextField6.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField6.setBorder(null);
        Teladimensao.add(jTextField6, new org.netbeans.lib.awtextra.AbsoluteConstraints(132, 395, 50, 25));

        jTextField7.setBackground(new java.awt.Color(223, 104, 4));
        jTextField7.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        jTextField7.setForeground(new java.awt.Color(255, 255, 255));
        jTextField7.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField7.setBorder(null);
        Teladimensao.add(jTextField7, new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 392, 50, 25));

        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });
        Teladimensao.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 450, 90, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetomadeira/teladimensao.png"))); // NOI18N
        Teladimensao.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel1.add(Teladimensao, "card8");

        escolhadacarga.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Tipodevariabilidade.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        Tipodevariabilidade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ações de Pequena Variabilidade", "Ações de Grande Variabilidade" }));
        Tipodevariabilidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TipodevariabilidadeActionPerformed(evt);
            }
        });
        escolhadacarga.add(Tipodevariabilidade, new org.netbeans.lib.awtextra.AbsoluteConstraints(128, 138, -1, -1));

        paraefeitos.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        paraefeitos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Desfavoráveis", "Favoráveis" }));
        escolhadacarga.add(paraefeitos, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 75, -1, -1));

        variavel.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        variavel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ações Variáveis em Geral", "Efeitos da Temperatura" }));
        escolhadacarga.add(variavel, new org.netbeans.lib.awtextra.AbsoluteConstraints(143, 195, 170, -1));

        combinação.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        combinação.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Normais", "Especiais ou de Construções", "Excepicionais" }));
        combinação.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combinaçãoActionPerformed(evt);
            }
        });
        escolhadacarga.add(combinação, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 43, 90, -1));

        acoescorrentes.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        acoescorrentes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Variações uniformes de Temperatura", "Pressão Dinâmica do Vento" }));
        acoescorrentes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acoescorrentesActionPerformed(evt);
            }
        });
        escolhadacarga.add(acoescorrentes, new org.netbeans.lib.awtextra.AbsoluteConstraints(175, 288, 210, -1));

        cargasacid.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        cargasacid.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Não há pred. de Equipamentos Fixos nem de el. concentr", "Há pred. de Equipamentos Fixos ou de elev. Concentração.", "Bibliotecas, arquivos, oficinas ou garagens", " " }));
        cargasacid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargasacidActionPerformed(evt);
            }
        });
        escolhadacarga.add(cargasacid, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 227, 270, -1));

        sobrecarga.setBackground(new java.awt.Color(223, 104, 4));
        sobrecarga.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        sobrecarga.setForeground(new java.awt.Color(255, 255, 255));
        sobrecarga.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sobrecarga.setBorder(null);
        sobrecarga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sobrecargaActionPerformed(evt);
            }
        });
        escolhadacarga.add(sobrecarga, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 165, 50, 25));

        permanente.setBackground(new java.awt.Color(223, 104, 4));
        permanente.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        permanente.setForeground(new java.awt.Color(255, 255, 255));
        permanente.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        permanente.setBorder(null);
        escolhadacarga.add(permanente, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 102, 50, 25));

        vento.setBackground(new java.awt.Color(223, 104, 4));
        vento.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        vento.setForeground(new java.awt.Color(255, 255, 255));
        vento.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        vento.setBorder(null);
        escolhadacarga.add(vento, new org.netbeans.lib.awtextra.AbsoluteConstraints(163, 253, 50, 25));

        jLabel34.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel34MouseClicked(evt);
            }
        });
        escolhadacarga.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 450, 80, 30));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetomadeira/telacargaentalhe.png"))); // NOI18N
        escolhadacarga.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel1.add(escolhadacarga, "card10");

        escolhachapas.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel28.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel28MouseClicked(evt);
            }
        });
        escolhachapas.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 450, 80, 30));

        jComboBox16.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jComboBox16.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2" }));
        jComboBox16.setBorder(null);
        jComboBox16.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jComboBox16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox16ActionPerformed(evt);
            }
        });
        escolhachapas.add(jComboBox16, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 315, 40, 20));

        jComboBox12.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jComboBox12.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Madeira Serrada", "Madeira Laminada Colada", "Madeira Compensada", "Madeira Recomposta" }));
        jComboBox12.setBorder(null);
        escolhachapas.add(jComboBox12, new org.netbeans.lib.awtextra.AbsoluteConstraints(135, 347, 150, 20));

        jComboBox14.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jComboBox14.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));
        jComboBox14.setBorder(null);
        escolhachapas.add(jComboBox14, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 380, 50, 20));

        jTextField9.setBackground(new java.awt.Color(223, 104, 4));
        jTextField9.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        jTextField9.setForeground(new java.awt.Color(255, 255, 255));
        jTextField9.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField9.setBorder(null);
        jTextField9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField9ActionPerformed(evt);
            }
        });
        escolhachapas.add(jTextField9, new org.netbeans.lib.awtextra.AbsoluteConstraints(152, 410, 50, 25));

        jTextField8.setBackground(new java.awt.Color(223, 104, 4));
        jTextField8.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        jTextField8.setForeground(new java.awt.Color(255, 255, 255));
        jTextField8.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField8.setBorder(null);
        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });
        escolhachapas.add(jTextField8, new org.netbeans.lib.awtextra.AbsoluteConstraints(235, 105, 50, 25));

        jTextField10.setBackground(new java.awt.Color(223, 104, 4));
        jTextField10.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        jTextField10.setForeground(new java.awt.Color(255, 255, 255));
        jTextField10.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField10.setBorder(null);
        jTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField10ActionPerformed(evt);
            }
        });
        escolhachapas.add(jTextField10, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 138, 50, 25));

        jRadioButton2.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup7.add(jRadioButton2);
        escolhachapas.add(jRadioButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 220, -1, -1));

        chapametal.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup7.add(chapametal);
        escolhachapas.add(chapametal, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 53, -1, -1));

        seldico1.setBackground(new java.awt.Color(242, 103, 84));
        buttonGroup8.add(seldico1);
        seldico1.setFont(new java.awt.Font("Bahnschrift", 0, 10)); // NOI18N
        seldico1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                seldico1MouseClicked(evt);
            }
        });
        seldico1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seldico1ActionPerformed(evt);
            }
        });
        escolhachapas.add(seldico1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 274, 20, -1));

        selco1.setBackground(new java.awt.Color(242, 103, 84));
        buttonGroup8.add(selco1);
        selco1.setFont(new java.awt.Font("Bahnschrift", 0, 10)); // NOI18N
        selco1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selco1MouseClicked(evt);
            }
        });
        selco1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selco1ActionPerformed(evt);
            }
        });
        escolhachapas.add(selco1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 274, -1, 20));

        jComboBox3.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "C20", "C25", "C30" }));
        jComboBox3.setBorder(null);
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        escolhachapas.add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 273, 60, 20));

        jComboBox4.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "C20", "C30", "C40", "C60" }));
        jComboBox4.setBorder(null);
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });
        escolhachapas.add(jComboBox4, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 273, 60, 20));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetomadeira/chapas1.png"))); // NOI18N
        escolhachapas.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel1.add(escolhachapas, "card9");

        soparafuso.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        escometal.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        escometal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1.25", "1.60", "1.90", "2.20", "2.50", "3.10", "3.80", " " }));
        escometal.setBorder(null);
        escometal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escometalActionPerformed(evt);
            }
        });
        soparafuso.add(escometal, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, 60, -1));

        jTable3.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Double(1.25), "1/2\""},
                { new Double(1.6), "5/8\""},
                { new Double(1.9), "3/4\""},
                { new Double(2.2), "7/8\""},
                { new Double(2.5), "1\""},
                { new Double(3.1), "1 1/4\""},
                { new Double(3.8), "1 1/2\""}
            },
            new String [] {
                "Diâmetro (cm)", "Diâmetro (pol)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable3);

        soparafuso.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, 250, 140));

        jLabel29.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel29MouseClicked(evt);
            }
        });
        soparafuso.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 450, 80, 30));

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetomadeira/soparafuso.png"))); // NOI18N
        soparafuso.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel1.add(soparafuso, "card8");

        pregoeparafuso.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "17x21",  new Double(3.0),  new Double(51.0),  new Double(36.0)},
                {"2", "17x24",  new Double(3.0),  new Double(57.0),  new Double(36.0)},
                {"3", "17x27",  new Double(3.0),  new Double(63.0),  new Double(36.0)},
                {"4", "17x30",  new Double(3.0),  new Double(69.0),  new Double(36.0)},
                {"5", "18x24",  new Double(3.4),  new Double(57.0),  new Double(41.0)},
                {"6", "18x27",  new Double(3.4),  new Double(63.0),  new Double(41.0)},
                {"7", "18x30",  new Double(3.4),  new Double(69.0),  new Double(41.0)},
                {"8", "18x33",  new Double(3.4),  new Double(76.0),  new Double(41.0)},
                {"9", "18x36",  new Double(3.4),  new Double(82.0),  new Double(41.0)},
                {"10", "19x27",  new Double(3.9),  new Double(63.0),  new Double(47.0)},
                {"11", "19x30",  new Double(3.9),  new Double(69.0),  new Double(47.0)},
                {"12", "19x33",  new Double(3.9),  new Double(76.0),  new Double(47.0)},
                {"13", "19x36",  new Double(3.9),  new Double(82.0),  new Double(47.0)},
                {"14", "19x39",  new Double(3.9),  new Double(89.0),  new Double(47.0)},
                {"15", "20x30",  new Double(4.4),  new Double(69.0),  new Double(53.0)},
                {"16", "20x33",  new Double(4.4),  new Double(76.0),  new Double(53.0)},
                {"17", "20x39",  new Double(4.4),  new Double(89.0),  new Double(53.0)},
                {"18", "20x42",  new Double(4.4),  new Double(95.0),  new Double(53.0)},
                {"19", "20x48",  new Double(4.4),  new Double(108.0),  new Double(53.0)},
                {"20", "21x33",  new Double(4.9),  new Double(76.0),  new Double(59.0)},
                {"21", "21x45",  new Double(4.9),  new Double(101.0),  new Double(59.0)},
                {"22", "21x48",  new Double(4.9),  new Double(108.0),  new Double(59.0)},
                {"23", "21x54",  new Double(4.9),  new Double(127.0),  new Double(59.0)},
                {"24", "22x42",  new Double(5.4),  new Double(95.0),  new Double(65.0)},
                {"25", "22x45",  new Double(5.4),  new Double(101.0),  new Double(65.0)},
                {"26", "22x48",  new Double(5.4),  new Double(108.0),  new Double(65.0)},
                {"27", "22x51",  new Double(5.4),  new Double(114.0),  new Double(65.0)},
                {"28", "22x54",  new Double(5.9),  new Double(127.0),  new Double(65.0)},
                {"29", "23x45",  new Double(5.9),  new Double(102.0),  new Double(71.0)},
                {"30", "23x54",  new Double(5.9),  new Double(127.0),  new Double(71.0)},
                {"31", "23x60",  new Double(5.9),  new Double(140.0),  new Double(71.0)},
                {"32", "23x66",  new Double(5.9),  new Double(152.0),  new Double(71.0)},
                {"33", "24x60",  new Double(6.4),  new Double(140.0),  new Double(77.0)},
                {"34", "24x66",  new Double(6.4),  new Double(152.0),  new Double(77.0)},
                {"35", "25x72",  new Double(6.4),  new Double(165.0),  new Double(84.0)},
                {"36", "26x72",  new Double(7.6),  new Double(165.0),  new Double(91.0)},
                {"37", "26x78",  new Double(7.6),  new Double(178.0),  new Double(91.0)},
                {"38", "26x84",  new Double(7.6),  new Double(190.0),  new Double(91.0)}
            },
            new String [] {
                "Opções", "Bitola", "d(mm)", "l(mm)", "Penetração mínima*12d(mm)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setOpaque(false);
        jScrollPane1.setViewportView(jTable1);

        pregoeparafuso.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 400, 80));

        jTable2.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Double(1.25), "1/2\""},
                { new Double(1.6), "5/8\""},
                { new Double(1.9), "3/4\""},
                { new Double(2.2), "7/8\""},
                { new Double(2.5), "1\""},
                { new Double(3.1), "1 1/4\""},
                { new Double(3.8), "1 1/2\""}
            },
            new String [] {
                "Diâmetro (cm)", "Diâmetro (pol)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        pregoeparafuso.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, 240, 80));

        escoprego.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        escoprego.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38" }));
        escoprego.setBorder(null);
        escoprego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escopregoActionPerformed(evt);
            }
        });
        pregoeparafuso.add(escoprego, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, 50, -1));

        ligpara.setBackground(new java.awt.Color(242, 103, 84));
        buttonGroup6.add(ligpara);
        pregoeparafuso.add(ligpara, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 327, -1, -1));

        ligprego.setBackground(new java.awt.Color(242, 103, 84));
        buttonGroup6.add(ligprego);
        ligprego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ligpregoActionPerformed(evt);
            }
        });
        pregoeparafuso.add(ligprego, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        diametroprego.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        diametroprego.setForeground(new java.awt.Color(255, 255, 255));
        diametroprego.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pregoeparafuso.add(diametroprego, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 260, 50, 25));

        penmini.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        penmini.setForeground(new java.awt.Color(255, 255, 255));
        penmini.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pregoeparafuso.add(penmini, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 260, 50, 25));

        Bitola.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        Bitola.setForeground(new java.awt.Color(255, 255, 255));
        Bitola.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pregoeparafuso.add(Bitola, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 215, 50, 25));

        comprprego.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        comprprego.setForeground(new java.awt.Color(255, 255, 255));
        comprprego.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pregoeparafuso.add(comprprego, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 215, 50, 25));

        escopara.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        escopara.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1.25", "1.60", "1.90", "2.20", "2.50", "3.10", "3.80", " " }));
        escopara.setBorder(null);
        escopara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escoparaActionPerformed(evt);
            }
        });
        pregoeparafuso.add(escopara, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 360, 60, -1));

        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });
        pregoeparafuso.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(335, 444, 90, 40));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetomadeira/Telaescolhametalica.png"))); // NOI18N
        pregoeparafuso.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel1.add(pregoeparafuso, "card13");

        Entalheresult.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        resultperma2.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        resultperma2.setForeground(new java.awt.Color(255, 255, 255));
        resultperma2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Entalheresult.add(resultperma2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 70, 40, 20));

        resultvent2.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        resultvent2.setForeground(new java.awt.Color(255, 255, 255));
        resultvent2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Entalheresult.add(resultvent2, new org.netbeans.lib.awtextra.AbsoluteConstraints(215, 100, 50, 20));

        resulkmod8.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        resulkmod8.setForeground(new java.awt.Color(255, 255, 255));
        resulkmod8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Entalheresult.add(resulkmod8, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 168, 40, 20));

        resulkmod9.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        resulkmod9.setForeground(new java.awt.Color(255, 255, 255));
        resulkmod9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Entalheresult.add(resulkmod9, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 168, 40, 20));

        resulkmod10.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        resulkmod10.setForeground(new java.awt.Color(255, 255, 255));
        resulkmod10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Entalheresult.add(resulkmod10, new org.netbeans.lib.awtextra.AbsoluteConstraints(308, 168, 40, 20));

        resulkmod11.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        resulkmod11.setForeground(new java.awt.Color(255, 255, 255));
        resulkmod11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Entalheresult.add(resulkmod11, new org.netbeans.lib.awtextra.AbsoluteConstraints(403, 168, 40, 20));

        rescomcal2.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        rescomcal2.setForeground(new java.awt.Color(255, 255, 255));
        rescomcal2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Entalheresult.add(rescomcal2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 240, 50, 20));

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jButton3.setText("Gerar PDF");
        jButton3.setBorder(null);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        Entalheresult.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 20, 90, 30));

        resutcis.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        resutcis.setForeground(new java.awt.Color(255, 255, 255));
        resutcis.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Entalheresult.add(resutcis, new org.netbeans.lib.awtextra.AbsoluteConstraints(132, 281, 50, 20));

        tdcis.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        tdcis.setForeground(new java.awt.Color(255, 255, 255));
        tdcis.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Entalheresult.add(tdcis, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 390, 40, 20));

        tensaon.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        tensaon.setForeground(new java.awt.Color(255, 255, 255));
        tensaon.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Entalheresult.add(tensaon, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 350, 40, 20));

        jLabel18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel18MouseClicked(evt);
            }
        });
        Entalheresult.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 450, 90, 30));

        jLabel3.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel3.setText("Peça Não Dimensionável");
        Entalheresult.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 170, 40));

        jLabel8.setFont(new java.awt.Font("Arial Unicode MS", 1, 12)); // NOI18N
        jLabel8.setText("Peça Dimensionada");
        Entalheresult.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 170, 40));

        adichapa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adichapaMouseClicked(evt);
            }
        });
        Entalheresult.add(adichapa, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 450, 140, 30));

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Entalheresult.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 250, 20, 20));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetomadeira/telaresultadoentalhe.png"))); // NOI18N
        Entalheresult.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel21.setText("jLabel21");
        Entalheresult.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 100, -1, -1));

        jLabel22.setText("jLabel22");
        Entalheresult.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 110, -1, -1));

        jLabel23.setText("jLabel23");
        Entalheresult.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 120, -1, -1));

        jLabel24.setText("jLabel24");
        Entalheresult.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 130, -1, -1));

        jLabel25.setText("jLabel25");
        Entalheresult.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 120, -1, -1));
        Entalheresult.add(frdrecebido, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 150, -1, -1));

        jLabel30.setText("jLabel30");
        Entalheresult.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 310, -1, -1));

        jLabel27.setText("jLabel27");
        Entalheresult.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 120, -1, -1));

        jLabel31.setText("jLabel31");
        Entalheresult.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 120, -1, -1));

        jLabel51.setText("jLabel51");
        Entalheresult.add(jLabel51, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 110, -1, -1));

        jLabel52.setText("jLabel52");
        Entalheresult.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 130, -1, -1));

        jPanel1.add(Entalheresult, "card9");

        Resultadoparafuso.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        forcasolicitante.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        forcasolicitante.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso.add(forcasolicitante, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 53, 50, 20));

        resistchp.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        resistchp.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso.add(resistchp, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 130, 40, 20));

        espechp.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        espechp.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso.add(espechp, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 162, 50, 20));

        maxiresistc.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        maxiresistc.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso.add(maxiresistc, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 193, 50, 20));

        diam.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        diam.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso.add(diam, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 295, 40, 20));

        bet.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        bet.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso.add(bet, new org.netbeans.lib.awtextra.AbsoluteConstraints(45, 355, 32, 25));

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jButton1.setText("Gerar PDF");
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        Resultadoparafuso.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, 90, 30));

        betlimite.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        betlimite.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso.add(betlimite, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 390, 25, 25));

        jlabelre.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jlabelre.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso.add(jlabelre, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 360, 50, 20));

        numpara.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        numpara.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso.add(numpara, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 390, 50, 20));

        alfaetext.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        alfaetext.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso.add(alfaetext, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 293, 50, 20));

        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });
        Resultadoparafuso.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 450, 90, 30));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetomadeira/chapametalparafuso.png"))); // NOI18N
        Resultadoparafuso.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jButton4.setText("Gerar PDF");
        jButton4.setBorder(null);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        Resultadoparafuso.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 20, 90, 30));

        jLabel40.setText("jLabel40");
        Resultadoparafuso.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 170, -1, -1));

        jLabel41.setText("jLabel41");
        Resultadoparafuso.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 120, -1, -1));

        jLabel42.setText("jLabel42");
        Resultadoparafuso.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 120, -1, -1));

        jLabel43.setText("jLabel43");
        Resultadoparafuso.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 160, -1, -1));

        jLabel44.setText("jLabel44");
        Resultadoparafuso.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 110, -1, -1));

        jLabel45.setText("jLabel45");
        Resultadoparafuso.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 160, -1, -1));

        jLabel47.setText("jLabel47");
        Resultadoparafuso.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 120, -1, -1));

        jLabel49.setText("jLabel49");
        Resultadoparafuso.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 110, -1, -1));

        jLabel50.setText("jLabel50");
        Resultadoparafuso.add(jLabel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 120, -1, -1));

        jPanel1.add(Resultadoparafuso, "card9");

        Resultadoparafuso1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        forc.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        forc.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso1.add(forc, new org.netbeans.lib.awtextra.AbsoluteConstraints(302, 96, 40, 20));

        diam1.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        diam1.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso1.add(diam1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, 40, 20));

        resutembut1.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        resutembut1.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso1.add(resutembut1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 260, 50, 20));

        resutembut2.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        resutembut2.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso1.add(resutembut2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 360, 50, 20));

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jButton2.setText("Gerar PDF");
        jButton2.setBorder(null);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        Resultadoparafuso1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, 90, 30));

        jlabelre2.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jlabelre2.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso1.add(jlabelre2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 390, 50, 20));

        jLabel62.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel62.setForeground(new java.awt.Color(255, 255, 255));
        jLabel62.setText("20");
        Resultadoparafuso1.add(jLabel62, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 370, 20, 15));

        jLabel61.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel61.setForeground(new java.awt.Color(255, 255, 255));
        jLabel61.setText("20");
        Resultadoparafuso1.add(jLabel61, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 270, 20, 15));

        jlabelre1.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jlabelre1.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso1.add(jlabelre1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 290, 50, 20));

        numpara1.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        numpara1.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso1.add(numpara1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 450, 50, 20));

        alfaetext1.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        alfaetext1.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso1.add(alfaetext1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 160, 40, 20));

        jLabel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel19MouseClicked(evt);
            }
        });
        Resultadoparafuso1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 450, 90, 30));

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetomadeira/chapademadeiraparafuso.png"))); // NOI18N
        Resultadoparafuso1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel39.setText("jLabel39");
        Resultadoparafuso1.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 330, -1, -1));

        bet1.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        bet1.setForeground(new java.awt.Color(255, 255, 255));
        Resultadoparafuso1.add(bet1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 350, 32, 25));

        jLabel53.setText("jLabel53");
        Resultadoparafuso1.add(jLabel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 130, -1, -1));

        jLabel38.setText("jLabel38");
        Resultadoparafuso1.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 230, -1, -1));

        jLabel33.setText("jLabel33");
        Resultadoparafuso1.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 170, -1, -1));

        jLabel32.setText("jLabel32");
        Resultadoparafuso1.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 110, -1, -1));

        jLabel54.setText("jLabel54");
        Resultadoparafuso1.add(jLabel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 120, -1, -1));

        jLabel55.setText("jLabel55");
        Resultadoparafuso1.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 140, -1, -1));

        jLabel56.setText("jLabel56");
        Resultadoparafuso1.add(jLabel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 140, -1, -1));

        jLabel65.setText("jLabel65");
        Resultadoparafuso1.add(jLabel65, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 140, -1, -1));

        jLabel66.setText("jLabel66");
        Resultadoparafuso1.add(jLabel66, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 190, -1, -1));

        jLabel67.setText("jLabel67");
        Resultadoparafuso1.add(jLabel67, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 140, -1, -1));

        jLabel68.setText("jLabel68");
        Resultadoparafuso1.add(jLabel68, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 130, -1, -1));

        jLabel69.setText("jLabel69");
        Resultadoparafuso1.add(jLabel69, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 130, -1, -1));

        jLabel70.setText("jLabel70");
        Resultadoparafuso1.add(jLabel70, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 140, -1, -1));

        jLabel71.setText("jLabel71");
        Resultadoparafuso1.add(jLabel71, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 150, -1, -1));

        jLabel72.setText("jLabel72");
        Resultadoparafuso1.add(jLabel72, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 140, -1, -1));

        jPanel1.add(Resultadoparafuso1, "card9");

        resultadosdospregos.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel17MouseClicked(evt);
            }
        });
        resultadosdospregos.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 450, 90, 30));

        fr.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        fr.setForeground(new java.awt.Color(255, 255, 255));
        resultadosdospregos.add(fr, new org.netbeans.lib.awtextra.AbsoluteConstraints(282, 95, 40, 25));

        resistembut.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        resistembut.setForeground(new java.awt.Color(255, 255, 255));
        resultadosdospregos.add(resistembut, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 260, 40, 25));

        diametfd.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        diametfd.setForeground(new java.awt.Color(255, 255, 255));
        resultadosdospregos.add(diametfd, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 160, 40, 25));

        afc.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        afc.setForeground(new java.awt.Color(255, 255, 255));
        resultadosdospregos.add(afc, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 160, 40, 25));

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jButton5.setText("Gerar PDF");
        jButton5.setBorder(null);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        resultadosdospregos.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, 90, 30));

        jLabel57.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jLabel57.setForeground(new java.awt.Color(255, 255, 255));
        resultadosdospregos.add(jLabel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 290, 50, 25));

        jLabel58.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel58.setForeground(new java.awt.Color(255, 255, 255));
        resultadosdospregos.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 370, 20, 15));

        jLabel63.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel63.setForeground(new java.awt.Color(255, 255, 255));
        resultadosdospregos.add(jLabel63, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 270, 20, 15));

        jLabel60.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jLabel60.setForeground(new java.awt.Color(255, 255, 255));
        resultadosdospregos.add(jLabel60, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 380, 40, 25));

        jLabel59.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jLabel59.setForeground(new java.awt.Color(255, 255, 255));
        resultadosdospregos.add(jLabel59, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 450, 40, 25));

        jLabel64.setFont(new java.awt.Font("Arial Unicode MS", 0, 10)); // NOI18N
        jLabel64.setForeground(new java.awt.Color(255, 255, 255));
        resultadosdospregos.add(jLabel64, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 350, 40, 25));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetomadeira/chapamadeiraprego.png"))); // NOI18N
        resultadosdospregos.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel73.setText("jLabel73");
        resultadosdospregos.add(jLabel73, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 110, -1, -1));

        jLabel74.setText("jLabel74");
        resultadosdospregos.add(jLabel74, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 120, -1, -1));

        jLabel75.setText("jLabel75");
        resultadosdospregos.add(jLabel75, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 220, -1, -1));

        jLabel76.setText("jLabel76");
        resultadosdospregos.add(jLabel76, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 160, -1, -1));

        jLabel77.setText("jLabel77");
        resultadosdospregos.add(jLabel77, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 100, -1, -1));

        jLabel78.setText("jLabel78");
        resultadosdospregos.add(jLabel78, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 120, -1, -1));

        jPanel1.add(resultadosdospregos, "card8");

        jPanel5.add(jPanel1);

        getContentPane().add(jPanel5, "card4");

        jPanel6.setLayout(new java.awt.CardLayout());

        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel35.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetomadeira/botao.png"))); // NOI18N
        jLabel35.setText("jLabel35");
        jLabel35.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel35MouseClicked(evt);
            }
        });
        jPanel7.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 420, 160, 60));

        jLabel36.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetomadeira/titulosuperior.png"))); // NOI18N
        jLabel36.setText("jLabel36");
        jPanel7.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, 420, 50));

        jLabel46.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetomadeira/botaovoltar.png"))); // NOI18N
        jLabel46.setText("jLabel35");
        jLabel46.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel46MouseClicked(evt);
            }
        });
        jPanel7.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 420, 160, 60));

        jLabel37.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(255, 255, 255));
        jLabel37.setText("Prefuração da Madeira(mm): ");
        jPanel7.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 170, 25));

        jLabel48.setFont(new java.awt.Font("Arial Unicode MS", 0, 12)); // NOI18N
        jLabel48.setForeground(new java.awt.Color(255, 255, 255));
        jPanel7.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 110, 60, 25));

        jPanel6.add(jPanel7, "card2");

        getContentPane().add(jPanel6, "card5");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox15ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox15ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        String valorresistencia = jComboBox1.getSelectedItem().toString();
        double resmad1 = 0;
        
        /*Valor das resistências e caracterisitcas das dicotiledoneas*/
        if("C20".equals(valorresistencia)&& seldico.isSelected()){
            resmad1 = 40;
            resfc0k.setText("20");
            jLabel26.setText("4");
            resecom.setText("9500");
            respapa.setText("650");
        }
        if("C30".equals(valorresistencia)&& seldico.isSelected()){
            resmad1 = 40;
            resfc0k.setText("30");
            jLabel26.setText("5");
            resecom.setText("14500");
            respapa.setText("800");
        }
        if("C40".equals(valorresistencia)&& seldico.isSelected()){
            resmad1 = 40;
            resfc0k.setText("40");
            jLabel26.setText("6");
            resecom.setText("19500");
            respapa.setText("950");
        }
        if("C60".equals(valorresistencia)&& seldico.isSelected()){
            resmad1 = 40;
            resfc0k.setText("60");
            jLabel26.setText("8");
            resecom.setText("24500");
            respapa.setText("1000");
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox10ActionPerformed

    }//GEN-LAST:event_jComboBox10ActionPerformed

    private void selcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selcoActionPerformed
        
    }//GEN-LAST:event_selcoActionPerformed

    private void seldicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seldicoActionPerformed
       
    }//GEN-LAST:event_seldicoActionPerformed

    private void jLabel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseClicked
             jPanel1.setVisible(true);
             Escolhamadeira.setVisible(false);
             escolhadacarga.setVisible(false);
             pregoeparafuso.setVisible(false);
             Resultadoparafuso.setVisible(false);
             Entalheresult.setVisible(false);
             Teladimensao.setVisible(true);
    }//GEN-LAST:event_jLabel15MouseClicked

    private void combinaçãoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combinaçãoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combinaçãoActionPerformed

    private void cargasacidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargasacidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cargasacidActionPerformed

    private void sobrecargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sobrecargaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sobrecargaActionPerformed

    private void jLabel34MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel34MouseClicked
            jLabel12.setText(jTextField5.getText());
            jPanel1.setVisible(true);
         
            Entalheresult.setVisible(false);
            Escolhamadeira.setVisible(false);
            escolhadacarga.setVisible(false);
            pregoeparafuso.setVisible(false);
            Resultadoparafuso.setVisible(false);
            Entalheresult.setVisible(true);
            jLabel8.setVisible(false);
            jLabel3.setVisible(false);
        
    }//GEN-LAST:event_jLabel34MouseClicked

    private void escopregoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escopregoActionPerformed
        String esco = escoprego.getSelectedItem().toString();
        double esco1 = Double.parseDouble(esco);
        for (int i = 1; i<39;i++){
            if(esco1==i){
                int hj = i-1;
                String gj = (String) jTable1.getValueAt(hj, 1);
                Bitola.setText(gj);
                double diask = (double) jTable1.getValueAt(hj, 2);
                String diask1 = String.valueOf(diask);
                diametroprego.setText(diask1);
                double diask2 = (double) jTable1.getValueAt(hj, 3);
                String diask3 = String.valueOf(diask2);
                comprprego.setText(diask3);
                double diask4 = (double) jTable1.getValueAt(hj, 4);
                String diask5 = String.valueOf(diask4);
                penmini.setText(diask5);
            }
        }
    }//GEN-LAST:event_escopregoActionPerformed

    private void escoparaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escoparaActionPerformed

    }//GEN-LAST:event_escoparaActionPerformed

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        
        if(ligprego.isSelected()){
        jPanel1.setVisible(true);
        escolhachapas.setVisible(false);
        soparafuso.setVisible(false);
        pregoeparafuso.setVisible(false);
        Escolhamadeira.setVisible(false);
        Entalheresult.setVisible(false);
        escolhadacarga.setVisible(false);
        Resultadoparafuso1.setVisible(false);
        resultadosdospregos.setVisible(true);
        Resultadoparafuso.setVisible(false);
        }
        if(ligpara.isSelected()){
        jPanel1.setVisible(true);
        escolhachapas.setVisible(false);
        soparafuso.setVisible(false);
        pregoeparafuso.setVisible(false);
        Escolhamadeira.setVisible(false);
        Entalheresult.setVisible(false);
        escolhadacarga.setVisible(false);
        Resultadoparafuso1.setVisible(true);
        resultadosdospregos.setVisible(false);
        Resultadoparafuso.setVisible(false); 
        }
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
        /*Resistência da Madeira Propria*/
        /*Dados iniciais do primeiro elemento de ligação */
        /*Valor das resistências e caracterisitcas das coníferas*/
        DecimalFormat fe = new DecimalFormat("0.00");
       
        String valorresistenciamadeira = null;
        double resmad1 = 0;
        if(selco.isSelected()){
             valorresistenciamadeira = jComboBox2.getSelectedItem().toString(); 
        }
        if(seldico.isSelected()){
             valorresistenciamadeira = jComboBox1.getSelectedItem().toString();
        }
        /*se as duas nao estiverem marcadas*/
        if ((selco.isSelected() == false && seldico.isSelected()== false)){}
        if("C20".equals(valorresistenciamadeira)&& selco.isSelected()){
            resmad1 = 20;
            
        }
        if("C25".equals(valorresistenciamadeira)&& selco.isSelected()){
            resmad1 = 25;
            }
        if("C30".equals(valorresistenciamadeira)&& selco.isSelected()){
            resmad1 = 30;
           
        }
        /*Valor das resistências e caracterisitcas das dicotiledoneas*/
        if("C20".equals(valorresistenciamadeira)&& seldico.isSelected()){
            resmad1 = 20;
           
        }
        if("C30".equals(valorresistenciamadeira)&& seldico.isSelected()){
            resmad1 = 30;
           
        }
        if("C40".equals(valorresistenciamadeira)&& seldico.isSelected()){
            resmad1 = 40;
       
        }
        if("C60".equals(valorresistenciamadeira)&& seldico.isSelected()){
            resmad1 = 60;
          
        }
        /*tamanho da madeira*/
        
        /*Valor dos kmod1 e kmod2 e kmod3 do elemento de madeira 1*/
        String kmods = jComboBox10.getSelectedItem().toString();
        String km = jComboBox9.getSelectedItem().toString();
        double kmod1mad1 = 0;

        /*Longa duração para kmod1 da madeira 1*/
        if(("Permanente".equals(kmods)&& "Madeira Serrada".equals(km))){
            kmod1mad1 = 0.60;
        }
        if(("Permanente".equals(kmods)&& "Madeira Laminada Colada".equals(km))){
            kmod1mad1 = 0.60;
        }
        if(("Permanente".equals(kmods)&& "Madeira Compensada".equals(km))){
            kmod1mad1 = 0.60;
        }
        if(("Permanente".equals(kmods)&& "Madeira Recomposta".equals(km))){
            kmod1mad1 = 0.30;
        }
        /*Longa duração para kmod1 da madeira 1*/
        if("Longa Duração".equals(kmods)&& "Madeira Serrada".equals(km)){
            kmod1mad1 = 0.70;
        }
        if(("Longa Duração".equals(kmods)&& "Madeira Laminada Colada".equals(km))){
            kmod1mad1 = 0.70;
        }
        if(("Longa Duração".equals(kmods)&& "Madeira Compensada".equals(km))){
            kmod1mad1 = 0.70;}

        if("Longa Duração".equals(kmods)&& "Madeira Recomposta".equals(km)){
            kmod1mad1 = 0.45;
        }
        /*Média duração para kmod1 da madeira 1*/
        if("Média duração".equals(kmods)&& "Madeira Serrada".equals(km)){
            kmod1mad1 = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Laminada Colada".equals(km)){
            kmod1mad1 = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Compensada".equals(km)){
            kmod1mad1 = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Recomposta".equals(km)){
            kmod1mad1 = 0.80;
        }
        /*Curta duração para kmod1 da madeira 1*/
        if("Curta Duração".equals(kmods)&& "Madeira Serrada".equals(km)){
            kmod1mad1 = 0.90;
        }
        if("Curta Duração".equals(kmods)&& "Madeira Laminada Colada".equals(km)){
            kmod1mad1 = 0.90;
        }
        if("Curta Duração".equals(kmods)&& "Madeira Compensada".equals(km)){
            kmod1mad1 = 0.90;
        }
        if("Curta Duração".equals(kmods)&& "Madeira Recomposta".equals(km)){
            kmod1mad1 = 0.90;
        }
        /*Instantanea duração para kmod1 da madeira 1*/
        if("Instantânea".equals(kmods)&& "Madeira Serrada".equals(km)){
            kmod1mad1 = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Laminada Colada".equals(km)){
            kmod1mad1 = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Compensada".equals(km)){
            kmod1mad1 = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Recomposta".equals(km)){
            kmod1mad1 = 1.10;
        }
        /*kmod 2 da madeira 1*/

        String kmod2 = jComboBox13.getSelectedItem().toString();
        String km2 = jComboBox9.getSelectedItem().toString();
        double kmod2mad1 = 0;

        /*Classe de umidade 1 do kmod2 da madeira 1*/
        if("1".equals(kmod2)){
            kmod2mad1 = 1;
        }
        /*Classe de umidade 2 do kmod2 da madeira 2*/
        if("2".equals(kmod2)){
            kmod2mad1 = 1;
        }

        /*Classe de umidade da 3  kmod2 da madeira 1*/
        if("3".equals(kmod2)&& "Madeira Serrada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("3".equals(kmod2)&& "Madeira Laminada Colada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("3".equals(kmod2)&& "Madeira Compensada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("3".equals(kmod2)&& "Madeira Recomposta".equals(km2)){
            kmod2mad1 = 0.9;
        }
        /*Classe de umidade 2 para kmod2 da madeira 1*/
        if("4".equals(kmod2)&& "Madeira Serrada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("4".equals(kmod2)&& "Madeira Laminada Colada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("4".equals(kmod2)&& "Madeira Compensada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("4".equals(kmod2)&& "Madeira Recomposta".equals(km2)){
            kmod2mad1 = 0.9;
        }
        /*Kmod 3 da madeira 1*/
        String kmod36s2 = jComboBox15.getSelectedItem().toString();
        double kmod3mad1 = 0;
        if("1".equals(kmod36s2)){
            kmod3mad1 = 1;
        }
        if("2".equals(kmod36s2)){
            kmod3mad1 = 0.80;
        }

        /*Cálculo do kmod final é do elemento 1*/
        double kmodfinalmad1;
        kmodfinalmad1 = kmod1mad1*kmod2mad1*kmod3mad1;
  
        /*espessura da madeira principal*/
        String t2damadeira = jTextField4.getText();
        double t2n1 = Double.parseDouble(t2damadeira);
        double t2n = t2n1/2;
        
        /*Cálculo dos betas do parafuso*/
        /*escolha do parafuso*/
        String escopara1 = escometal.getSelectedItem().toString();
        diam.setText(escometal.getSelectedItem().toString());
        double diametropara= 0;
        if("0.95".equals(escopara1)){
            diametropara = 0.95;
        }
        if("1.25".equals(escopara1)){
            diametropara = 1.25;
        }
        if("1.60".equals(escopara1)){
            diametropara = 1.60;
        }
        if("1.90".equals(escopara1)){
            diametropara = 1.90;
        }
        if("2.20".equals(escopara1)){
            diametropara = 2.20;
        }
        if("2.50".equals(escopara1)){
            diametropara = 2.50;
        }
        if("3.10".equals(escopara1)){
            diametropara = 3.10;
        }
        if("3.80".equals(escopara1)){
            diametropara = 3.80;
        }
        
        double resultcal190;
        double resultcal10;
        double alfae = 0;
        if(diametropara==0.9525){
            alfae = 1.95;
        }
        if(diametropara==1.25){
            alfae = 1.68;
        }
        if(diametropara==1.60){
            alfae = 1.52;
        }
        if(diametropara==1.90){
            alfae = 1.41;
        }
        if(diametropara==2.20){
            alfae = 1.33;
        }
        if(diametropara==2.50){
            alfae = 1.27;
        }
        if(diametropara==3.10){
            alfae = 1.19;
        }
        if(diametropara==3.80){
            alfae = 1.14;
        }
        
        alfaetext.setText(String.valueOf(alfae));
        /*Cálculo da resistência da madeira principal1*/
        /*Resistência de cálculo da madeira 0*/
        alfaetext.setText(String.valueOf(alfae));
        double fc0dmad1 = (kmodfinalmad1*(resmad1/(1.4)))/10;
        String fc0dmad1certo = (String.format(fe.format(fc0dmad1)));
        resultcal10 = fc0dmad1;
        /*Resistência de cálculo da madeira 90*/
        double fc90dmad1 = (kmodfinalmad1*((resmad1*0.25)/(1.4)))/10;
        /*Resistência de cálculo da madeira no ângulo escolhido*/
        double fec0d = fc0dmad1;
        jLabel44.setText(String.format(fe.format(fec0d)));
        double fec90d = fc0dmad1*0.25*alfae;
        jLabel45.setText(String.format(fe.format(fec90d)));
                
        String valordoangulo = jTextField5.getText();
        double valordoangulo1 = Double.parseDouble(valordoangulo);
        double valordoangulo2 = Math.toRadians(valordoangulo1);
        double resultadodif = (fec0d*fec90d)/((fec0d*(Math.sin(valordoangulo2))*(Math.sin(valordoangulo2)))+(fec90d*(Math.cos(valordoangulo2))*(Math.cos(valordoangulo2))));
        jLabel47.setText(String.format(fe.format(resultadodif)));
        /*cálculo dos betas*/
        double betcalc;
        double betlimitecalc;
        /*Beta 1 */
        betcalc = (t2n/diametropara);
        /*Beta Limite 1*/
        betlimitecalc = (1.25*Math.sqrt((25/1.1)/resultadodif));
        /*Passando valores de Beta*/
        betlimite.setText(String.format(fe.format(betlimitecalc)));
        bet.setText(String.format(fe.format(betcalc)));
        /*Cálculo da resistÊncia do pinos*/
        double resistpinomadeiraprin1 = 0;
        double resistpinomadeiraprin2 = 0;
        double resistênciaprincipal =0;
        resistpinomadeiraprin1 = 0.625*((diametropara*diametropara)/betlimitecalc)*(25/1.1);
        resistpinomadeiraprin2 = 0.40*((t2n*t2n)/betcalc)*resultadodif;
        if(betcalc>betlimitecalc){
            resistênciaprincipal = resistpinomadeiraprin1;
            jLabel49.setText("Beta > BetaLimite");
            jLabel50.setText(String.format(fe.format(resistpinomadeiraprin1)));
        }
        if(betcalc<betlimitecalc){
            resistênciaprincipal = resistpinomadeiraprin2;
            jLabel49.setText("Beta < BetaLimite");
            jLabel50.setText(String.format(fe.format(resistpinomadeiraprin2)));
        }
        
        double resistenciachapamadeira;
        double resistenciachapametalica;
        double resistpino = 0;
        
        if(chapametal.isSelected()){
        /*Cálculo da chapa metálica*/
        double Resistenciarup = Double.parseDouble(jTextField8.getText().toString());/*MPa*/
        resistchp.setText(jTextField8.getText());
        double espessurachapamet = Double.parseDouble(jTextField10.getText().toString());/*cm*/
        espechp.setText(jTextField10.getText());
        double diametroparafusometal = Double.parseDouble(escometal.getSelectedItem().toString()); /*cm*/
        
        /*Cisalhamento do corpo do parafuso*/
        double frvdci = (0.4*(((Math.PI)*(diametroparafusometal*diametroparafusometal))/4)*(240/10))/1.35;
        jLabel41.setText(String.format(fe.format(frvdci)));
        /*Pressão contato do furo*/ 
        /*adotando lb como sendo 3*diametro para as bordas*/
        /*primeira parte da fórmula*/
        double fvrdpr1 = (1.2*3*diametroparafusometal*espessurachapamet*(Resistenciarup/10))/1.35;
        jLabel42.setText(String.format(fe.format(fvrdpr1)));
        double fvrdpr2 = (2*1.2*diametroparafusometal*espessurachapamet*(Resistenciarup/10))/1.35;
        jLabel43.setText(String.format(fe.format(fvrdpr2)));
        double resistenciachapametalica2 = Math.min(fvrdpr1,fvrdpr2);
        resistenciachapametalica = Math.min(resistenciachapametalica2,frvdci);
        resistpino = Math.min(resistenciachapametalica,resistênciaprincipal);
        maxiresistc.setText(String.format(fe.format(resistenciachapametalica2)));
        }
        
        jlabelre.setText(String.format(fe.format(resistpino)));
        
        forcasolicitante.setText(frdrecebido.getText());
        String frdfd = jLabel31.getText();
        double Frd = Double.parseDouble(frdfd);
        
        /*Cálculo número de pinos*/
        double numeparafu = (Frd/(resistpino*2));
        int numeparafu1 = (int)Math.ceil(numeparafu);
        numpara.setText(String.valueOf(numeparafu1));
        
    }//GEN-LAST:event_jLabel14MouseClicked

    private void tipomadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tipomadMouseClicked
        jPanel1.setVisible(true);
    
        Escolhamadeira.setVisible(true);
        Entalheresult.setVisible(false);
        escolhadacarga.setVisible(false);
        pregoeparafuso.setVisible(false);
        Resultadoparafuso.setVisible(false);
        Teladimensao.setVisible(false);
     

    }//GEN-LAST:event_tipomadMouseClicked

    private void acaosolMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_acaosolMouseClicked
       jPanel1.setVisible(true);
   
        Escolhamadeira.setVisible(false);
        Entalheresult.setVisible(false);
        escolhadacarga.setVisible(true);
        pregoeparafuso.setVisible(false);
        Resultadoparafuso.setVisible(false);
        Teladimensao.setVisible(false);
    }//GEN-LAST:event_acaosolMouseClicked

    private void resultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultMouseClicked
        jPanel1.setVisible(true);
      
        Escolhamadeira.setVisible(false);
        Entalheresult.setVisible(true);
        escolhadacarga.setVisible(false);
        pregoeparafuso.setVisible(false);
        Resultadoparafuso.setVisible(false);
        Teladimensao.setVisible(false);

    }//GEN-LAST:event_resultMouseClicked

    private void jLabel35MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel35MouseClicked
   
    }//GEN-LAST:event_jLabel35MouseClicked

    private void jLabel46MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel46MouseClicked

            jPanel5.setVisible(true);
            jPanel6.setVisible(false);
            jPanel7.setVisible(false);
            jPanel2.setVisible(true);
            jPanel1.setVisible(true);
     
       
            Escolhamadeira.setVisible(false);
            escolhadacarga.setVisible(false);
            pregoeparafuso.setVisible(false);
            Resultadoparafuso.setVisible(false);
        
    }//GEN-LAST:event_jLabel46MouseClicked

    private void seldicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seldicoMouseClicked
        /*removendo items*/
        jComboBox1.setVisible(true);
        jComboBox2.setVisible(false);
    }//GEN-LAST:event_seldicoMouseClicked

    private void selcoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selcoMouseClicked
        /*removendo items*/
        jComboBox1.setVisible(false);
        jComboBox2.setVisible(true);
    }//GEN-LAST:event_selcoMouseClicked

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
       String valorresistencia = jComboBox2.getSelectedItem().toString();
        double resmad1 = 0;
        if ((selco.isSelected() == false && seldico.isSelected()== false)){}
        if("C20".equals(valorresistencia)&& selco.isSelected()){
            resmad1 = 20;
            resfc0k.setText("20");
            jLabel26.setText("4");
            resecom.setText("3500");
            respapa.setText("500");
        }
        if("C25".equals(valorresistencia)&& selco.isSelected()){
            resmad1 = 25;
            resfc0k.setText("25");
            jLabel26.setText("5");
            resecom.setText("8500");
            respapa.setText("550");}
        if("C30".equals(valorresistencia)&& selco.isSelected()){
            resmad1 = 30;
            resfc0k.setText("30");
            jLabel26.setText("6");
            resecom.setText("3500");
            respapa.setText("600");
        } 
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jLabel18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel18MouseClicked
          /*Dados iniciais do primeiro elemento de ligação */
        /*Valor das resistências e caracterisitcas das coníferas*/
        String valorresistencia = null;
        double resmad1 = 0;
        double rescis = 0;
        if(selco.isSelected()){
             valorresistencia = jComboBox2.getSelectedItem().toString();
        }
        if(seldico.isSelected()){
             valorresistencia = jComboBox1.getSelectedItem().toString();
        }
        /*se as duas nao estiverem marcadas*/
        if ((selco.isSelected() == false && seldico.isSelected()== false)){}
        if("C20".equals(valorresistencia)&& selco.isSelected()){
            resmad1 = 20;
            rescis = 4;
            resfc0k.setText("20");
            jLabel26.setText("4");
            resecom.setText("3500");
            respapa.setText("500");
            jLabel22.setText("400");
        }
        if("C25".equals(valorresistencia)&& selco.isSelected()){
            resmad1 = 25;
            rescis = 5;
            resfc0k.setText("25");
            jLabel26.setText("5");
            resecom.setText("8500");
            respapa.setText("550");
            jLabel22.setText("450");
        
        }
        if("C30".equals(valorresistencia)&& selco.isSelected()){
            resmad1 = 30;
            rescis = 6;
            resfc0k.setText("30");
            jLabel26.setText("6");
            resecom.setText("14500");
            respapa.setText("600");
            jLabel22.setText("500");
        }
        /*Valor das resistências e caracterisitcas das dicotiledoneas*/
        if("C20".equals(valorresistencia)&& seldico.isSelected()){
            resmad1 = 20;
            rescis = 4;
            resfc0k.setText("20");
            jLabel26.setText("4");
            resecom.setText("9500");
            respapa.setText("650");
            jLabel22.setText("500");
        }
        if("C30".equals(valorresistencia)&& seldico.isSelected()){
            resmad1 = 30;
            rescis = 5;
            resfc0k.setText("30");
            jLabel26.setText("5");
            resecom.setText("14500");
            respapa.setText("800");
            jLabel22.setText("650");
        }
        if("C40".equals(valorresistencia)&& seldico.isSelected()){
            resmad1 = 40;
            rescis = 6;
            resfc0k.setText("40");
            jLabel26.setText("6");
            resecom.setText("19500");
            respapa.setText("950");
            jLabel22.setText("750");
        }
        if("C60".equals(valorresistencia)&& seldico.isSelected()){
            resmad1 = 60;
            rescis = 8;
            resfc0k.setText("60");
            jLabel26.setText("8");
            resecom.setText("24500");
            respapa.setText("1000");
            jLabel22.setText("800");
        }
        
        /*tamanho da madeira*/
        DecimalFormat fe = new DecimalFormat("0.00");
        jLabel21.setText(String.format(fe.format(resmad1*0.25)));
        /*Valor dos kmod1 e kmod2 e kmod3 do elemento de madeira 1*/
        String kmods = jComboBox10.getSelectedItem().toString();
        String km = jComboBox9.getSelectedItem().toString();
        double kmod1mad1 = 0;

        /*Longa duração para kmod1 da madeira 1*/
        if(("Permanente".equals(kmods)&& "Madeira Serrada".equals(km))){
            kmod1mad1 = 0.60;
        }
        if(("Permanente".equals(kmods)&& "Madeira Laminada Colada".equals(km))){
            kmod1mad1 = 0.60;
        }
        if(("Permanente".equals(kmods)&& "Madeira Compensada".equals(km))){
            kmod1mad1 = 0.60;
        }
        if(("Permanente".equals(kmods)&& "Madeira Recomposta".equals(km))){
            kmod1mad1 = 0.30;
        }
        /*Longa duração para kmod1 da madeira 1*/
        if("Longa duração".equals(kmods)&& "Madeira Serrada".equals(km)){
            kmod1mad1 = 0.70;
        }
        if(("Longa duração".equals(kmods)&& "Madeira Laminada Colada".equals(km))){
            kmod1mad1 = 0.70;
        }
        if(("Longa duração".equals(kmods)&& "Madeira Compensada".equals(km))){
            kmod1mad1 = 0.70;}

        if("Longa duração".equals(kmods)&& "Madeira Recomposta".equals(km)){
            kmod1mad1 = 0.45;
        }
        /*Média duração para kmod1 da madeira 1*/
        if("Média duração".equals(kmods)&& "Madeira Serrada".equals(km)){
            kmod1mad1 = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Laminada Colada".equals(km)){
            kmod1mad1 = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Compensada".equals(km)){
            kmod1mad1 = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Recomposta".equals(km)){
            kmod1mad1 = 0.80;
        }
        /*Curta duração para kmod1 da madeira 1*/
        if("Curta duração".equals(kmods)&& "Madeira Serrada".equals(km)){
            kmod1mad1 = 0.90;
        }
        if("Curta duração".equals(kmods)&& "Madeira Laminada Colada".equals(km)){
            kmod1mad1 = 0.90;
        }
        if("Curta duração".equals(kmods)&& "Madeira Compensada".equals(km)){
            kmod1mad1 = 0.90;
        }
        if("Curta duração".equals(kmods)&& "Madeira Recomposta".equals(km)){
            kmod1mad1 = 0.90;
        }
        /*Instantanea duração para kmod1 da madeira 1*/
        if("Instantânea".equals(kmods)&& "Madeira Serrada".equals(km)){
            kmod1mad1 = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Laminada Colada".equals(km)){
            kmod1mad1 = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Compensada".equals(km)){
            kmod1mad1 = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Recomposta".equals(km)){
            kmod1mad1 = 1.10;
        }
        /*kmod 2 da madeira 1*/

        String kmod2 = jComboBox13.getSelectedItem().toString();
        String km2 = jComboBox9.getSelectedItem().toString();
        double kmod2mad1 = 0;

        /*Classe de umidade 1 do kmod2 da madeira 1*/
        if("1".equals(kmod2)){
            kmod2mad1 = 1;
        }
        /*Classe de umidade 2 do kmod2 da madeira 2*/
        if("2".equals(kmod2)){
            kmod2mad1 = 1;
        }

        /*Classe de umidade da 3  kmod2 da madeira 1*/
        if("3".equals(kmod2)&& "Madeira Serrada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("3".equals(kmod2)&& "Madeira Laminada Colada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("3".equals(kmod2)&& "Madeira Compensada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("3".equals(kmod2)&& "Madeira Recomposta".equals(km2)){
            kmod2mad1 = 0.9;
        }
        /*Classe de umidade 2 para kmod2 da madeira 1*/
        if("4".equals(kmod2)&& "Madeira Serrada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("4".equals(kmod2)&& "Madeira Laminada Colada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("4".equals(kmod2)&& "Madeira Compensada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("4".equals(kmod2)&& "Madeira Recomposta".equals(km2)){
            kmod2mad1 = 0.9;
        }
        /*Kmod 3 da madeira 1*/
        String kmod36s2 = jComboBox15.getSelectedItem().toString();
        double kmod3mad1 = 0;
        if("1".equals(kmod36s2)){
            kmod3mad1 = 1;
        }
        if("2".equals(kmod36s2)){
            kmod3mad1 = 0.80;
        }

        /*Cálculo do kmod final é do elemento 1*/
        double kmodfinalmad1;
        kmodfinalmad1 = kmod1mad1*kmod2mad1*kmod3mad1;
        String kmod1certo = (String.format(fe.format(kmod1mad1)));
        String kmod2certo = (String.format(fe.format(kmod2mad1)));
        String kmod3certo = (String.format(fe.format(kmod3mad1)));
        resulkmod8.setText(kmod1certo);
        resulkmod11.setText(String.format("%.2f",kmodfinalmad1));
        resulkmod9.setText(kmod2certo);
        resulkmod10.setText(kmod3certo);
        
        
        /*Dados de entrada da peça*/
        String altura = jTextField7.getText();
        double altura1 = Double.parseDouble(altura);
        String comprimentoa = jTextField2.getText();
        double comprimentoa1 = Double.parseDouble(comprimentoa);
        String penetracao = jTextField3.getText();
        double penetracao1 = Double.parseDouble(penetracao);
        String espessura = jTextField4.getText();
        double espessura1 = Double.parseDouble(espessura);
        String angulopeca = jTextField5.getText();
        jLabel12.setText(jTextField5.getText());
        double angulopeca1 = Double.parseDouble(angulopeca);
        double angulopeca2 = Math.toRadians(angulopeca1);
        
        
        /*Cálculo da resistência compressão inclinada */
        double fc0dmad1;
        fc0dmad1 = (kmodfinalmad1*(resmad1/(1.4)))/10;
        jLabel23.setText(String.format(fe.format(fc0dmad1)));
        double fc90dmad1;
        fc90dmad1 = fc0dmad1*0.25;
        jLabel24.setText(String.format(fe.format(fc90dmad1)));
        double fcangmad1;
        fcangmad1 = (fc0dmad1*fc90dmad1)/((fc0dmad1*(Math.sin(angulopeca2))*(Math.sin(angulopeca2)))+(fc90dmad1*(Math.cos(angulopeca2))*(Math.cos(angulopeca2))));
        rescomcal2.setText(String.format(fe.format(fcangmad1)));
        
        /*Cálculo da resistência ao cisalhamento*/
        double fv0dmad1;
        fv0dmad1 = (kmodfinalmad1*(rescis/(1.8)))/10;
        String fv0dmad11 = (String.format(fe.format(fv0dmad1)));
        resutcis.setText(fv0dmad11);
        
        /*Escolha das variações das cargas*/
        /*Ações permanentes pequena variabilidade*/
        String variabilidade = Tipodevariabilidade.getSelectedItem().toString();
        String efeito = paraefeitos.getSelectedItem().toString();
        String comb = combinação.getSelectedItem().toString();
        double majorperma = 0;
        double majorvaria = 0;
        if("Ações de Pequena Variabilidade".equals(variabilidade)&& "Desfavoráveis".equals(efeito)&& "Normais".equals(comb)){
            majorperma = 1.3;
        }
        if("Ações de Pequena Variabilidade".equals(variabilidade)&& "Desfavoráveis".equals(efeito)&& "Especiais ou de Construções".equals(comb)){
            majorperma = 1.2;
        }
        if("Ações de Pequena Variabilidade".equals(variabilidade)&& "Desfavoráveis".equals(efeito)&& "Excepcionais".equals(comb)){
            majorperma = 1.1;
        }
        if("Ações de Pequena Variabilidade".equals(variabilidade)&& "Favoráveis".equals(efeito)&& "Normais".equals(comb)){
            majorperma = 1.0;
        }
        if("Ações de Pequena Variabilidade".equals(variabilidade)&& "Favoráveis".equals(efeito)&& "Especiais ou de Construções".equals(comb)){
            majorperma = 1.0;
        }
        if("Ações de Pequena Variabilidade".equals(variabilidade)&& "Favoráveis".equals(efeito)&& "Excepcionais".equals(comb)){
            majorperma = 1.0;
        }
        /*Ações permanentes de grande variabildiade */
        if("Ações de Grande Variabilidade".equals(variabilidade)&& "Desfavoráveis".equals(efeito)&& "Normais".equals(comb)){
            majorperma = 1.4;
        }
        if("Ações de Grande Variabilidade".equals(variabilidade)&& "Desfavoráveis".equals(efeito)&& "Especiais ou de Construções".equals(comb)){
            majorperma = 1.3;
        }
        if("Ações de Grande Variabilidade".equals(variabilidade)&& "Desfavoráveis".equals(efeito)&& "Excepcionais".equals(comb)){
            majorperma = 1.2;
        }
        if("Ações de Grande Variabilidade".equals(variabilidade)&& "Favoráveis".equals(efeito)&& "Normais".equals(comb)){
            majorperma = 0.9;
        }
        if("Ações de Grande Variabilidade".equals(variabilidade)&& "Favoráveis".equals(efeito)&& "Especiais ou de Construções".equals(comb)){
            majorperma = 0.9;
        }
        if("Ações de Grande Variabilidade".equals(variabilidade)&& "Favoráveis".equals(efeito)&& "Excepcionais".equals(comb)){
            majorperma = 0.9;
        }
        /*Ações variáveis*/
        String varia = variavel.getSelectedItem().toString();
        if("Ações Variáveis em Geral".equals(varia)&& "Normais".equals(comb)){
            majorvaria = 1.4;
        }
        if("Ações Variáveis em Geral".equals(varia)&& "Especiais ou de Construções".equals(comb)){
            majorvaria = 1.2;
        }
        if("Ações Variáveis em Geral".equals(varia)&& "Excepcionais".equals(comb)){
            majorvaria = 1.0;
        }
        if("Efeitos da Temperatura".equals(varia)&& "Excepcionais".equals(comb)){
            majorvaria = 1.2;
        }
        if("Efeitos da Temperatura".equals(varia)&& "Especiais ou de Construções".equals(comb)){
            majorvaria = 1.0;
        }
        if("Efeitos da Temperatura".equals(varia)&& "Excepcionais".equals(comb)){
            majorvaria = 0;
        }
        /*fatores de utilização*/
        double w0 = 0;
        double w1 = 0;
        double w2 = 0;
        double w0c = 0;
        double w1c = 0;
        double w2c = 0;
        /*Ações em estruturas correntes*/
        String Fatores = acoescorrentes.getSelectedItem().toString();
        if("Variações uniformes de Temperatura".equals(Fatores)){
            w0c = 0.6;
            w1c = 0.5;
            w2c = 0.3;
        }
        if("Pressão Dinâmica do Vento".equals(Fatores)){
            w0c = 0.5;
            w1c = 0.2;
            w2c = 0.0;
        }
        /*Cargas acidentais dos edifícios*/
        String aci = cargasacid.getSelectedItem().toString();
        if("Não há pred. de Equipamentos Fixos nem de el. concentr".equals(aci)){
            w0 = 0.4;
            w1 = 0.3;
            w2 = 0.2;
        }
        if("Há pred. de Equipamentos Fixos ou de elev. Concentração.".equals(aci)){
            w0 = 0.7;
            w1 = 0.6;
            w2 = 0.4;
        }
        if("Bibliotecas, arquivos, oficinas ou garagens".equals(aci)){
            w0 = 0.8;
            w1 = 0.7;
            w2 = 0.6;
        }

        /*Combinaçao de ação */
        double Frd = 0;
        double Frd1;
        double Frd2;
        double Frd3 = 0;
        String sob = sobrecarga.getText();
        String perm = permanente.getText();
        String ventod = vento.getText();
        double sobrecarga1 = Double.parseDouble(sob);
        double permanente1 = Double.parseDouble(perm);
        double vento1 = Double.parseDouble(ventod);
        /*Combinação sobrecarga variável principal*/
        Frd1 = ((permanente1*majorperma)+(majorvaria*(sobrecarga1+(w0c*vento1))));
        /*Combinação vento como variável principal*/
        double valor = 1;
        if("Longa Duração".equals(kmods)){
           valor = 0.75;
        }
        Frd2 = ((permanente1*majorperma)+(majorvaria*(valor*vento1+(w0*sobrecarga1))));
        /*Combinação equipamento fixo*/
        String frdn1 = (String.format(fe.format(Frd1)));
        resultperma2.setText(frdn1);
        String frdn2 = (String.format(fe.format(Frd2)));
        resultvent2.setText(frdn2);
        
        if(Frd1<0){
            Frd1 = -Frd1;
        }
        if(Frd2<0){
            Frd2 = -Frd2;
        }
        
        if (Frd2>Frd1){
            Frd = Frd2;
        }
        if (Frd2<Frd1){
            Frd = Frd1;
        }
        
        
        /*Cálculo da Tensão cisalhante solicitante*/
        double tensaociso;
        tensaociso = Frd*(Math.cos(angulopeca2))/(espessura1*comprimentoa1);
        String tensaociso1 = (String.format(fe.format(tensaociso)));    
        tdcis.setText(tensaociso1);
        /*Cálculo da Tensão normal solicitante*/
        double tensaonormal;
        tensaonormal = Frd/(espessura1*(penetracao1/Math.cos(angulopeca2)));
        String tensaonormal1 = (String.format(fe.format(tensaonormal)));    
        tensaon.setText(tensaonormal1);
        /*Condição*/
        /*Quando a tensão normal não satisfaz mas a cisalhante sim*/
        if(tensaonormal>fcangmad1 && tensaociso<fv0dmad1){
              jLabel3.setVisible(true);
              jLabel8.setVisible(false);
              adichapa.setVisible(true);
              double forçaresistida = fcangmad1*(espessura1*(penetracao1/Math.cos(angulopeca2)));
              double forçaquesobra = Frd-forçaresistida;
              String frd = (String.format(fe.format(forçaquesobra)));
              jLabel51.setText(String.format(fe.format(forçaresistida)));
              frdrecebido.setText(frd);
              jLabel31.setText(String.valueOf(forçaquesobra));
              jLabel30.setText(frdrecebido.getText());
              jLabel25.setText("Resistência < Solicitante");
              jLabel27.setText("Resistência > Solicitante");
        }
        /*Quando a tensão normal satisfaz mas a cilhasante não*/
        if(tensaonormal<fcangmad1 && tensaociso>fv0dmad1){
              jLabel3.setVisible(true);
              jLabel8.setVisible(false);
              adichapa.setVisible(true);
              double forçaresistida = (fv0dmad1*espessura1*comprimentoa1)/(Math.cos(angulopeca2));
              double forçaquesobra = Frd-forçaresistida;
              String frd = (String.format(fe.format(forçaquesobra)));
              frdrecebido.setText(frd);
              jLabel51.setText(String.format(fe.format(forçaresistida)));
              jLabel31.setText(String.valueOf(forçaquesobra));
              jLabel30.setText(frdrecebido.getText());
              jLabel25.setText("Resistência > Solicitante");
              jLabel27.setText("Resistência < Solicitante");
        }
        /*quando a tensão normal não satisfaz e a cisalhante também não*/
        if(tensaonormal>fcangmad1 && tensaociso>fv0dmad1){
            jLabel3.setVisible(true);
              jLabel8.setVisible(false);
              adichapa.setVisible(true);
              double forçaresistida = fcangmad1*(espessura1*(penetracao1/Math.cos(angulopeca2)));
              double forçaresistida2 = (fv0dmad1*espessura1*comprimentoa1)/(Math.cos(angulopeca2));
              double forçaresistida3 = 0;
              if(forçaresistida2<forçaresistida){
                  forçaresistida3 = forçaresistida2;
              }
              if(forçaresistida2>=forçaresistida){
                  forçaresistida3 = forçaresistida;
              }
              double forçaquesobra = Frd-forçaresistida3;
              String frd = (String.format(fe.format(forçaquesobra)));
              frdrecebido.setText(frd);
              jLabel51.setText(String.format(fe.format(forçaresistida3)));
              jLabel31.setText(String.valueOf(forçaquesobra));
              jLabel30.setText(frdrecebido.getText());
              jLabel25.setText("Resistência < Solicitante");
              jLabel27.setText("Resistência < Solicitante");
        }
        /*quando a tensão normal e cisalhante satisfaz*/
        if(tensaonormal<fcangmad1 && tensaociso<fv0dmad1){
            jLabel3.setVisible(false);
              jLabel8.setVisible(true);
              adichapa.setVisible(false);
              jLabel25.setText("Resistência > Solicitante");
              jLabel27.setText("Resistência > Solicitante");
        }
        
    }//GEN-LAST:event_jLabel18MouseClicked

    private void adichapaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adichapaMouseClicked
        jPanel1.setVisible(true);
        escolhachapas.setVisible(true);
        soparafuso.setVisible(false);
        pregoeparafuso.setVisible(false);
        Escolhamadeira.setVisible(false);
        Entalheresult.setVisible(false);
        escolhadacarga.setVisible(false);
        Resultadoparafuso.setVisible(false);
        Resultadoparafuso1.setVisible(false);
        resultadosdospregos.setVisible(false);
        Resultadoparafuso.setVisible(false);
    }//GEN-LAST:event_adichapaMouseClicked

    private void TipodevariabilidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TipodevariabilidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TipodevariabilidadeActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
         String altura1 = jTextField6.getText();
            String pened1 = jTextField3.getText();
            double altura2 = Double.parseDouble(altura1);
            double pened2 = Double.parseDouble(pened1);
            if(altura2/4>pened2){
             JOptionPane.showMessageDialog(null,"Penetração não atendida h/4 > d","Desconformidade com Norma NBR 7190/1997",JOptionPane.OK_OPTION);
             jPanel1.setVisible(true);
           
             Escolhamadeira.setVisible(false);
             escolhadacarga.setVisible(false);
             pregoeparafuso.setVisible(false);
             Resultadoparafuso.setVisible(false);
             Entalheresult.setVisible(false);
             Teladimensao.setVisible(true);
            }else{
            jPanel1.setVisible(true);
          
            Escolhamadeira.setVisible(false);
            escolhadacarga.setVisible(true);
            Teladimensao.setVisible(false);
            pregoeparafuso.setVisible(false);
            Resultadoparafuso.setVisible(false);
            Entalheresult.setVisible(false);
            }
    }//GEN-LAST:event_jLabel10MouseClicked

    private void tamanhopecaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tamanhopecaMouseClicked
        jPanel1.setVisible(true);
       
        Escolhamadeira.setVisible(false);
        Entalheresult.setVisible(false);
        escolhadacarga.setVisible(false);
        pregoeparafuso.setVisible(false);
        Resultadoparafuso.setVisible(false);
        Teladimensao.setVisible(true);
    }//GEN-LAST:event_tamanhopecaMouseClicked

    private void acoescorrentesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acoescorrentesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_acoescorrentesActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void escometalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escometalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_escometalActionPerformed

    private void jComboBox16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox16ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox16ActionPerformed

    private void seldico1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seldico1MouseClicked
        jComboBox4.setVisible(true);
        jComboBox3.setVisible(false);
    }//GEN-LAST:event_seldico1MouseClicked

    private void seldico1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seldico1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seldico1ActionPerformed

    private void selco1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selco1MouseClicked
        jComboBox4.setVisible(false);
        jComboBox3.setVisible(true);
    }//GEN-LAST:event_selco1MouseClicked

    private void selco1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selco1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selco1ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField8ActionPerformed

    private void jTextField9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField9ActionPerformed

    private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField10ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jLabel17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MouseClicked
        /*Resistência da Madeira Propria*/
        /*Dados iniciais do primeiro elemento de ligação */
        /*Valor das resistências e caracterisitcas das coníferas*/
        String valorresistenciamadeira = null;
        double resmad1 = 0;
        if(selco.isSelected()){
             valorresistenciamadeira = jComboBox2.getSelectedItem().toString();
             
        }
        if(seldico.isSelected()){
             valorresistenciamadeira = jComboBox1.getSelectedItem().toString();
        }
        /*se as duas nao estiverem marcadas*/
        if ((selco.isSelected() == false && seldico.isSelected()== false)){}
        if("C20".equals(valorresistenciamadeira)&& selco.isSelected()){
            resmad1 = 20;
            resfc0k.setText("20");
            jLabel26.setText("4");
            resecom.setText("3500");
            respapa.setText("500");
        }
        if("C25".equals(valorresistenciamadeira)&& selco.isSelected()){
            resmad1 = 25;
            resfc0k.setText("25");
            jLabel26.setText("5");
            resecom.setText("8500");
            respapa.setText("550");}
        if("C30".equals(valorresistenciamadeira)&& selco.isSelected()){
            resmad1 = 30;
            resfc0k.setText("30");
            jLabel26.setText("6");
            resecom.setText("3500");
            respapa.setText("600");
        }
        /*Valor das resistências e caracterisitcas das dicotiledoneas*/
        if("C20".equals(valorresistenciamadeira)&& seldico.isSelected()){
            resmad1 = 20;
            resfc0k.setText("20");
            jLabel26.setText("4");
            resecom.setText("9500");
            respapa.setText("650");
        }
        if("C30".equals(valorresistenciamadeira)&& seldico.isSelected()){
            resmad1 = 30;
            resfc0k.setText("30");
            jLabel26.setText("5");
            resecom.setText("14500");
            respapa.setText("800");
        }
        if("C40".equals(valorresistenciamadeira)&& seldico.isSelected()){
            resmad1 = 40;
            resfc0k.setText("40");
            jLabel26.setText("6");
            resecom.setText("19500");
            respapa.setText("950");
        }
        if("C60".equals(valorresistenciamadeira)&& seldico.isSelected()){
            resmad1 = 60;
            resfc0k.setText("60");
            jLabel26.setText("8");
            resecom.setText("24500");
            respapa.setText("1000");
        }
        /*tamanho da madeira*/
        DecimalFormat fe = new DecimalFormat("0.00");
       

        /*Valor dos kmod1 e kmod2 e kmod3 do elemento de madeira 1*/
        String kmods = jComboBox10.getSelectedItem().toString();
        String km = jComboBox9.getSelectedItem().toString();
        double kmod1mad1 = 0;

        /*Longa duração para kmod1 da madeira 1*/
        if(("Permanente".equals(kmods)&& "Madeira Serrada".equals(km))){
            kmod1mad1 = 0.60;
        }
        if(("Permanente".equals(kmods)&& "Madeira Laminada Colada".equals(km))){
            kmod1mad1 = 0.60;
        }
        if(("Permanente".equals(kmods)&& "Madeira Compensada".equals(km))){
            kmod1mad1 = 0.60;
        }
        if(("Permanente".equals(kmods)&& "Madeira Recomposta".equals(km))){
            kmod1mad1 = 0.30;
        }
        /*Longa duração para kmod1 da madeira 1*/
        if("Longa Duração".equals(kmods)&& "Madeira Serrada".equals(km)){
            kmod1mad1 = 0.70;
        }
        if(("Longa Duração".equals(kmods)&& "Madeira Laminada Colada".equals(km))){
            kmod1mad1 = 0.70;
        }
        if(("Longa Duração".equals(kmods)&& "Madeira Compensada".equals(km))){
            kmod1mad1 = 0.70;}

        if("Longa Duração".equals(kmods)&& "Madeira Recomposta".equals(km)){
            kmod1mad1 = 0.45;
        }
        /*Média duração para kmod1 da madeira 1*/
        if("Média duração".equals(kmods)&& "Madeira Serrada".equals(km)){
            kmod1mad1 = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Laminada Colada".equals(km)){
            kmod1mad1 = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Compensada".equals(km)){
            kmod1mad1 = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Recomposta".equals(km)){
            kmod1mad1 = 0.80;
        }
        /*Curta duração para kmod1 da madeira 1*/
        if("Curta Duração".equals(kmods)&& "Madeira Serrada".equals(km)){
            kmod1mad1 = 0.90;
        }
        if("Curta Duração".equals(kmods)&& "Madeira Laminada Colada".equals(km)){
            kmod1mad1 = 0.90;
        }
        if("Curta Duração".equals(kmods)&& "Madeira Compensada".equals(km)){
            kmod1mad1 = 0.90;
        }
        if("Curta Duração".equals(kmods)&& "Madeira Recomposta".equals(km)){
            kmod1mad1 = 0.90;
        }
        /*Instantanea duração para kmod1 da madeira 1*/
        if("Instantânea".equals(kmods)&& "Madeira Serrada".equals(km)){
            kmod1mad1 = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Laminada Colada".equals(km)){
            kmod1mad1 = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Compensada".equals(km)){
            kmod1mad1 = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Recomposta".equals(km)){
            kmod1mad1 = 1.10;
        }
        /*kmod 2 da madeira 1*/

        String kmod2 = jComboBox13.getSelectedItem().toString();
        String km2 = jComboBox9.getSelectedItem().toString();
        double kmod2mad1 = 0;

        /*Classe de umidade 1 do kmod2 da madeira 1*/
        if("1".equals(kmod2)){
            kmod2mad1 = 1;
        }
        /*Classe de umidade 2 do kmod2 da madeira 2*/
        if("2".equals(kmod2)){
            kmod2mad1 = 1;
        }

        /*Classe de umidade da 3  kmod2 da madeira 1*/
        if("3".equals(kmod2)&& "Madeira Serrada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("3".equals(kmod2)&& "Madeira Laminada Colada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("3".equals(kmod2)&& "Madeira Compensada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("3".equals(kmod2)&& "Madeira Recomposta".equals(km2)){
            kmod2mad1 = 0.9;
        }
        /*Classe de umidade 2 para kmod2 da madeira 1*/
        if("4".equals(kmod2)&& "Madeira Serrada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("4".equals(kmod2)&& "Madeira Laminada Colada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("4".equals(kmod2)&& "Madeira Compensada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("4".equals(kmod2)&& "Madeira Recomposta".equals(km2)){
            kmod2mad1 = 0.9;
        }
        /*Kmod 3 da madeira 1*/
        String kmod36s2 = jComboBox15.getSelectedItem().toString();
        double kmod3mad1 = 0;
        if("1".equals(kmod36s2)){
            kmod3mad1 = 1;
        }
        if("2".equals(kmod36s2)){
            kmod3mad1 = 0.80;
        }

        /*Cálculo do kmod final é do elemento 1*/
        double kmodfinalmad1;
        kmodfinalmad1 = kmod1mad1*kmod2mad1*kmod3mad1;
        String kmod1certo = (String.format(fe.format(kmod1mad1)));
        String kmod2certo = (String.format(fe.format(kmod2mad1)));
        String kmod3certo = (String.format(fe.format(kmod3mad1)));     
        
        /*espessura da madeira principal*/
        String t2damadeira = jTextField4.getText();
        double t2n1 = Double.parseDouble(t2damadeira);
        double t2n = t2n1/2;
        
        /*Cálculo dos pregos*/
        /*escolha do prego*/
        String diametrofdfd = diametroprego.getText();
        double diametrodoprego = Double.parseDouble(diametrofdfd);
        diametfd.setText(diametrofdfd);
        double alfaeprego = 0;
        alfaeprego = 2.5;
        double diametropara = diametrodoprego/10;
        afc.setText(String.valueOf(alfaeprego));
        /*Cálculo da resistência da madeira principal1*/
        /*Resistência de cálculo da madeira 0*/
        double fc0dmad1 = (kmodfinalmad1*(resmad1/(1.4)))/10;
        String fc0dmad1certo = (String.format(fe.format(fc0dmad1)));
        
        /*Resistência de cálculo da madeira 90*/
        double fc90dmad1 = (kmodfinalmad1*((resmad1*0.25)/(1.4)))/10;
        /*Resistência embutimento da madeira*/
        double fe0dmad1 = fc0dmad1;
        jLabel68.setText(String.format(fe.format(fe0dmad1)));
        double fe90dmad1 = fc0dmad1*0.25*alfaeprego;
        jLabel69.setText(String.format(fe.format(fe90dmad1)));
        /*Resistência de cálculo da madeira no ângulo escolhido*/
        String valordoangulo = jTextField5.getText();
        double valordoangulo1 = Double.parseDouble(valordoangulo);
        double valordoangulo2 = Math.toRadians(valordoangulo1);
        double resultadodif = (fe0dmad1*fe90dmad1)/((fe0dmad1*(Math.sin(valordoangulo2))*(Math.sin(valordoangulo2)))+(fe90dmad1*(Math.cos(valordoangulo2))*(Math.cos(valordoangulo2))));
        resistembut.setText(String.format(fe.format(resultadodif)));
        /*cálculo dos betas*/
        
        double betcalc;
        double betlimitecalc;
        betcalc = (t2n/diametropara);
        jLabel70.setText(String.format(fe.format(betcalc)));
        betlimitecalc = (1.25*Math.sqrt((60/1.1)/resultadodif));
        jLabel71.setText(String.format(fe.format(betlimitecalc)));
        
        /*Cálculo da resistÊncia do pinos*/
        double resistpinomadeiraprin1 = 0;
        double resistpinomadeiraprin2 = 0;
        double resistênciachapamadeira = 0;
        double resistênciaprincipal = 0;
        double numeparafu;
        resistpinomadeiraprin1 = 0.625*((diametropara*diametropara)/betlimitecalc)*(60/1.1);
        resistpinomadeiraprin2 = 0.40*((t2n*t2n)/betcalc)*resultadodif;
        if(betcalc>betlimitecalc){
            resistênciaprincipal = resistpinomadeiraprin1;
            jLabel49.setText("Beta > Betalimite");
            jLabel72.setText(String.format(fe.format(resistpinomadeiraprin1)));
        }
        if(betcalc<betlimitecalc){
            resistênciaprincipal = resistpinomadeiraprin2;
            jLabel49.setText("Beta < Betalimite");
            jLabel72.setText(String.format(fe.format(resistpinomadeiraprin2)));
        }
        jLabel57.setText(String.format(fe.format(resistênciaprincipal)));
        
        double resistenciachapamadeira;
        double resistenciachapametalica;
        double resistpino = 0;
        
        if(jRadioButton2.isSelected()){
         /*Propriedades da MAdeira da Chapa*/
        /*Dados iniciais do primeiro elemento de ligação */
        /*Valor das resistências e caracterisitcas das coníferas*/
        String valorresistenciamadeira1 = null;
        double resmad1chapa = 0;
        double rescischapa = 4;
        if(selco1.isSelected()){
             valorresistenciamadeira1 = jComboBox3.getSelectedItem().toString();
             
        }
        if(seldico1.isSelected()){
             valorresistenciamadeira1 = jComboBox4.getSelectedItem().toString();
        }
        /*se as duas nao estiverem marcadas*/
        if ((selco1.isSelected() == false && seldico1.isSelected()== false)){}
        if("C20".equals(valorresistenciamadeira1)&& selco1.isSelected()){
            resmad1chapa = 20;
            rescischapa = 4;
  
        }
        if("C25".equals(valorresistenciamadeira1)&& selco1.isSelected()){
            resmad1chapa = 25;
            rescischapa = 5;
        }
        if("C30".equals(valorresistenciamadeira1)&& selco1.isSelected()){
            resmad1chapa = 30;
            rescischapa = 6;
    
        }
        /*Valor das resistências e caracterisitcas das dicotiledoneas*/
        if("C20".equals(valorresistenciamadeira1)&& seldico1.isSelected()){
            resmad1chapa = 20;
            rescischapa = 4;
     
        }
        if("C30".equals(valorresistenciamadeira1)&& seldico1.isSelected()){
            resmad1chapa = 30;
            rescischapa = 5;
       
        }
        if("C40".equals(valorresistenciamadeira1)&& seldico1.isSelected()){
            resmad1chapa = 40;
            rescischapa = 6;
         
        }
        if("C60".equals(valorresistenciamadeira1)&& seldico1.isSelected()){
            resmad1chapa = 60;
            rescischapa = 8;

        }
        /*tamanho da madeira*/
        String tespessurachapa = jTextField9.getText();
        double t1n = Double.parseDouble(tespessurachapa);
      
     
        /*Valor dos kmod1 e kmod2 e kmod3 do elemento de madeira 1*/
        String kmods1 = jComboBox10.getSelectedItem().toString();
        String km1 = jComboBox12.getSelectedItem().toString();
        double kmod1mad1chapa = 0;

        /*Longa duração para kmod1 da madeira 1*/
        if(("Permanente".equals(kmods1)&& "Madeira Serrada".equals(km1))){
            kmod1mad1chapa = 0.60;
        }
        if(("Permanente".equals(kmods1)&& "Madeira Laminada Colada".equals(km1))){
            kmod1mad1chapa = 0.60;
        }
        if(("Permanente".equals(kmods1)&& "Madeira Compensada".equals(km1))){
            kmod1mad1chapa = 0.60;
        }
        if(("Permanente".equals(kmods1)&& "Madeira Recomposta".equals(km1))){
            kmod1mad1chapa = 0.30;
        }
        /*Longa duração para kmod1 da madeira 1*/
        if("Longa Duração".equals(kmods1)&& "Madeira Serrada".equals(km1)){
            kmod1mad1chapa = 0.70;
        }
        if(("Longa Duração".equals(kmods1)&& "Madeira Laminada Colada".equals(km1))){
            kmod1mad1chapa = 0.70;
        }
        if(("Longa Duração".equals(kmods)&& "Madeira Compensada".equals(km1))){
            kmod1mad1chapa = 0.70;}

        if("Longa Duração".equals(kmods)&& "Madeira Recomposta".equals(km1)){
            kmod1mad1chapa = 0.45;
        }
        /*Média duração para kmod1 da madeira 1*/
        if("Média duração".equals(kmods)&& "Madeira Serrada".equals(km1)){
            kmod1mad1chapa = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Laminada Colada".equals(km1)){
            kmod1mad1chapa = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Compensada".equals(km1)){
            kmod1mad1chapa = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Recomposta".equals(km1)){
            kmod1mad1chapa = 0.80;
        }
        /*Curta duração para kmod1 da madeira 1*/
        if("Curta Duração".equals(kmods)&& "Madeira Serrada".equals(km1)){
            kmod1mad1chapa = 0.90;
        }
        if("Curta Duração".equals(kmods)&& "Madeira Laminada Colada".equals(km1)){
            kmod1mad1chapa = 0.90;
        }
        if("Curta Duração".equals(kmods)&& "Madeira Compensada".equals(km1)){
            kmod1mad1chapa = 0.90;
        }
        if("Curta Duração".equals(kmods)&& "Madeira Recomposta".equals(km1)){
            kmod1mad1chapa = 0.90;
        }
        /*Instantanea duração para kmod1 da madeira 1*/
        if("Instantânea".equals(kmods)&& "Madeira Serrada".equals(km1)){
            kmod1mad1chapa = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Laminada Colada".equals(km1)){
            kmod1mad1chapa = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Compensada".equals(km1)){
            kmod1mad1chapa = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Recomposta".equals(km1)){
            kmod1mad1chapa = 1.10;
        }
        /*kmod 2 da madeira 1*/

        String kmod21 = jComboBox14.getSelectedItem().toString();
        String km21 = jComboBox12.getSelectedItem().toString();
        double kmod2mad1chapa = 0;

        /*Classe de umidade 1 do kmod2 da madeira 1*/
        if("1".equals(kmod21)){
            kmod2mad1chapa = 1;
        }
        /*Classe de umidade 2 do kmod2 da madeira 2*/
        if("2".equals(kmod21)){
            kmod2mad1chapa = 1;
        }

        /*Classe de umidade da 3  kmod2 da madeira 1*/
        if("3".equals(kmod21)&& "Madeira Serrada".equals(km21)){
            kmod2mad1chapa = 0.8;
        }
        if("3".equals(kmod21)&& "Madeira Laminada Colada".equals(km21)){
            kmod2mad1chapa = 0.8;
        }
        if("3".equals(kmod21)&& "Madeira Compensada".equals(km21)){
            kmod2mad1chapa = 0.8;
        }
        if("3".equals(kmod21)&& "Madeira Recomposta".equals(km21)){
            kmod2mad1chapa = 0.9;
        }
        /*Classe de umidade 2 para kmod2 da madeira 1*/
        if("4".equals(kmod21)&& "Madeira Serrada".equals(km21)){
            kmod2mad1chapa = 0.8;
        }
        if("4".equals(kmod21)&& "Madeira Laminada Colada".equals(km21)){
            kmod2mad1chapa = 0.8;
        }
        if("4".equals(kmod21)&& "Madeira Compensada".equals(km21)){
            kmod2mad1chapa = 0.8;
        }
        if("4".equals(kmod21)&& "Madeira Recomposta".equals(km21)){
            kmod2mad1chapa = 0.9;
        }
        /*Kmod 3 da madeira 1*/
        String kmod36s21 = jComboBox16.getSelectedItem().toString();
        double kmod3mad1chapa = 0;
        if("1".equals(kmod36s21)){
            kmod3mad1chapa = 1;
        }
        if("2".equals(kmod36s2)){
            kmod3mad1chapa = 0.80;
        }

        /*Cálculo do kmod final é do elemento 1*/
        double kmodfinalmad1chapa;
        kmodfinalmad1chapa = kmod1mad1chapa*kmod2mad1chapa*kmod3mad1chapa;
        String kmod1certochapa = (String.format(fe.format(kmod1mad1chapa)));
        String kmod2certochapa = (String.format(fe.format(kmod2mad1chapa)));
        String kmod3certochapa = (String.format(fe.format(kmod3mad1chapa)));
        jLabel39.setText(String.format(fe.format(kmodfinalmad1chapa)));
        
        /*resistência de pinos para a chapa de madeira*/
        double fc0dmad1chapa = (kmodfinalmad1chapa*(resmad1chapa/(1.4)))/10;
        double fc90dmad1chapa = (kmodfinalmad1chapa*((resmad1chapa*0.25)/(1.4)))/10;
        
        /*resistência de embutimento para a chapa de madeira*/
        double fe0dmad1chapa = fc0dmad1chapa;
        jLabel73.setText(String.format(fe.format(fe0dmad1chapa)));
        double fe90dmad1chapa = 0.25*fc0dmad1chapa*alfaeprego;
        jLabel74.setText(String.format(fe.format(fe90dmad1chapa)));
        double fedifmad1chapa = (fe0dmad1chapa*fe90dmad1chapa)/((fe0dmad1chapa*(Math.sin(valordoangulo2))*(Math.sin(valordoangulo2)))+(fe90dmad1chapa*(Math.cos(valordoangulo2))*(Math.cos(valordoangulo2))));
        jLabel64.setText(String.format(fe.format(fedifmad1chapa)));
        
        /*cálculo dos betas*/
        double betcalcchapa = (t1n/diametropara);
        jLabel75.setText(String.format(fe.format(betcalcchapa)));
        double betlimitecalcchapa = (1.25*Math.sqrt((60/1.1)/fedifmad1chapa));
        jLabel76.setText(String.format(fe.format(betlimitecalcchapa)));
        
        /*Cálculo da resistÊncia do pinos*/
        
        double resistpinochapamad1 = resistpinochapamad1 = 0.625*((diametropara*diametropara)/betlimitecalcchapa)*(60/1.1);;
        double resistpinochapamad2 = resistpinochapamad2 = 0.40*((t1n*t1n)/betcalcchapa)*fedifmad1chapa;
        double resistpinochapamadeira = 0;
        
        if(betcalcchapa>betlimitecalcchapa){
            resistpinochapamadeira = resistpinochapamad1;
            jLabel78.setText("Beta > Betalimite");
            jLabel77.setText(String.format(fe.format(resistpinochapamad1)));
        }
        if(betcalcchapa<betlimitecalcchapa){
            resistpinochapamadeira = resistpinochapamad2;
            jLabel78.setText("Beta < Betalimite");
            jLabel77.setText(String.format(fe.format(resistpinochapamad2)));
        }
        jLabel60.setText(String.format(fe.format(resistpinochapamadeira)));
        resistpino = Math.min(resistpinochapamadeira,resistênciaprincipal);
            
        }
        fr.setText(frdrecebido.getText());
        double Frd = Double.parseDouble(jLabel31.getText());
        
        /*Cálculo número de pinos*/
        numeparafu = (Frd/(resistpino*2));
        int numeparafu1 = (int)Math.ceil(numeparafu);
        String nus = String.valueOf(numeparafu1);
        jLabel59.setText(nus);
        
    }//GEN-LAST:event_jLabel17MouseClicked

    private void jLabel19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseClicked
        /*Resistência da Madeira Propria*/
        /*Dados iniciais do primeiro elemento de ligação */
        /*Valor das resistências e caracterisitcas das coníferas*/
        String valorresistenciamadeira = null;
        double resmad1 = 0;
        if(selco.isSelected()){
             valorresistenciamadeira = jComboBox2.getSelectedItem().toString();
             
        }
        if(seldico.isSelected()){
             valorresistenciamadeira = jComboBox1.getSelectedItem().toString();
        }
        /*se as duas nao estiverem marcadas*/
        if ((selco.isSelected() == false && seldico.isSelected()== false)){}
        if("C20".equals(valorresistenciamadeira)&& selco.isSelected()){
            resmad1 = 20;
            resfc0k.setText("20");
            jLabel26.setText("4");
            resecom.setText("3500");
            respapa.setText("500");
        }
        if("C25".equals(valorresistenciamadeira)&& selco.isSelected()){
            resmad1 = 25;
            resfc0k.setText("25");
            jLabel26.setText("5");
            resecom.setText("8500");
            respapa.setText("550");}
        if("C30".equals(valorresistenciamadeira)&& selco.isSelected()){
            resmad1 = 30;
            resfc0k.setText("30");
            jLabel26.setText("6");
            resecom.setText("3500");
            respapa.setText("600");
        }
        /*Valor das resistências e caracterisitcas das dicotiledoneas*/
        if("C20".equals(valorresistenciamadeira)&& seldico.isSelected()){
            resmad1 = 20;
            resfc0k.setText("20");
            jLabel26.setText("4");
            resecom.setText("9500");
            respapa.setText("650");
        }
        if("C30".equals(valorresistenciamadeira)&& seldico.isSelected()){
            resmad1 = 30;
            resfc0k.setText("30");
            jLabel26.setText("5");
            resecom.setText("14500");
            respapa.setText("800");
        }
        if("C40".equals(valorresistenciamadeira)&& seldico.isSelected()){
            resmad1 = 40;
            resfc0k.setText("40");
            jLabel26.setText("6");
            resecom.setText("19500");
            respapa.setText("950");
        }
        if("C60".equals(valorresistenciamadeira)&& seldico.isSelected()){
            resmad1 = 60;
            resfc0k.setText("60");
            jLabel26.setText("8");
            resecom.setText("24500");
            respapa.setText("1000");
        }
        /*tamanho da madeira*/
        DecimalFormat fe = new DecimalFormat("0.00");
        
        /*Valor dos kmod1 e kmod2 e kmod3 do elemento de madeira 1*/
        String kmods = jComboBox10.getSelectedItem().toString();
        String km = jComboBox9.getSelectedItem().toString();
        double kmod1mad1 = 0;

        /*Longa duração para kmod1 da madeira 1*/
        if(("Permanente".equals(kmods)&& "Madeira Serrada".equals(km))){
            kmod1mad1 = 0.60;
        }
        if(("Permanente".equals(kmods)&& "Madeira Laminada Colada".equals(km))){
            kmod1mad1 = 0.60;
        }
        if(("Permanente".equals(kmods)&& "Madeira Compensada".equals(km))){
            kmod1mad1 = 0.60;
        }
        if(("Permanente".equals(kmods)&& "Madeira Recomposta".equals(km))){
            kmod1mad1 = 0.30;
        }
        /*Longa duração para kmod1 da madeira 1*/
        if("Longa Duração".equals(kmods)&& "Madeira Serrada".equals(km)){
            kmod1mad1 = 0.70;
        }
        if(("Longa Duração".equals(kmods)&& "Madeira Laminada Colada".equals(km))){
            kmod1mad1 = 0.70;
        }
        if(("Longa Duração".equals(kmods)&& "Madeira Compensada".equals(km))){
            kmod1mad1 = 0.70;}

        if("Longa Duração".equals(kmods)&& "Madeira Recomposta".equals(km)){
            kmod1mad1 = 0.45;
        }
        /*Média duração para kmod1 da madeira 1*/
        if("Média duração".equals(kmods)&& "Madeira Serrada".equals(km)){
            kmod1mad1 = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Laminada Colada".equals(km)){
            kmod1mad1 = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Compensada".equals(km)){
            kmod1mad1 = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Recomposta".equals(km)){
            kmod1mad1 = 0.80;
        }
        /*Curta duração para kmod1 da madeira 1*/
        if("Curta Duração".equals(kmods)&& "Madeira Serrada".equals(km)){
            kmod1mad1 = 0.90;
        }
        if("Curta Duração".equals(kmods)&& "Madeira Laminada Colada".equals(km)){
            kmod1mad1 = 0.90;
        }
        if("Curta Duração".equals(kmods)&& "Madeira Compensada".equals(km)){
            kmod1mad1 = 0.90;
        }
        if("Curta Duração".equals(kmods)&& "Madeira Recomposta".equals(km)){
            kmod1mad1 = 0.90;
        }
        /*Instantanea duração para kmod1 da madeira 1*/
        if("Instantânea".equals(kmods)&& "Madeira Serrada".equals(km)){
            kmod1mad1 = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Laminada Colada".equals(km)){
            kmod1mad1 = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Compensada".equals(km)){
            kmod1mad1 = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Recomposta".equals(km)){
            kmod1mad1 = 1.10;
        }
        /*kmod 2 da madeira 1*/

        String kmod2 = jComboBox13.getSelectedItem().toString();
        String km2 = jComboBox9.getSelectedItem().toString();
        double kmod2mad1 = 0;

        /*Classe de umidade 1 do kmod2 da madeira 1*/
        if("1".equals(kmod2)){
            kmod2mad1 = 1;
        }
        /*Classe de umidade 2 do kmod2 da madeira 2*/
        if("2".equals(kmod2)){
            kmod2mad1 = 1;
        }

        /*Classe de umidade da 3  kmod2 da madeira 1*/
        if("3".equals(kmod2)&& "Madeira Serrada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("3".equals(kmod2)&& "Madeira Laminada Colada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("3".equals(kmod2)&& "Madeira Compensada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("3".equals(kmod2)&& "Madeira Recomposta".equals(km2)){
            kmod2mad1 = 0.9;
        }
        /*Classe de umidade 2 para kmod2 da madeira 1*/
        if("4".equals(kmod2)&& "Madeira Serrada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("4".equals(kmod2)&& "Madeira Laminada Colada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("4".equals(kmod2)&& "Madeira Compensada".equals(km2)){
            kmod2mad1 = 0.8;
        }
        if("4".equals(kmod2)&& "Madeira Recomposta".equals(km2)){
            kmod2mad1 = 0.9;
        }
        /*Kmod 3 da madeira 1*/
        String kmod36s2 = jComboBox15.getSelectedItem().toString();
        double kmod3mad1 = 0;
        if("1".equals(kmod36s2)){
            kmod3mad1 = 1;
        }
        if("2".equals(kmod36s2)){
            kmod3mad1 = 0.80;
        }

        /*Cálculo do kmod final é do elemento 1*/
        double kmodfinalmad1;
        kmodfinalmad1 = kmod1mad1*kmod2mad1*kmod3mad1;
        String kmod1certo = (String.format(fe.format(kmod1mad1)));
        String kmod2certo = (String.format(fe.format(kmod2mad1)));
        String kmod3certo = (String.format(fe.format(kmod3mad1)));
        jLabel32.setText(String.format(fe.format(kmodfinalmad1)));
        
        /*espessura da madeira principal*/
        String t2damadeira = jTextField4.getText();
        double t2n1 = Double.parseDouble(t2damadeira);
        double t2n = t2n1/2;
        
        jLabel63.setText(jTextField5.getText());
        jLabel58.setText(jTextField5.getText());
        
        /*Cálculo dos betas do parafuso*/
        /*escolha do parafuso*/
        String escopara1 = escopara.getSelectedItem().toString();
        diam1.setText(escopara.getSelectedItem().toString());
        double diametropara= 10;
        if("0.95".equals(escopara1)){
            diametropara = 0.95;
        }
        if("1.25".equals(escopara1)){
            diametropara = 1.25;
        }
        if("1.60".equals(escopara1)){
            diametropara = 1.60;
        }
        if("1.90".equals(escopara1)){
            diametropara = 1.90;
        }
        if("2.20".equals(escopara1)){
            diametropara = 2.20;
        }
        if("2.50".equals(escopara1)){
            diametropara = 2.50;
        }
        if("3.10".equals(escopara1)){
            diametropara = 3.10;
        }
        if("3.80".equals(escopara1)){
            diametropara = 3.80;
        }
       
        double resultcal190;
        double resultcal10;
        double alfae = 0;
        if(diametropara==0.9525){
            alfae = 1.95;
        }
        if(diametropara==1.25){
            alfae = 1.68;
        }
        if(diametropara==1.60){
            alfae = 1.52;
        }
        if(diametropara==1.90){
            alfae = 1.41;
        }
        if(diametropara==2.20){
            alfae = 1.33;
        }
        if(diametropara==2.50){
            alfae = 1.27;
        }
        if(diametropara==3.10){
            alfae = 1.19;
        }
        if(diametropara==3.80){
            alfae = 1.14;
        }
        /*Cálculo da resistência da madeira principal1*/
        /*Resistência de cálculo da madeira 0*/
        alfaetext1.setText(String.valueOf(alfae));
        double fc0dmad1 = ((kmodfinalmad1*resmad1)/1.4)/10;
        jLabel38.setText(String.valueOf(fc0dmad1));
        jLabel33.setText(String.format(fe.format(fc0dmad1)));
        resultcal10 = fc0dmad1;
        /*Resistência de cálculo da madeira 90*/
        double fc90dmad1 = (kmodfinalmad1*((resmad1*0.25)/(1.4)))/10;
        /*Resistência de cálculo da madeira no ângulo escolhido*/
        double fec0d = fc0dmad1;
        jLabel68.setText(String.format(fe.format(fec0d)));
        double fec90d = fc0dmad1*0.25*alfae;
        jLabel69.setText(String.format(fe.format(fec90d)));
        String valordoangulo = jTextField5.getText();
        double valordoangulo1 = Double.parseDouble(valordoangulo);
        double valordoangulo2 = Math.toRadians(valordoangulo1);
        double resultadodif = (fec0d*fec90d)/((fec0d*(Math.sin(valordoangulo2))*(Math.sin(valordoangulo2)))+(fec90d*(Math.cos(valordoangulo2))*(Math.cos(valordoangulo2))));
        resutembut1.setText(String.format(fe.format(resultadodif)));
        /*cálculo dos betas*/
        double betcalc;
        double betlimitecalc;
        betcalc = (t2n/diametropara);
        jLabel70.setText(String.format(fe.format(betcalc)));
        betlimitecalc = (1.25*Math.sqrt((25/1.1)/resultadodif));
        jLabel71.setText(String.format(fe.format(betlimitecalc)));
        /*Cálculo da resistÊncia do pinos*/
        double resistpinomadeiraprin1 = 0;
        double resistpinomadeiraprin2 = 0;
        double numeparafu;
        double resistênciaprincipal = 0;
        resistpinomadeiraprin1 = 0.625*((diametropara*diametropara)/betlimitecalc)*(25/1.1);
        resistpinomadeiraprin2 = 0.40*((t2n*t2n)/betcalc)*resultadodif;
        if(betcalc>betlimitecalc){
            resistênciaprincipal = resistpinomadeiraprin1;
            jLabel72.setText(String.format(fe.format(resistpinomadeiraprin1)));
            jLabel49.setText("Beta < Betalimite");
        }
        if(betcalc<betlimitecalc){
            resistênciaprincipal = resistpinomadeiraprin2;
            jLabel72.setText(String.format(fe.format(resistpinomadeiraprin2)));
            jLabel49.setText("Beta < Betalimite");
        }
        jlabelre1.setText(String.format(fe.format(resistênciaprincipal)));
        
        double resistenciachapametalica;
        double resistpino = 0;
        if(jRadioButton2.isSelected()){
         
            /*Propriedades da MAdeira da Chapa*/
        /*Dados iniciais do primeiro elemento de ligação */
        /*Valor das resistências e caracterisitcas das coníferas*/
        String valorresistenciamadeira1 = null;
        double resmad1chapa = 0;
        double rescischapa = 4;
        if(selco1.isSelected()){
             valorresistenciamadeira1 = jComboBox3.getSelectedItem().toString();
             
        }
        if(seldico1.isSelected()){
             valorresistenciamadeira1 = jComboBox4.getSelectedItem().toString();
        }
        /*se as duas nao estiverem marcadas*/
        if ((selco1.isSelected() == false && seldico1.isSelected()== false)){}
        if("C20".equals(valorresistenciamadeira1)&& selco1.isSelected()){
            resmad1chapa = 20;
            rescischapa = 4;
  
        }
        if("C25".equals(valorresistenciamadeira1)&& selco1.isSelected()){
            resmad1chapa = 25;
            rescischapa = 5;
        }
        if("C30".equals(valorresistenciamadeira1)&& selco1.isSelected()){
            resmad1chapa = 30;
            rescischapa = 6;
    
        }
        /*Valor das resistências e caracterisitcas das dicotiledoneas*/
        if("C20".equals(valorresistenciamadeira1)&& seldico1.isSelected()){
            resmad1chapa = 20;
            rescischapa = 4;
     
        }
        if("C30".equals(valorresistenciamadeira1)&& seldico1.isSelected()){
            resmad1chapa = 30;
            rescischapa = 5;
       
        }
        if("C40".equals(valorresistenciamadeira1)&& seldico1.isSelected()){
            resmad1chapa = 40;
            rescischapa = 6;
         
        }
        if("C60".equals(valorresistenciamadeira1)&& seldico1.isSelected()){
            resmad1chapa = 60;
            rescischapa = 8;

        }
        /*tamanho da madeira*/
        String tespessurachapa = jTextField9.getText();
        double t1n = Double.parseDouble(tespessurachapa);
      
     
        /*Valor dos kmod1 e kmod2 e kmod3 do elemento de madeira 1*/
        String kmods1 = jComboBox10.getSelectedItem().toString();
        String km1 = jComboBox12.getSelectedItem().toString();
        double kmod1mad1chapa = 0;

        /*Longa duração para kmod1 da madeira 1*/
        if(("Permanente".equals(kmods1)&& "Madeira Serrada".equals(km1))){
            kmod1mad1chapa = 0.60;
        }
        if(("Permanente".equals(kmods1)&& "Madeira Laminada Colada".equals(km1))){
            kmod1mad1chapa = 0.60;
        }
        if(("Permanente".equals(kmods1)&& "Madeira Compensada".equals(km1))){
            kmod1mad1chapa = 0.60;
        }
        if(("Permanente".equals(kmods1)&& "Madeira Recomposta".equals(km1))){
            kmod1mad1chapa = 0.30;
        }
        /*Longa duração para kmod1 da madeira 1*/
        if("Longa Duração".equals(kmods1)&& "Madeira Serrada".equals(km1)){
            kmod1mad1chapa = 0.70;
        }
        if(("Longa Duração".equals(kmods1)&& "Madeira Laminada Colada".equals(km1))){
            kmod1mad1chapa = 0.70;
        }
        if(("Longa Duração".equals(kmods)&& "Madeira Compensada".equals(km1))){
            kmod1mad1chapa = 0.70;}

        if("Longa Duração".equals(kmods)&& "Madeira Recomposta".equals(km1)){
            kmod1mad1chapa = 0.45;
        }
        /*Média duração para kmod1 da madeira 1*/
        if("Média duração".equals(kmods)&& "Madeira Serrada".equals(km1)){
            kmod1mad1chapa = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Laminada Colada".equals(km1)){
            kmod1mad1chapa = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Compensada".equals(km1)){
            kmod1mad1chapa = 0.80;
        }
        if("Média duração".equals(kmods)&& "Madeira Recomposta".equals(km1)){
            kmod1mad1chapa = 0.80;
        }
        /*Curta duração para kmod1 da madeira 1*/
        if("Curta Duração".equals(kmods)&& "Madeira Serrada".equals(km1)){
            kmod1mad1chapa = 0.90;
        }
        if("Curta Duração".equals(kmods)&& "Madeira Laminada Colada".equals(km1)){
            kmod1mad1chapa = 0.90;
        }
        if("Curta Duração".equals(kmods)&& "Madeira Compensada".equals(km1)){
            kmod1mad1chapa = 0.90;
        }
        if("Curta Duração".equals(kmods)&& "Madeira Recomposta".equals(km1)){
            kmod1mad1chapa = 0.90;
        }
        /*Instantanea duração para kmod1 da madeira 1*/
        if("Instantânea".equals(kmods)&& "Madeira Serrada".equals(km1)){
            kmod1mad1chapa = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Laminada Colada".equals(km1)){
            kmod1mad1chapa = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Compensada".equals(km1)){
            kmod1mad1chapa = 1.10;
        }
        if("Instantânea".equals(kmods)&& "Madeira Recomposta".equals(km1)){
            kmod1mad1chapa = 1.10;
        }
        /*kmod 2 da madeira 1*/

        String kmod21 = jComboBox14.getSelectedItem().toString();
        String km21 = jComboBox12.getSelectedItem().toString();
        double kmod2mad1chapa = 0;

        /*Classe de umidade 1 do kmod2 da madeira 1*/
        if("1".equals(kmod21)){
            kmod2mad1chapa = 1;
        }
        /*Classe de umidade 2 do kmod2 da madeira 2*/
        if("2".equals(kmod21)){
            kmod2mad1chapa = 1;
        }

        /*Classe de umidade da 3  kmod2 da madeira 1*/
        if("3".equals(kmod21)&& "Madeira Serrada".equals(km21)){
            kmod2mad1chapa = 0.8;
        }
        if("3".equals(kmod21)&& "Madeira Laminada Colada".equals(km21)){
            kmod2mad1chapa = 0.8;
        }
        if("3".equals(kmod21)&& "Madeira Compensada".equals(km21)){
            kmod2mad1chapa = 0.8;
        }
        if("3".equals(kmod21)&& "Madeira Recomposta".equals(km21)){
            kmod2mad1chapa = 0.9;
        }
        /*Classe de umidade 2 para kmod2 da madeira 1*/
        if("4".equals(kmod21)&& "Madeira Serrada".equals(km21)){
            kmod2mad1chapa = 0.8;
        }
        if("4".equals(kmod21)&& "Madeira Laminada Colada".equals(km21)){
            kmod2mad1chapa = 0.8;
        }
        if("4".equals(kmod21)&& "Madeira Compensada".equals(km21)){
            kmod2mad1chapa = 0.8;
        }
        if("4".equals(kmod21)&& "Madeira Recomposta".equals(km21)){
            kmod2mad1chapa = 0.9;
        }
        /*Kmod 3 da madeira 1*/
        String kmod36s21 = jComboBox16.getSelectedItem().toString();
        double kmod3mad1chapa = 0;
        if("1".equals(kmod36s21)){
            kmod3mad1chapa = 1;
        }
        if("2".equals(kmod36s2)){
            kmod3mad1chapa = 0.80;
        }

        /*Cálculo do kmod final é do elemento 1*/
        double kmodfinalmad1chapa;
        kmodfinalmad1chapa = kmod1mad1chapa*kmod2mad1chapa*kmod3mad1chapa;
        String kmod1certochapa = (String.format(fe.format(kmod1mad1chapa)));
        String kmod2certochapa = (String.format(fe.format(kmod2mad1chapa)));
        String kmod3certochapa = (String.format(fe.format(kmod3mad1chapa)));
        jLabel39.setText(String.valueOf(kmodfinalmad1chapa));
        /*resistência de pinos para a chapa de madeira*/
        double fc0dmad1chapa = (kmodfinalmad1chapa*(resmad1chapa/(1.4)))/10;
        double fc90dmad1chapa = (kmodfinalmad1chapa*((resmad1chapa*0.25)/(1.4)))/10;
        
        /*resistência de embutimento*/
        double fec0dmad1chapa = fc0dmad1chapa;
        jLabel53.setText(String.format(fe.format(fec0dmad1chapa)));
        double fec90dmad1chapa = fc0dmad1chapa*0.25*alfae;
        jLabel54.setText(String.format(fe.format(fec90dmad1chapa)));
        double fecdifmad1chapa = (fec0dmad1chapa*fec90dmad1chapa)/((fec0dmad1chapa*(Math.sin(valordoangulo2))*(Math.sin(valordoangulo2)))+(fec90dmad1chapa*(Math.cos(valordoangulo2))*(Math.cos(valordoangulo2))));
        resutembut2.setText(String.format(fe.format(fecdifmad1chapa)));
        /*cálculo dos betas*/
        double betcalcchapa = (t1n/diametropara);
        jLabel55.setText(String.format(fe.format(betcalcchapa)));
        double betlimitecalcchapa = (1.25*Math.sqrt((25/1.1)/fecdifmad1chapa));
        jLabel56.setText(String.format(fe.format(betlimitecalcchapa)));
        /*Cálculo da resistÊncia do pinos*/
        
        double resistpinochapamad1 = 0;
        double resistpinochapamad2 = 0;
        double resistenciachapamadeira = 0;
        resistpinochapamad1 = 0.625*((diametropara*diametropara)/betlimitecalcchapa)*(25/1.1);
        resistpinochapamad2 = 0.40*((t1n*t1n)/betcalcchapa)*fecdifmad1chapa;
        if(betcalcchapa>betlimitecalcchapa){
            resistenciachapamadeira = resistpinochapamad1;
            jLabel65.setText("Beta > Betalimite");
            jLabel67.setText(String.format(fe.format(resistpinochapamad1)));
        }
        if(betcalcchapa<betlimitecalcchapa){
            resistenciachapamadeira = resistpinochapamad2;
            jLabel65.setText("Beta < Betalimite");
            jLabel67.setText(String.format(fe.format(resistpinochapamad2)));
        }
        jlabelre2.setText(String.format(fe.format(resistenciachapamadeira)));
        resistpino = Math.min(resistenciachapamadeira,resistênciaprincipal);
        }
        double Frd = Double.parseDouble(jLabel31.getText());
        forc.setText(frdrecebido.getText());
        /*Cálculo número de pinos*/
        numeparafu = (Frd/(resistpino*2));
        int numeparafu1 = (int)Math.ceil(numeparafu);
        String nus = String.valueOf(numeparafu1);
        numpara1.setText(nus);
    }//GEN-LAST:event_jLabel19MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Document documento = new Document();
        DecimalFormat fe = new DecimalFormat("0.00");
        try {
            PdfWriter.getInstance(documento,new FileOutputStream("Memorial de Cálculo Entalhe inclinado.pdf"));
            documento.open();
            documento.newPage();
            documento.setPageSize(PageSize.A4);

            documento.setMargins(85f, 85f, 85f, 85f);
            documento.addCreator("Matheus Felipe de Oliveira Lemos");
            documento.addTitle("Memorial de Cálculo");
            documento.addCreator("Matheus Felipe de Oliveira Lemos");
            documento.addLanguage("Português");
            documento.addKeywords("Ligações,Madeira,Resistência,Solicitação");
            Font f3 = new Font(Font.FontFamily.TIMES_ROMAN, 14f, Font.BOLD);
            Font f4 = new Font(Font.FontFamily.TIMES_ROMAN, 12f, Font.BOLD);
            f4.setColor(BaseColor.WHITE);
            Font f5 = new Font(Font.FontFamily.TIMES_ROMAN, 12f, Font.NORMAL);
            Font f6 = new Font(Font.FontFamily.TIMES_ROMAN, 12f, Font.BOLD);
            Font f8 = new Font(Font.FontFamily.HELVETICA, 12f, Font.NORMAL);
            Paragraph titulo = new Paragraph();
            /*Título principal */
            titulo.setFont(f3);
            titulo.setAlignment(Element.ALIGN_CENTER);
            titulo.add("Memorial de Cálculo Entalhe Inclinado\n");
            /*Parágrafo primeiro*/
            Paragraph parágrafo1= new Paragraph();
            parágrafo1.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo1.setFont(f6);
            parágrafo1.add("Características das Propriedades da Madeira (De acordo com a Norma NBR 7190/1997).");
            /*espaçamento 1*/
            Paragraph espaçamento1 = new Paragraph();
            for (int i = 0; i < 20; i++) {
                espaçamento1.add(new Chunk(" "));
            }
            /*espaçamento 2*/
            Paragraph espaçamento2 = new Paragraph();
            for (int i = 0; i < 20; i++) {
                espaçamento2.add(new Chunk(" "));
            }
            /*espaçamento 3*/
            Paragraph espaçamento3 = new Paragraph();
            for (int i = 0; i < 1500; i++) {
                espaçamento3.add(new Chunk(" "));
            }
            /*Tabela de Propriedades da Madeira*/
            PdfPTable table1 = new PdfPTable(2);
            /*construindo as celulas da tabela*/
            String categoria1 = "";
            if (seldico.isSelected()){
                categoria1 = "Dicotiledônea";
            }
            if(selco.isSelected()){
                categoria1 = "Conífera";
            }
            PdfPCell propriedad = new PdfPCell(new Phrase("Propriedade da Madeira",f4));
            propriedad.setHorizontalAlignment(Element.ALIGN_CENTER);
            propriedad.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell categoria = new PdfPCell(new Phrase(categoria1,f4));
            categoria.setHorizontalAlignment(Element.ALIGN_CENTER);
            categoria.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell classerist = new PdfPCell(new Phrase("Classe de Resistência",f5));
            PdfPCell classerist1 = new PdfPCell(new Phrase("C"+resfc0k.getText(),f5));
            classerist1.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell resistacom = new PdfPCell(new Phrase("Resistência Característica a Compressão Paralela as fibras.",f5));
            PdfPCell comprdf = new PdfPCell(new Phrase(resfc0k.getText()+" MPa",f5));
            comprdf.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell propriedad1 = new PdfPCell(new Phrase("Resistência Característica a Compressão Normal as fibras.",f5));
            PdfPCell dfdfdfd = new PdfPCell(new Phrase(jLabel21.getText()+" MPa",f5));
            dfdfdfd.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell propriedad2 = new PdfPCell(new Phrase("Resistência Característica ao Cisalhamento Paralelo as fibras",f5));
            PdfPCell propriedad3= new PdfPCell(new Phrase(jLabel26.getText()+" MPa",f5));
            propriedad3.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell celulaNome2 = new PdfPCell(new Phrase("Valor médio do módulo de elasticidade na compressão paralela às fibras",f5));
            PdfPCell celulaSexo2 = new PdfPCell(new Phrase(resecom.getText()+" MPa",f5));
            celulaSexo2 .setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell celulaSexo12 = new PdfPCell(new Phrase("Densidade básica",f5));
            PdfPCell celulaSexo121 = new PdfPCell(new Phrase(jLabel22.getText()+"MPa",f5));
            celulaSexo121.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell densidade1 = new PdfPCell(new Phrase("Densidade aparente",f5));
            PdfPCell densidade2 = new PdfPCell(new Phrase(respapa.getText()+" MPA",f5));
            densidade2.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell umidade = new PdfPCell(new Phrase("Umidade",f5));
            PdfPCell umidade2 = new PdfPCell(new Phrase("12%",f5));
            umidade2.setHorizontalAlignment(Element.ALIGN_CENTER);
            /*adicionando as celulas na tabela*/
            float columnWidth[]={300f,100f};
            table1.setTotalWidth(columnWidth);
            table1.addCell(propriedad);
            table1.addCell(categoria);
            table1.addCell(classerist);
            table1.addCell(classerist1);
            table1.addCell(resistacom );
            table1.addCell(comprdf);
            table1.addCell(propriedad1);
            table1.addCell(dfdfdfd);
            table1.addCell(propriedad2);
            table1.addCell(propriedad3);
            table1.addCell(celulaNome2);
            table1.addCell(celulaSexo2);
            table1.addCell(celulaSexo12);
            table1.addCell(celulaSexo121);
            table1.addCell(densidade1);
            table1.addCell(densidade2);
            table1.addCell(umidade);
            table1.addCell(umidade2);
            /*terminar a tabela*/

            /*segunda parte do memorial*/
            /*Parágrafo segundo*/
            Paragraph parágrafo2= new Paragraph();
            parágrafo2.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo2.setFont(f6);
            parágrafo2.add("Caracterização da Madeira e coeficiente de Modificação (De acordo com a Norma NBR 7190/1997).");
            /*construindo tabela 2*/

            /*Tabela de Propriedades da Madeira*/
            PdfPTable table2 = new PdfPTable(2);
            /*construindo as celulas da tabela*/

            /*primeira linha tabela 2*/
            PdfPCell Classecarre = new PdfPCell(new Phrase("Especificações para Modificação",f4));
            Classecarre.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell tipodemad = new PdfPCell(new Phrase("Madeira",f4));
            tipodemad.setBackgroundColor(new BaseColor(223,104,4));
            tipodemad.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*segunda linha tabela 2*/
            PdfPCell classecarre1 = new PdfPCell(new Phrase("Classe de Carregamento",f5));
            String classefdv = jComboBox10.getSelectedItem().toString();
            PdfPCell classerist12 = new PdfPCell(new Phrase(classefdv,f5));
            classerist12.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*terceira linha tabela 2*/
            PdfPCell resistacom2 = new PdfPCell(new Phrase("Tipo de Madeira",f5));
            String resistac = jComboBox9.getSelectedItem().toString();
            PdfPCell comprdf2 = new PdfPCell(new Phrase(resistac,f5));
            comprdf2.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quarta linha tabela 2*/
            PdfPCell propriedad12 = new PdfPCell(new Phrase("Categoria da Madeira",f5));
            String propd = jComboBox15.getSelectedItem().toString();
            PdfPCell dfdfdfd2 = new PdfPCell(new Phrase(propd,f5));
            dfdfdfd2.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quinta linha tabela 2*/
            PdfPCell propriedad22 = new PdfPCell(new Phrase("Classe de Umidade da Madeira",f5));
            String propd1 = jComboBox13.getSelectedItem().toString();
            PdfPCell propriedad32= new PdfPCell(new Phrase(propd1,f5));
            propriedad32.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*sexta linha tabela 2*/
            PdfPCell celulaNome22 = new PdfPCell(new Phrase("kmod1",f5));
            PdfPCell celulaSexo22 = new PdfPCell(new Phrase(resulkmod8.getText(),f5));
            celulaSexo22.setHorizontalAlignment(Element.ALIGN_CENTER);

            /* setima linha tabela 2*/
            PdfPCell celulaSexo122 = new PdfPCell(new Phrase("kmod2",f5));
            PdfPCell celulaSexo1212 = new PdfPCell(new Phrase(resulkmod9.getText(),f5));
            celulaSexo1212.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*oitava linha tabela 2*/
            PdfPCell densidade12 = new PdfPCell(new Phrase("kmod3",f5));
            PdfPCell densidade22 = new PdfPCell(new Phrase(resulkmod10.getText(),f5));
            densidade22.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*nona linha tabela 2*/
            PdfPCell umidade21 = new PdfPCell(new Phrase("kmod = kmod1*kmod2*kmod3",f5));
            PdfPCell umidade22 = new PdfPCell(new Phrase(resulkmod11.getText(),f5));
            umidade22.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*adicionando as celulas na tabela 2*/
            float columnWidth1[]={300f,100f};
            table2.setWidthPercentage(70);

            table2.addCell(Classecarre);
            table2.addCell(tipodemad);
            table2.addCell(classecarre1);
            table2.addCell(classerist12);
            table2.addCell(resistacom2);
            table2.addCell(comprdf2);
            table2.addCell(propriedad12);
            table2.addCell(dfdfdfd2);
            table2.addCell(propriedad22);
            table2.addCell(propriedad32);
            table2.addCell(celulaNome22);
            table2.addCell(celulaSexo22);
            table2.addCell(celulaSexo122);
            table2.addCell(celulaSexo1212);
            table2.addCell(densidade12);
            table2.addCell(densidade22);
            table2.addCell(umidade21);
            table2.addCell(umidade22);

            /*terceira parte do memorial*/
            /*Parágrafo terceira*/
            Paragraph parágrafo3= new Paragraph();
            parágrafo3.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo3.setFont(f6);
            parágrafo3.add("Dimensões das Peças de Madeira.");

            /*construindo tabela 3*/

            /*Tabela de peças de madeira*/
            PdfPTable table3 = new PdfPTable(2);
            /*construindo as celulas da tabela*/

            /*primeira linha tabela 3*/
            PdfPCell Classecarre3 = new PdfPCell(new Phrase("Peças de Madeira",f4));
            Classecarre3.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre3.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell tipodemad53 = new PdfPCell(new Phrase("Madeira",f4));
            tipodemad53.setBackgroundColor(new BaseColor(223,104,4));
            tipodemad53.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*segunda linha tabela 3*/

            PdfPCell classecarre13 = new PdfPCell(new Phrase("Comprimento mínimo (a)",f5));
            PdfPCell classerist123 = new PdfPCell(new Phrase(jTextField2.getText()+" cm",f5));
            classerist123.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*terceira linha tabela 3*/
            PdfPCell resistacom23 = new PdfPCell(new Phrase("Penetração do Banzo Superior (d)",f5));
            PdfPCell comprdf23 = new PdfPCell(new Phrase(jTextField3.getText()+" cm",f5));
            comprdf23.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quarta linha tabela 3*/
            PdfPCell propriedad123 = new PdfPCell(new Phrase("Largura dos Banzos (b)",f5));
            PdfPCell dfdfdfd23 = new PdfPCell(new Phrase(jTextField4.getText()+" cm",f5));
            dfdfdfd23.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*sexta linha tabela 3*/
            PdfPCell celulaNome223 = new PdfPCell(new Phrase("Altura do banzo inferior (hi)",f5));
            PdfPCell celulaSexo223 = new PdfPCell(new Phrase(jTextField6.getText()+" cm",f5));
            celulaSexo223.setHorizontalAlignment(Element.ALIGN_CENTER);

            /* setima linha tabela 3*/
            PdfPCell celulaSexo1223 = new PdfPCell(new Phrase("Altura do banzo superior (hf)",f5));
            PdfPCell celulaSexo12123 = new PdfPCell(new Phrase(jTextField7.getText()+" cm",f5));
            celulaSexo12123.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*oitava linha tabela */
            PdfPCell densidade123 = new PdfPCell(new Phrase("Ângulo entre os banzos (alfa)",f5));
            PdfPCell densidade223 = new PdfPCell(new Phrase(jTextField5.getText()+"°",f5));
            densidade223.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*adicionando as celulas na tabela 3*/
            float columnWidth3[]={300f,100f};
            table3.setWidthPercentage(50);
            table3.setTotalWidth(columnWidth1);
            table3.addCell(Classecarre3);
            table3.addCell(tipodemad53);
            table3.addCell(classecarre13);
            table3.addCell(classerist123);
            table3.addCell(resistacom23);
            table3.addCell(comprdf23);
            table3.addCell(propriedad123);
            table3.addCell(dfdfdfd23);
            table3.addCell(celulaNome223);
            table3.addCell(celulaSexo223);
            table3.addCell(celulaSexo1223);
            table3.addCell(celulaSexo12123);
            table3.addCell(densidade123);
            table3.addCell(densidade223);

            /*Quarta parte do memorial*/
            /*Parágrafo quarto*/
            Paragraph parágrafo4= new Paragraph();
            parágrafo4.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo4.setFont(f6);
            parágrafo4.add("Combinação de Ações. (Combinação Normal, Desfavorável).");

            /*construindo tabela 4*/

            /*Tabela de peças de madeira*/
            PdfPTable table4 = new PdfPTable(3);
            /*construindo as celulas da tabela*/

            /*primeira linha tabela 4*/
            PdfPCell Classecarre34 = new PdfPCell(new Phrase("Ações",f4));
            Classecarre34.setHorizontalAlignment(Element.ALIGN_CENTER);
            Classecarre34.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell tipodemad534 = new PdfPCell(new Phrase("Característica",f4));
            tipodemad534.setHorizontalAlignment(Element.ALIGN_CENTER);
            tipodemad534.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell classecarre134 = new PdfPCell(new Phrase("Valor(kN)",f4));
            classecarre134.setHorizontalAlignment(Element.ALIGN_CENTER);
            classecarre134.setBackgroundColor(new BaseColor(223,104,4));

            /*segunda linha tabela 4*/
            PdfPCell classerist1234 = new PdfPCell(new Phrase("Ações Permanentes",f5));
            classerist1234.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell tipodemad5341 = new PdfPCell(new Phrase(Tipodevariabilidade.getSelectedItem().toString(),f5));
            tipodemad5341.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell classecarre1341 = new PdfPCell(new Phrase(permanente.getText(),f5));
            classecarre1341.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*terceira linha tabela 4*/
            PdfPCell resistacom234 = new PdfPCell(new Phrase("Ações Variáveis (Sobrecarga)",f5));
            PdfPCell comprdf234 = new PdfPCell(new Phrase(variavel.getSelectedItem().toString(),f5));
            comprdf234.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell propriedad1234 = new PdfPCell(new Phrase(sobrecarga.getText(),f5));
            propriedad1234.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quarta linha tabela 4*/
            PdfPCell dfdfdfd234 = new PdfPCell(new Phrase("Vento",f5));
            dfdfdfd234.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell propriedad2234 = new PdfPCell(new Phrase(variavel.getSelectedItem().toString(),f5));
            PdfPCell propriedad3234= new PdfPCell(new Phrase(vento.getText(),f5));
            propriedad3234.setHorizontalAlignment(Element.ALIGN_CENTER);

           /*quarta linha tabela 4*/
            PdfPCell lin4col1tab4 = new PdfPCell(new Phrase("Força Majorada pela Combinação Sobrecarga Ação Variável Principal",f5));
            lin4col1tab4.setColspan(2);
            lin4col1tab4.setHorizontalAlignment(Element.ALIGN_LEFT);
            PdfPCell lin4col2tab4 = new PdfPCell(new Phrase(resultperma2.getText()+" kN",f5));
            lin4col2tab4.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*quinta linha tabela 4*/
            PdfPCell lin5col1tab4 = new PdfPCell(new Phrase("Força Majorada pela Combinação Vento como Ação Variável Principal",f5));
            lin5col1tab4.setColspan(2);
            lin5col1tab4.setHorizontalAlignment(Element.ALIGN_LEFT);
            PdfPCell lin5col2tab4 = new PdfPCell(new Phrase(resultvent2.getText()+" kN",f5));
            lin5col2tab4.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*adicionando as celulas na tabela 4*/
            float columnWidth4[]={100f,100f,100f};
            table4.setTotalWidth(columnWidth4);
            table4.addCell(Classecarre34);
            table4.addCell(tipodemad534);
            table4.addCell(classecarre134);
            table4.addCell(classerist1234);
            table4.addCell(tipodemad5341);
            table4.addCell(classecarre1341 );
            table4.addCell(resistacom234);
            table4.addCell(comprdf234);
            table4.addCell(propriedad1234);
            table4.addCell(dfdfdfd234);
            table4.addCell(propriedad2234);
            table4.addCell(propriedad3234);
            table4.addCell(lin4col1tab4);
            table4.addCell(lin4col2tab4);
            table4.addCell(lin5col1tab4);
            table4.addCell(lin5col2tab4);

             /*Quinta parte do memorial*/
            /*Parágrafo Quinto*/
            Paragraph parágrafo5= new Paragraph();
            parágrafo5.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo5.setFont(f6);
            parágrafo5.add("Fatores de Utilização");

            /*construindo tabela 5*/

            /*Tabela de peças de madeira*/
            PdfPTable table5 = new PdfPTable(2);
            /*construindo as celulas da tabela*/

            /*primeira linha tabela 5*/
            PdfPCell Classecarre35 = new PdfPCell(new Phrase("Fatores de Utilização",f4));
            Classecarre35.setHorizontalAlignment(Element.ALIGN_CENTER);
            Classecarre35.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell tipodemad535 = new PdfPCell(new Phrase("Adotado",f4));
            tipodemad535.setHorizontalAlignment(Element.ALIGN_CENTER);
            tipodemad535.setBackgroundColor(new BaseColor(223,104,4));

            /*segunda linha tabela 5*/
            PdfPCell classecarre135 = new PdfPCell(new Phrase("Ações em Estruturas Correntes",f5));
            PdfPCell classerist1235 = new PdfPCell(new Phrase(acoescorrentes.getSelectedItem().toString(),f5));

            /*terceira linha tabela 5*/
            PdfPCell resistacom235 = new PdfPCell(new Phrase("Cargas Acidentais dos Edifícios ",f5));
            /*Cargas acidentais dos edifícios*/
            String h1 = null;
            String aci = cargasacid.getSelectedItem().toString();
            if("Não há pred. de Equipamentos Fixos nem de el. concentr".equals(aci)){
                h1 = "Locais em que não há predominância de pesos de equipamentos fixos,ou de elevadas concentrações de pessoas";
            }
            if("Há pred. de Equipamentos Fixos ou de elev. Concentração.".equals(aci)){
                h1 = "Locais onde há predominância de pesos de equipamentos fixos, ou de elevadas concentrações de pessoas";
            }
            if("Bibliotecas, arquivos, oficinas ou garagens".equals(aci)){
                h1 = "Bibliotecas, arquivos, oficinas e garagens";
            }
            PdfPCell comprdf235 = new PdfPCell(new Phrase(h1,f5));

            /*adicionando as celulas na tabela 5*/
            table5.addCell(Classecarre35);
            table5.addCell(tipodemad535);
            table5.addCell(classecarre135);
            table5.addCell(classerist1235);
            table5.addCell(resistacom235);
            table5.addCell(comprdf235);
            
             /*Sexta parte do memorial*/
            /*Parágrafo quarto*/
            Paragraph parágrafo6= new Paragraph();
            parágrafo6.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo6.setFont(f6);
            parágrafo6.add("Parâmetros de Cálculo do Entalhe.");

            /*construindo tabela 6*/

            /*Tabela de peças de madeira*/
            PdfPTable table6 = new PdfPTable(3);
            /*construindo as celulas da tabela 6*/

            /*primeira linha tabela 6*/
            PdfPCell Classecarre361 = new PdfPCell(new Phrase("Parâmetros de Cálculo para a Madeira Principal",f4));
            Classecarre361.setRowspan(5);
            try {
                com.itextpdf.text.Image hei = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\imagemtexturamadeira.jpg");

                Classecarre361.setImage(hei);
                Classecarre361.setVerticalAlignment(Element.ALIGN_MIDDLE);
                Classecarre361.setHorizontalAlignment(Element.ALIGN_CENTER);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            Classecarre361.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*primeira linha tabela 6*/
            PdfPCell Classecarre36 = new PdfPCell(new Phrase("Parâmetros de Resistência para a Madeira",f4));
            Classecarre36.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre36.setColspan(2);
            Classecarre36.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*segunda linha tabela 6*/
            PdfPCell classecarre136 = new PdfPCell(new Phrase("Resistência de Compressão paralela as fibras (fc0d).",f5));
            PdfPCell classerist1236 = new PdfPCell(new Phrase(jLabel23.getText()+" kN/cm²",f5));
            classerist1236.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*terceira linha tabela 6*/
            PdfPCell resistacom236 = new PdfPCell(new Phrase("Resistência ao Compressão normal as fibras (fc90d).",f5));
            PdfPCell comprdf236 = new PdfPCell(new Phrase(jLabel24.getText()+" kN/cm²",f5));
            comprdf236.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quarta linha tabela 6*/
            PdfPCell pro = new PdfPCell(new Phrase("Resistência a Compressão a "+jLabel12.getText()+"° paralela as fibras (fc"+jLabel12.getText()+"d)",f5));
            PdfPCell df = new PdfPCell(new Phrase(rescomcal2.getText()+" kN/cm²",f5));
            df.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*quarta linha tabela 6*/
            PdfPCell propriedad1236 = new PdfPCell(new Phrase("Resistência ao Cisalhamento paralelo as fibras (fv0d). ",f5));
            PdfPCell dfdfdfd236 = new PdfPCell(new Phrase(resutcis.getText()+" kN/cm²",f5));
            dfdfdfd236.setHorizontalAlignment(Element.ALIGN_CENTER);
            /*adicionadno imagem*/

            /*adicionando as celulas na tabela 6*/
            float columnWidth6[] = {30,120,60};
            table6.setWidths(columnWidth6);
            table6.setWidthPercentage(80);
            table6.addCell(Classecarre361);
            table6.addCell(Classecarre36);
            table6.addCell(classecarre136);
            table6.addCell(classerist1236);
            table6.addCell(resistacom236);
            table6.addCell(comprdf236);
            table6.addCell(pro);
            table6.addCell(df);
            table6.addCell(propriedad1236);
            table6.addCell(dfdfdfd236);
            
             /*Tabela de peças de madeira*/
            PdfPTable table8 = new PdfPTable(2);
            /*construindo as celulas da tabela 6*/
      
            /*primeira linha tabela 8*/
            PdfPCell Classecarre3678 = new PdfPCell(new Phrase("Resistência do Entalhe a Tensão Normal",f4));
            Classecarre3678.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre3678.setColspan(2);
            Classecarre3678.setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            /*segunda linha tabela 8*/
            PdfPCell classecarre13678 = new PdfPCell(new Phrase("Resistência a Compressão a "+jLabel12.getText()+"° parela as fibras (fc"+jLabel12.getText()+"d)",f5));
            PdfPCell classerist123678 = new PdfPCell(new Phrase(rescomcal2.getText()+" kN/cm²",f5));
            classerist123678.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*segunda linha tabela 8*/
            PdfPCell cla = new PdfPCell(new Phrase("Tensão de Compressão Solicitante",f5));
            PdfPCell clas = new PdfPCell(new Phrase(tensaon.getText()+" kN/cm²",f5));
            clas.setHorizontalAlignment(Element.ALIGN_CENTER);
  
            /*segunda linha tabela 8*/
            PdfPCell cla1 = new PdfPCell(new Phrase(jLabel25.getText(),f5));
            if("Resistência < Solicitante".equals(jLabel25.getText())){
                cla1.setBackgroundColor(BaseColor.RED);
            }else{
                cla1.setBackgroundColor(BaseColor.BLUE);
            }
            cla1.setColspan(2);
            cla1.setHorizontalAlignment(Element.ALIGN_CENTER);
  
            /*adicionando as celulas na tabela 7*/
            float columnWidth8[]={100f,100f};
            table8.setTotalWidth(columnWidth1);
            table8.addCell(Classecarre3678);
            table8.addCell(classecarre13678);
            table8.addCell(classerist123678);
            table8.addCell(cla);
            table8.addCell(clas);
            table8.addCell(cla1);
            
             /*construindo tabela 9*/
            
             /*Tabela de peças de madeira*/
            PdfPTable table9 = new PdfPTable(2);
            /*construindo as celulas da tabela 6*/
            
          
            /*primeira linha tabela 9*/
            PdfPCell Classecarre36789 = new PdfPCell(new Phrase("Resistência do Entalhe a Tensão Cisalhante",f4));
            Classecarre36789.setColspan(2);
            Classecarre36789.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre36789.setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            /*segunda linha tabela 9*/
            PdfPCell classecarre136789 = new PdfPCell(new Phrase("Resistência ao Cisalhamento paralelo as fibras (fv0d)",f5));
            classecarre136789.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell classerist1236789 = new PdfPCell(new Phrase(resutcis.getText()+" kN/cm²",f5));
            classerist1236789.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*terceira linha tabela 9*/
            PdfPCell resistacom236789 = new PdfPCell(new Phrase("Tensão de Cisalhamento Solicitante ",f5));
            resistacom236789.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell comprdf236789 = new PdfPCell(new Phrase(tdcis.getText()+" kN/cm²",f5));
            comprdf236789.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            PdfPCell resista = new PdfPCell(new Phrase(jLabel27.getText(),f5));
            if("Resistência < Solicitante".equals(jLabel27.getText())){
                resista.setBackgroundColor(BaseColor.RED);
            }else{
                resista.setBackgroundColor(BaseColor.BLUE);
            }
            resista.setColspan(2);
            resista.setHorizontalAlignment(Element.ALIGN_CENTER);
            
    
            /*adicionando as celulas na tabela 9*/
            table9.setHorizontalAlignment(Element.ALIGN_CENTER);
            table9.setWidthPercentage(85);
            table9.addCell(Classecarre36789);
            table9.addCell(classecarre136789);
            table9.addCell(classerist1236789);
            table9.addCell(resistacom236789);
            table9.addCell(comprdf236789);
            table9.addCell(resista);
            
               /*Tabela de Propriedades da Madeira*/
            PdfPTable table10 = new PdfPTable(2);
            /*linha um tabela 10*/
            PdfPCell proprie = new PdfPCell(new Phrase("Propriedades da Chapa Metálica e Parafuso",f4));
            proprie.setColspan(2);
            proprie.setHorizontalAlignment(Element.ALIGN_CENTER);
            proprie.setBackgroundColor(new BaseColor(223,104,4));
            /*linha 2 tabela 10*/
            PdfPCell propried = new PdfPCell(new Phrase("Resistência da Chapa a Ruptura (fu)",f5));
            PdfPCell categoria11 = new PdfPCell(new Phrase(jTextField8.getText()+" MPa",f5));
            categoria11.setHorizontalAlignment(Element.ALIGN_CENTER);
            /*linha 3 tabela 10*/
            PdfPCell classe = new PdfPCell(new Phrase("Espessura da Chapa",f5));
            PdfPCell classe3 = new PdfPCell(new Phrase(jTextField10.getText()+" cm",f5));
            classe3.setHorizontalAlignment(Element.ALIGN_CENTER);
            /*linha 4 tabela 10*/
            String hig = null;
            if("0.95".equals(escometal.getSelectedItem().toString())){
                hig = "";
            }
            if("1.25".equals(escometal.getSelectedItem().toString())){
                hig = "(1/2 pol.)";
            }
            if("1.60".equals(escometal.getSelectedItem().toString())){
                hig = "(5/8 pol.)";
            }
            if("1.90".equals(escometal.getSelectedItem().toString())){
                hig = "(3/4 pol.)";
            }if("2.20".equals(escometal.getSelectedItem().toString())){
                hig = "(7/8 pol.)";
            }
            if("2.50".equals(escometal.getSelectedItem().toString())){
                hig = "(1 pol.)";
            }
            if("3.10".equals(escometal.getSelectedItem().toString())){
                hig = "(1 1/4 pol.)";
            }
            if("3.80".equals(escometal.getSelectedItem().toString())){
                hig = "(1 1/2 pol.)";
            }
            PdfPCell resista6= new PdfPCell(new Phrase("Diâmetro do Parafuso",f5));
            PdfPCell compr= new PdfPCell(new Phrase(escometal.getSelectedItem()+" cm ou "+hig,f5));
            compr.setHorizontalAlignment(Element.ALIGN_CENTER);
            /*linha 5 tabela 10*/
            PdfPCell proprieda = new PdfPCell(new Phrase("Resistência do Parafuso",f5));
            PdfPCell dfd = new PdfPCell(new Phrase("240 MPa",f5));
            dfd.setHorizontalAlignment(Element.ALIGN_CENTER);
         
            /*adicionando as celulas na tabela*/
            float columnWidth10[]={300f,100f};
            table10.setTotalWidth(columnWidth10);
            table10.addCell(proprie);
            table10.addCell(propried);
            table10.addCell(categoria11);
            table10.addCell(classe);
            table10.addCell(classe3);
            table10.addCell(resista6);
            table10.addCell(compr);
            table10.addCell(proprieda);
            table10.addCell(dfd);
            
             /*Sexta parte do memorial*/
            /*Parágrafo quarto*/
            Paragraph parágrafo11= new Paragraph();
            parágrafo11.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo11.setFont(f6);
            parágrafo11.add("Cálculos para dimensionamento da ligação por chapa metálica, para este cálculo é necessário verificar a resistência de embutimento da madeira principal pelo parafuso e a resistência do parafuso em contato com chapa metálica, além da verificação do rasgo da chapa metálica.");
            
            /*Tabela de Propriedades da Madeira*/
            PdfPTable table11 = new PdfPTable(2);
            /*linha um tabela 11*/
            PdfPCell proprie6 = new PdfPCell(new Phrase("Verificação do Cisalhamento do Parafuso com a chapa metálica",f4));
            proprie6.setColspan(2);
            proprie6.setHorizontalAlignment(Element.ALIGN_CENTER);
            proprie6.setBackgroundColor(new BaseColor(223,104,4));
           
            /*linha 3 tabela 11*/
            BaseFont bfTimes = null;
            try {
                bfTimes = BaseFont.createFont(FontFactory.HELVETICA,"CP1253", BaseFont.NOT_EMBEDDED);
            } catch (IOException ex) {
                Logger.getLogger(Telaentalheinclinado.class.getName()).log(Level.SEVERE, null, ex);
            }
            Font times = new Font(bfTimes, 12, Font.NORMAL);
            PdfPCell proprie655 = new PdfPCell(new Phrase("Φ   v",times));
            proprie655.setHorizontalAlignment(Element.ALIGN_CENTER);
            proprie655.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell cle = new PdfPCell(new Phrase("      0.4 = para parafusos de alta resistência " +
            "e barras rosqueadas, quando o plano de "+
            "corte passa pela rosca e demais parafusos de " +
            "baixo carbono para qualquer posição do plano " +
            "de corte\n",f5));
            cle.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
            
            PdfPCell p = new PdfPCell(new Phrase("Ab",times));
            p.setHorizontalAlignment(Element.ALIGN_CENTER);
            p.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell cle78 = new PdfPCell(new Phrase("      é a área bruta, baseada no diâmetro "+
            "do parafuso ou no diâmetro externo da rosca da barra redonda rosqueada                \n",f5));
             cle78.setHorizontalAlignment(Element.ALIGN_JUSTIFIED_ALL);
            
            PdfPCell prop = new PdfPCell(new Phrase("fub",times));
            prop.setHorizontalAlignment(Element.ALIGN_CENTER);
            prop.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell cle63 = new PdfPCell(new Phrase("      é a resistência à ruptura do material do "+
            "parafuso ou barra rosqueada à tração, especificada na tabela 7\n",f5));
            cle63.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
            
            
            PdfPCell prop6 = new PdfPCell(new Phrase(" γ  a2",times));
            prop6.setHorizontalAlignment(Element.ALIGN_CENTER);
            prop6.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell cle635 = new PdfPCell(new Phrase("     é o coeficiente de ponderação das resistências " +
            "para o estado limite último de ruptura da seção líquida parafuso ou barra rosqueada à tração\n"
            ,f5));
            cle635.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
            
             /*linha 3 tabela 11*/
            PdfPCell propried10 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei15 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\Equaçãocisalhamentoprego.JPG"); 
                 
                 propried10.setImage(hei15);
                 propried10.setVerticalAlignment(Element.ALIGN_MIDDLE);
                 propried10.setHorizontalAlignment(Element.ALIGN_CENTER);
                 
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            PdfPCell cate = new PdfPCell(new Phrase(jLabel41.getText()+" kN",f5));
            cate.setHorizontalAlignment(Element.ALIGN_CENTER);
            cate.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*adicionando as celulas na tabela*/
            float columnWidth11[]={50f,100f};
            table11.setTotalWidth(columnWidth11);
            table11.setWidthPercentage(100);
            table11.addCell(proprie6);
            table11.addCell(proprie655);
            table11.addCell(cle);
            table11.addCell(p);
            table11.addCell(cle78);
            table11.addCell(prop);
            table11.addCell(cle63);
            table11.addCell(prop6);
            table11.addCell(cle635);
            table11.addCell(propried10);
            table11.addCell(cate);
            
            
            /*Tabela verificação da pressão de contato do furo do parafuso */
            PdfPTable table12 = new PdfPTable(2);
           
            /*linha um tabela 12*/
            PdfPCell li1col1tab12 = new PdfPCell(new Phrase("Verificação da pressão de contato do furo do parafuso",f4));
            li1col1tab12.setColspan(2);
            li1col1tab12.setHorizontalAlignment(Element.ALIGN_CENTER);
            li1col1tab12.setBackgroundColor(new BaseColor(223,104,4));
            
            /*linha 2 tabela 12*/
            PdfPCell li2col1tab12 = new PdfPCell(new Phrase("Φ   c",times));
            li2col1tab12.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col1tab12.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li2col2tab12 = new PdfPCell(new Phrase("1,2 = para furos-padrão, furos alargados "+
            "furos pouco alongados em qualquer" +
            "direção e furos muito alongados na direção da "+
            "força quando a deformação no furo para forças "+
            "de serviço for uma limitação de projeto.\n",f5));
            li2col2tab12.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
            
            /*linha 3 tabela 12*/
            
            PdfPCell li3col1tab12 = new PdfPCell(new Phrase("lf",times));
            li3col1tab12.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col1tab12.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li3col2tab12 = new PdfPCell(new Phrase("  é a distância, na direção da força, entre " +
            "as bordas de furos adjacentes ou de furo a " +
            "borda livre. (No caso será adotado lf como 3*diametro do parafuso, pois está a distância minima entre parafusos\n",f5));
            li3col2tab12.setHorizontalAlignment(Element.ALIGN_JUSTIFIED_ALL);
            
            /*linha 4 tabela 12*/
            
            PdfPCell li4col1tab12 = new PdfPCell(new Phrase("t",times));
            li4col1tab12.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col1tab12.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li4col2tab12 = new PdfPCell(new Phrase(" é a espessura da parte ligada (espessura da chapa)",f5));
            li4col2tab12.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
            
            /*linha 5 tabela 12*/
            
            PdfPCell li5col1tab12 = new PdfPCell(new Phrase(" fu",times));
            li5col1tab12.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col1tab12.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li5col2tab12 = new PdfPCell(new Phrase("    é a resistência à ruptura do aço da "+
            "parede do furo",f5));
            li5col2tab12.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
            
            /*linha 6 tabela 12*/
            
            PdfPCell li6col1tab12 = new PdfPCell(new Phrase("db",times));
            li6col1tab12.setHorizontalAlignment(Element.ALIGN_CENTER);
            li6col1tab12.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li6col2tab12 = new PdfPCell(new Phrase("     é o diâmetro do parafuso",f5));
            li6col2tab12.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
            
            /*linha 7 tabela 12*/
            PdfPCell li7col1tab12 = new PdfPCell(new Phrase(" γ  a2",times));
            li7col1tab12.setHorizontalAlignment(Element.ALIGN_CENTER);
            li7col1tab12.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li7col2tab12 = new PdfPCell(new Phrase("     é o coeficiente de ponderação das resistências " +
            "para o estado limite último de ruptura da seção líquida parafuso ou barra rosqueada à tração\n"
            ,f5));
            li7col2tab12.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
            
            /*linha 8 tabela 12*/
            PdfPCell li8col1tab12 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\equacaocontapa.JPG"); 
                 
                 li8col1tab12.setImage(hei13);
                 li8col1tab12.setVerticalAlignment(Element.ALIGN_MIDDLE);
                 li8col1tab12.setHorizontalAlignment(Element.ALIGN_CENTER);
                 
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            li8col1tab12.setRowspan(2);
            PdfPCell li8col2tab12= new PdfPCell(new Phrase(jLabel42.getText()+" kN",f5));
            li8col2tab12.setHorizontalAlignment(Element.ALIGN_CENTER);
            li8col2tab12.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 8 tabela 12*/
            PdfPCell li9col2tab12= new PdfPCell(new Phrase(jLabel43.getText()+" kN",f5));
            li9col2tab12.setHorizontalAlignment(Element.ALIGN_CENTER);
            li9col2tab12.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*adicionando as celulas na tabela*/
            
            table12.setWidthPercentage(100);
            table12.addCell(li1col1tab12);
            table12.addCell(li2col1tab12);
            table12.addCell(li2col2tab12);
            table12.addCell(li3col1tab12);
            table12.addCell(li3col2tab12);
            table12.addCell(li4col1tab12);
            table12.addCell(li4col2tab12);
            table12.addCell(li5col1tab12);
            table12.addCell(li5col2tab12);
            table12.addCell(li6col1tab12);
            table12.addCell(li6col2tab12);
            table12.addCell(li7col1tab12);
            table12.addCell(li7col2tab12);
            table12.addCell(li8col1tab12);
            table12.addCell(li8col2tab12);
            table12.addCell(li9col2tab12);
            
            /*Tabela verificação para a resistência da madeira principal */
            PdfPTable table13 = new PdfPTable(3);
           
            /*linha um tabela 13*/
            PdfPCell li1col1tab13 = new PdfPCell(new Phrase("Verificações para a Resistência da madeira em contato com o parafuso e vice versa",f4));
            li1col1tab13.setColspan(3);
            li1col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li1col1tab13.setBackgroundColor(new BaseColor(223,104,4));
            
            /*linha 2 tabela 13*/
            PdfPCell li2col1tab13 = new PdfPCell(new Phrase("Resistência ao embutimento da Madeira paralelo as fibras (fe0d)",f5));
            li2col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
           
            PdfPCell li2col2tab13 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\equaçãofe0d.JPG"); 
                 li2col2tab13.setImage(hei13);
                 li2col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
                 li2col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
                 
                 
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            li2col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li2col3tab13 = new PdfPCell(new Phrase(jLabel44.getText()+" kN/cm²",f5));
            li2col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 3 tabela 13*/
            PdfPCell li3col1tab13 = new PdfPCell(new Phrase("Resistência ao embutimento da Madeira normal as fibras (fe90d)",f5));
            li3col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li3col2tab13 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\equacaofe90d.JPG"); 
                 li3col2tab13.setImage(hei13);
                 li3col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
                 li3col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
                 
                 
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            li3col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li3col3tab13 = new PdfPCell(new Phrase(jLabel45.getText()+" kN/cm²",f5));
            li3col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            /*linha 4 tabela 13*/
        
            PdfPCell li4col1tab13 = new PdfPCell(new Phrase("Resistência ao embutimento da Madeira paralelo as fibras (fe"+jLabel12.getText()+"d)",f5));
            li4col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li4col2tab13 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\equação em angulo.JPG"); 
                 li4col2tab13.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li4col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li4col3tab13 = new PdfPCell(new Phrase(jLabel47.getText()+" kN/cm²",f5));
            li4col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 5 tabela 13*/
        
            PdfPCell li5col1tab13 = new PdfPCell(new Phrase("Beta (B)",f5));
            li5col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li5col2tab13 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\beta.JPG"); 
                 li5col2tab13.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li5col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li5col3tab13 = new PdfPCell(new Phrase(bet.getText(),f5));
            li5col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 6 tabela 13*/
        
            PdfPCell li6col1tab13 = new PdfPCell(new Phrase("Beta limite (Blim)",f5));
            li6col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li6col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li6col2tab13 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\betalimite.JPG"); 
                 li6col2tab13.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li6col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li6col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li6col3tab13 = new PdfPCell(new Phrase(betlimite.getText(),f5));
            li6col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li6col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 7 tabela 13*/
          
            PdfPCell li7col1tab13 = new PdfPCell(new Phrase(jLabel49.getText(),f5));
            li7col1tab13.setColspan(3);
            li7col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li7col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 8 tabela 13*/
            
            PdfPCell li8col1tab13 = new PdfPCell(new Phrase("Resistência de Corte do Parafuso (Rvd,1)",f5));
            li8col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li8col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li8col2tab13 = new PdfPCell();
            String localarquivo = null;
            if("Beta < Betalimite".equals(jLabel49.getText())){
            localarquivo = "C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\betmaiorres.JPG";    
            }else{
            localarquivo = "C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\betmenorres.JPG";
            }
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance(localarquivo); 
                 li8col2tab13.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li8col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li8col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li8col3tab13 = new PdfPCell(new Phrase(jLabel50.getText()+" kN",f5));
            li8col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li8col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
           
            
            /*adicionando as celulas na tabela*/
            
            table13.setWidthPercentage(100);
            table13.addCell(li1col1tab13);
            table13.addCell(li2col1tab13);
            table13.addCell(li2col2tab13);
            table13.addCell(li2col3tab13);
            table13.addCell(li3col1tab13);
            table13.addCell(li3col2tab13);
            table13.addCell(li3col3tab13);
            table13.addCell(li4col1tab13);
            table13.addCell(li4col2tab13);
            table13.addCell(li4col3tab13);
            table13.addCell(li5col1tab13);
            table13.addCell(li5col2tab13);
            table13.addCell(li5col3tab13);
            table13.addCell(li6col1tab13);
            table13.addCell(li6col2tab13);
            table13.addCell(li6col3tab13);
            table13.addCell(li7col1tab13);
            table13.addCell(li8col1tab13);
            table13.addCell(li8col2tab13);
            table13.addCell(li8col3tab13);
            
            /*Cálculo final*/
            PdfPTable table14 = new PdfPTable(2);
           
            /*linha um tabela 14*/
            PdfPCell li1col1tab14 = new PdfPCell(new Phrase("Cálculo Final",f4));
            li1col1tab14.setColspan(2);
            li1col1tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li1col1tab14.setBackgroundColor(new BaseColor(223,104,4));
            
            /*linha 2 tabela 14*/
            PdfPCell li2col1tab14 = new PdfPCell(new Phrase("Força Resistida pelo Entalhe",f5));
            li2col1tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col1tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li2col2tab14 = new PdfPCell(new Phrase(jLabel51.getText()+" kN",f5));
            li2col2tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col2tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 3 tabela 14*/
            
            PdfPCell li3col1tab14 = new PdfPCell(new Phrase("Força solicitante na Chapa e Parafuso",f5));
            li3col1tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col1tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li3col2tab14 = new PdfPCell(new Phrase(frdrecebido.getText()+" kN",f5));
            li3col2tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col2tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 4 tabela 12*/
            
            PdfPCell li4col1tab14 = new PdfPCell(new Phrase("Número mínimo de parafusos em uma seção de Corte",f5));
            li4col1tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col1tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li4col2tab14 = new PdfPCell(new Phrase(numpara.getText(),f5));
            li4col2tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col2tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 5 tabela 12*/
            
            PdfPCell li5col1tab14 = new PdfPCell(new Phrase("Lembrando que sempre"+
            "será adotado o menor valor de resistência entre Parafuso, Chapa e Madeira para o cálculo do número mínimo de parafusos",f5));
            li5col1tab14.setColspan(2);
            li5col1tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col1tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
           
            /*adicionando as celulas na tabela*/
            table14.setWidthPercentage(100);
            table14.addCell(li1col1tab14);
            table14.addCell(li2col1tab14);
            table14.addCell(li2col2tab14);
            table14.addCell(li3col1tab14);
            table14.addCell(li3col2tab14);
            table14.addCell(li4col1tab14);
            table14.addCell(li4col2tab14);
            table14.addCell(li5col1tab14);
            
            
            
            /*incluindo items no documento*/
            documento.add(titulo);
            documento.add(espaçamento1);
            String imagemcorte = null;
            imagemcorte = "C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Ligentalhechapameta.JPG";
            try {
                com.itextpdf.text.Image hei = com.itextpdf.text.Image.getInstance(imagemcorte);
                hei.scaleAbsolute(300,150);

                float x = (PageSize.A4.getWidth()-hei.getScaledWidth())/2;
                hei.setAlignment((int) x);
                documento.add(hei);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setAbsolutePosition(500, TOP_ALIGNMENT);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);
                heip.setAlignment(Element.ALIGN_RIGHT);
                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setRotationDegrees(180);
                heip.setAbsolutePosition(0,PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);

                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            parágrafo1.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo1);
            documento.add(espaçamento1);
            documento.add(table1);
            documento.add(espaçamento1);
            parágrafo2.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo2);
            documento.add(espaçamento1);
            documento.add(table2);
            documento.add(espaçamento1);
            parágrafo3.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo3);
            documento.add(espaçamento1);
            documento.add(table3);
            documento.add(espaçamento1);
            documento.add(espaçamento1);
            parágrafo4.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo4);
            documento.add(espaçamento1);
            documento.add(table4);
            documento.add(espaçamento1);
            documento.add(table5);
            
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setAbsolutePosition(500, TOP_ALIGNMENT);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);
                heip.setAlignment(Element.ALIGN_RIGHT);
                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setRotationDegrees(180);
                heip.setAbsolutePosition(0,PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);

                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
           
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setAbsolutePosition(500, TOP_ALIGNMENT);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);
                heip.setAlignment(Element.ALIGN_RIGHT);
                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setRotationDegrees(180);
                heip.setAbsolutePosition(0,PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);

                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            documento.add(espaçamento1);
            parágrafo6.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo6);
            documento.add(espaçamento1);
            documento.add(table6);
            documento.add(espaçamento1);
            documento.add(table8);
            documento.add(espaçamento1);
            documento.add(table9);
            documento.add(espaçamento1);
            documento.add(table10);
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setAbsolutePosition(500, TOP_ALIGNMENT);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);
                heip.setAlignment(Element.ALIGN_RIGHT);
                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setRotationDegrees(180);
                heip.setAbsolutePosition(0,PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);

                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            documento.add(espaçamento1);
            documento.add(parágrafo11);
            documento.add(espaçamento1);
            documento.add(table11);
            documento.add(espaçamento1);
            documento.add(table12);
            documento.add(espaçamento1);
            documento.add(table13);
            documento.add(espaçamento1);
            documento.add(table14);
            
        } catch (FileNotFoundException | DocumentException ex) {
            System.out.println("error");
        }finally{
            documento.close();
        }
        try {
            Desktop.getDesktop().open(new File("Memorial de Cálculo Entalhe Inclinado.pdf"));
        } catch (IOException ex) {
            Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Document documento = new Document();
        DecimalFormat fe = new DecimalFormat("0.00");
        try {
            PdfWriter.getInstance(documento,new FileOutputStream("Memorial de Cálculo Entalhe inclinado.pdf"));
            documento.open();
            documento.newPage();
            documento.setPageSize(PageSize.A4);

            documento.setMargins(85f, 85f, 85f, 85f);
            documento.addCreator("Matheus Felipe de Oliveira Lemos");
            documento.addTitle("Memorial de Cálculo");
            documento.addCreator("Matheus Felipe de Oliveira Lemos");
            documento.addLanguage("Português");
            documento.addKeywords("Ligações,Madeira,Resistência,Solicitação");
            Font f3 = new Font(Font.FontFamily.TIMES_ROMAN, 14f, Font.BOLD);
            Font f4 = new Font(Font.FontFamily.TIMES_ROMAN, 12f, Font.BOLD);
            f4.setColor(BaseColor.WHITE);
            Font f5 = new Font(Font.FontFamily.TIMES_ROMAN, 12f, Font.NORMAL);
            Font f6 = new Font(Font.FontFamily.TIMES_ROMAN, 12f, Font.BOLD);
            Paragraph titulo = new Paragraph();
            /*Título principal */
            titulo.setFont(f3);
            titulo.setAlignment(Element.ALIGN_CENTER);
            titulo.add("Memorial de Cálculo Entalhe Inclinado\n");
            /*Parágrafo primeiro*/
            Paragraph parágrafo1= new Paragraph();
            parágrafo1.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo1.setFont(f6);
            parágrafo1.add("Características das Propriedades da Madeira (De acordo com a Norma NBR 7190/1997).");
            /*espaçamento 1*/
            Paragraph espaçamento1 = new Paragraph();
            for (int i = 0; i < 20; i++) {
                espaçamento1.add(new Chunk(" "));
            }
            /*espaçamento 2*/
            Paragraph espaçamento2 = new Paragraph();
            for (int i = 0; i < 20; i++) {
                espaçamento2.add(new Chunk(" "));
            }
            /*espaçamento 3*/
            Paragraph espaçamento3 = new Paragraph();
            for (int i = 0; i < 1500; i++) {
                espaçamento3.add(new Chunk(" "));
            }
            /*Tabela de Propriedades da Madeira*/
            PdfPTable table1 = new PdfPTable(2);
            /*construindo as celulas da tabela*/
            String categoria1 = "";
            if (seldico.isSelected()){
                categoria1 = "Dicotiledônea";
            }
            if(selco.isSelected()){
                categoria1 = "Conífera";
            }
            PdfPCell propriedad = new PdfPCell(new Phrase("Propriedade da Madeira",f4));
            propriedad.setHorizontalAlignment(Element.ALIGN_CENTER);
            propriedad.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell categoria = new PdfPCell(new Phrase(categoria1,f4));
            categoria.setHorizontalAlignment(Element.ALIGN_CENTER);
            categoria.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell classerist = new PdfPCell(new Phrase("Classe de Resistência",f5));
            PdfPCell classerist1 = new PdfPCell(new Phrase("C"+resfc0k.getText(),f5));
            classerist1.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell resistacom = new PdfPCell(new Phrase("Resistência Característica a Compressão Paralela as fibras.",f5));
            PdfPCell comprdf = new PdfPCell(new Phrase(resfc0k.getText()+" MPa",f5));
            comprdf.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell propriedad1 = new PdfPCell(new Phrase("Resistência Característica a Compressão Normal as fibras.",f5));
            PdfPCell dfdfdfd = new PdfPCell(new Phrase(jLabel21.getText()+" MPa",f5));
            dfdfdfd.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell propriedad2 = new PdfPCell(new Phrase("Resistência Característica ao Cisalhamento Paralelo as fibras",f5));
            PdfPCell propriedad3= new PdfPCell(new Phrase(jLabel26.getText()+" MPa",f5));
            propriedad3.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell celulaNome2 = new PdfPCell(new Phrase("Valor médio do módulo de elasticidade na compressão paralela às fibras",f5));
            PdfPCell celulaSexo2 = new PdfPCell(new Phrase(resecom.getText()+" MPa",f5));
            celulaSexo2 .setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell celulaSexo12 = new PdfPCell(new Phrase("Densidade básica",f5));
            PdfPCell celulaSexo121 = new PdfPCell(new Phrase(jLabel22.getText()+" MPa",f5));
            celulaSexo121.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell densidade1 = new PdfPCell(new Phrase("Densidade aparente",f5));
            PdfPCell densidade2 = new PdfPCell(new Phrase(respapa.getText()+" MPA",f5));
            densidade2.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell umidade = new PdfPCell(new Phrase("Umidade",f5));
            PdfPCell umidade2 = new PdfPCell(new Phrase("12%",f5));
            umidade2.setHorizontalAlignment(Element.ALIGN_CENTER);
            /*adicionando as celulas na tabela*/
            float columnWidth[]={300f,100f};
            table1.setTotalWidth(columnWidth);
            table1.addCell(propriedad);
            table1.addCell(categoria);
            table1.addCell(classerist);
            table1.addCell(classerist1);
            table1.addCell(resistacom );
            table1.addCell(comprdf);
            table1.addCell(propriedad1);
            table1.addCell(dfdfdfd);
            table1.addCell(propriedad2);
            table1.addCell(propriedad3);
            table1.addCell(celulaNome2);
            table1.addCell(celulaSexo2);
            table1.addCell(celulaSexo12);
            table1.addCell(celulaSexo121);
            table1.addCell(densidade1);
            table1.addCell(densidade2);
            table1.addCell(umidade);
            table1.addCell(umidade2);
            /*terminar a tabela*/

            /*segunda parte do memorial*/
            /*Parágrafo segundo*/
            Paragraph parágrafo2= new Paragraph();
            parágrafo2.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo2.setFont(f6);
            parágrafo2.add("Caracterização da Madeira e coeficiente de Modificação (De acordo com a Norma NBR 7190/1997).");
            /*construindo tabela 2*/

            /*Tabela de Propriedades da Madeira*/
            PdfPTable table2 = new PdfPTable(2);
            /*construindo as celulas da tabela*/

            /*primeira linha tabela 2*/
            PdfPCell Classecarre = new PdfPCell(new Phrase("Especificações para Modificação",f4));
            Classecarre.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell tipodemad = new PdfPCell(new Phrase("Madeira",f4));
            tipodemad.setBackgroundColor(new BaseColor(223,104,4));
            tipodemad.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*segunda linha tabela 2*/
            PdfPCell classecarre1 = new PdfPCell(new Phrase("Classe de Carregamento",f5));
            String classefdv = jComboBox10.getSelectedItem().toString();
            PdfPCell classerist12 = new PdfPCell(new Phrase(classefdv,f5));
            classerist12.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*terceira linha tabela 2*/
            PdfPCell resistacom2 = new PdfPCell(new Phrase("Tipo de Madeira",f5));
            String resistac = jComboBox9.getSelectedItem().toString();
            PdfPCell comprdf2 = new PdfPCell(new Phrase(resistac,f5));
            comprdf2.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quarta linha tabela 2*/
            PdfPCell propriedad12 = new PdfPCell(new Phrase("Categoria da Madeira",f5));
            String propd = jComboBox15.getSelectedItem().toString();
            PdfPCell dfdfdfd2 = new PdfPCell(new Phrase(propd,f5));
            dfdfdfd2.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quinta linha tabela 2*/
            PdfPCell propriedad22 = new PdfPCell(new Phrase("Classe de Umidade da Madeira",f5));
            String propd1 = jComboBox13.getSelectedItem().toString();
            PdfPCell propriedad32= new PdfPCell(new Phrase(propd1,f5));
            propriedad32.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*sexta linha tabela 2*/
            PdfPCell celulaNome22 = new PdfPCell(new Phrase("kmod1",f5));
            PdfPCell celulaSexo22 = new PdfPCell(new Phrase(resulkmod8.getText(),f5));
            celulaSexo22.setHorizontalAlignment(Element.ALIGN_CENTER);

            /* setima linha tabela 2*/
            PdfPCell celulaSexo122 = new PdfPCell(new Phrase("kmod2",f5));
            PdfPCell celulaSexo1212 = new PdfPCell(new Phrase(resulkmod9.getText(),f5));
            celulaSexo1212.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*oitava linha tabela 2*/
            PdfPCell densidade12 = new PdfPCell(new Phrase("kmod3",f5));
            PdfPCell densidade22 = new PdfPCell(new Phrase(resulkmod10.getText(),f5));
            densidade22.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*nona linha tabela 2*/
            PdfPCell umidade21 = new PdfPCell(new Phrase("kmod = kmod1*kmod2*kmod3",f5));
            PdfPCell umidade22 = new PdfPCell(new Phrase(resulkmod11.getText(),f5));
            umidade22.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*adicionando as celulas na tabela 2*/
            float columnWidth1[]={300f,100f};
            table2.setWidthPercentage(70);

            table2.addCell(Classecarre);
            table2.addCell(tipodemad);
            table2.addCell(classecarre1);
            table2.addCell(classerist12);
            table2.addCell(resistacom2);
            table2.addCell(comprdf2);
            table2.addCell(propriedad12);
            table2.addCell(dfdfdfd2);
            table2.addCell(propriedad22);
            table2.addCell(propriedad32);
            table2.addCell(celulaNome22);
            table2.addCell(celulaSexo22);
            table2.addCell(celulaSexo122);
            table2.addCell(celulaSexo1212);
            table2.addCell(densidade12);
            table2.addCell(densidade22);
            table2.addCell(umidade21);
            table2.addCell(umidade22);

            /*terceira parte do memorial*/
            /*Parágrafo terceira*/
            Paragraph parágrafo3= new Paragraph();
            parágrafo3.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo3.setFont(f6);
            parágrafo3.add("Dimensões das Peças de Madeira.");

            /*construindo tabela 3*/

            /*Tabela de peças de madeira*/
            PdfPTable table3 = new PdfPTable(2);
            /*construindo as celulas da tabela*/

            /*primeira linha tabela 3*/
            PdfPCell Classecarre3 = new PdfPCell(new Phrase("Peças de Madeira",f4));
            Classecarre3.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre3.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell tipodemad53 = new PdfPCell(new Phrase("Madeira",f4));
            tipodemad53.setBackgroundColor(new BaseColor(223,104,4));
            tipodemad53.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*segunda linha tabela 3*/

            PdfPCell classecarre13 = new PdfPCell(new Phrase("Comprimento mínimo (a)",f5));
            PdfPCell classerist123 = new PdfPCell(new Phrase(jTextField2.getText()+" cm",f5));
            classerist123.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*terceira linha tabela 3*/
            PdfPCell resistacom23 = new PdfPCell(new Phrase("Penetração do Banzo Superior (d)",f5));
            PdfPCell comprdf23 = new PdfPCell(new Phrase(jTextField3.getText()+" cm",f5));
            comprdf23.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quarta linha tabela 3*/
            PdfPCell propriedad123 = new PdfPCell(new Phrase("Largura dos Banzos (b)",f5));
            PdfPCell dfdfdfd23 = new PdfPCell(new Phrase(jTextField4.getText()+" cm",f5));
            dfdfdfd23.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*sexta linha tabela 3*/
            PdfPCell celulaNome223 = new PdfPCell(new Phrase("Altura do banzo inferior (hi)",f5));
            PdfPCell celulaSexo223 = new PdfPCell(new Phrase(jTextField6.getText()+" cm",f5));
            celulaSexo223.setHorizontalAlignment(Element.ALIGN_CENTER);

            /* setima linha tabela 3*/
            PdfPCell celulaSexo1223 = new PdfPCell(new Phrase("Altura do banzo superior (hf)",f5));
            PdfPCell celulaSexo12123 = new PdfPCell(new Phrase(jTextField7.getText()+" cm",f5));
            celulaSexo12123.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*oitava linha tabela */
            PdfPCell densidade123 = new PdfPCell(new Phrase("Ângulo entre os banzos (alfa)",f5));
            PdfPCell densidade223 = new PdfPCell(new Phrase(jTextField5.getText()+"°",f5));
            densidade223.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*adicionando as celulas na tabela 3*/
            float columnWidth3[]={300f,100f};
            table3.setWidthPercentage(50);
            table3.setTotalWidth(columnWidth1);
            table3.addCell(Classecarre3);
            table3.addCell(tipodemad53);
            table3.addCell(classecarre13);
            table3.addCell(classerist123);
            table3.addCell(resistacom23);
            table3.addCell(comprdf23);
            table3.addCell(propriedad123);
            table3.addCell(dfdfdfd23);
            table3.addCell(celulaNome223);
            table3.addCell(celulaSexo223);
            table3.addCell(celulaSexo1223);
            table3.addCell(celulaSexo12123);
            table3.addCell(densidade123);
            table3.addCell(densidade223);

            /*Quarta parte do memorial*/
            /*Parágrafo quarto*/
            Paragraph parágrafo4= new Paragraph();
            parágrafo4.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo4.setFont(f6);
            parágrafo4.add("Combinação de Ações. (Combinação Normal, Desfavorável).");

            /*construindo tabela 4*/

            /*Tabela de peças de madeira*/
            PdfPTable table4 = new PdfPTable(3);
            /*construindo as celulas da tabela*/

            /*primeira linha tabela 4*/
            PdfPCell Classecarre34 = new PdfPCell(new Phrase("Ações",f4));
            Classecarre34.setHorizontalAlignment(Element.ALIGN_CENTER);
            Classecarre34.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell tipodemad534 = new PdfPCell(new Phrase("Característica",f4));
            tipodemad534.setHorizontalAlignment(Element.ALIGN_CENTER);
            tipodemad534.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell classecarre134 = new PdfPCell(new Phrase("Valor(kN)",f4));
            classecarre134.setHorizontalAlignment(Element.ALIGN_CENTER);
            classecarre134.setBackgroundColor(new BaseColor(223,104,4));

            /*segunda linha tabela 4*/
            PdfPCell classerist1234 = new PdfPCell(new Phrase("Ações Permanentes",f5));
            classerist1234.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell tipodemad5341 = new PdfPCell(new Phrase(Tipodevariabilidade.getSelectedItem().toString(),f5));
            tipodemad5341.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell classecarre1341 = new PdfPCell(new Phrase(permanente.getText(),f5));
            classecarre1341.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*terceira linha tabela 4*/
            PdfPCell resistacom234 = new PdfPCell(new Phrase("Ações Variáveis (Sobrecarga)",f5));
            PdfPCell comprdf234 = new PdfPCell(new Phrase(variavel.getSelectedItem().toString(),f5));
            comprdf234.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell propriedad1234 = new PdfPCell(new Phrase(sobrecarga.getText(),f5));
            propriedad1234.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quarta linha tabela 4*/
            PdfPCell dfdfdfd234 = new PdfPCell(new Phrase("Vento",f5));
            dfdfdfd234.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell propriedad2234 = new PdfPCell(new Phrase(variavel.getSelectedItem().toString(),f5));
            PdfPCell propriedad3234= new PdfPCell(new Phrase(vento.getText(),f5));
            propriedad3234.setHorizontalAlignment(Element.ALIGN_CENTER);

             /*quarta linha tabela 4*/
            PdfPCell lin4col1tab4 = new PdfPCell(new Phrase("Força Majorada pela Combinação Sobrecarga Ação Variável Principal",f5));
            lin4col1tab4.setColspan(2);
            lin4col1tab4.setHorizontalAlignment(Element.ALIGN_LEFT);
            PdfPCell lin4col2tab4 = new PdfPCell(new Phrase(resultperma2.getText()+" kN",f5));
            lin4col2tab4.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*quinta linha tabela 4*/
            PdfPCell lin5col1tab4 = new PdfPCell(new Phrase("Força Majorada pela Combinação Vento como Ação Variável Principal",f5));
            lin5col1tab4.setColspan(2);
            lin5col1tab4.setHorizontalAlignment(Element.ALIGN_LEFT);
            PdfPCell lin5col2tab4 = new PdfPCell(new Phrase(resultvent2.getText()+" kN",f5));
            lin5col2tab4.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*adicionando as celulas na tabela 4*/
            float columnWidth4[]={100f,100f,100f};
            table4.setTotalWidth(columnWidth4);
            table4.addCell(Classecarre34);
            table4.addCell(tipodemad534);
            table4.addCell(classecarre134);
            table4.addCell(classerist1234);
            table4.addCell(tipodemad5341);
            table4.addCell(classecarre1341 );
            table4.addCell(resistacom234);
            table4.addCell(comprdf234);
            table4.addCell(propriedad1234);
            table4.addCell(dfdfdfd234);
            table4.addCell(propriedad2234);
            table4.addCell(propriedad3234);
            table4.addCell(lin4col1tab4);
            table4.addCell(lin4col2tab4);
            table4.addCell(lin5col1tab4);
            table4.addCell(lin5col2tab4);

            /*Quinta parte do memorial*/
            /*Parágrafo Quinto*/
            Paragraph parágrafo5= new Paragraph();
            parágrafo5.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo5.setFont(f6);
            parágrafo5.add("Fatores de Utilização");

            /*construindo tabela 5*/

            /*Tabela de peças de madeira*/
            PdfPTable table5 = new PdfPTable(2);
            /*construindo as celulas da tabela*/

            /*primeira linha tabela 5*/
            PdfPCell Classecarre35 = new PdfPCell(new Phrase("Fatores de Utilização",f4));
            Classecarre35.setHorizontalAlignment(Element.ALIGN_CENTER);
            Classecarre35.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell tipodemad535 = new PdfPCell(new Phrase("Adotado",f4));
            tipodemad535.setHorizontalAlignment(Element.ALIGN_CENTER);
            tipodemad535.setBackgroundColor(new BaseColor(223,104,4));

            /*segunda linha tabela 5*/
            PdfPCell classecarre135 = new PdfPCell(new Phrase("Ações em Estruturas Correntes",f5));
            PdfPCell classerist1235 = new PdfPCell(new Phrase(acoescorrentes.getSelectedItem().toString(),f5));

            /*terceira linha tabela 5*/
            PdfPCell resistacom235 = new PdfPCell(new Phrase("Cargas Acidentais dos Edifícios ",f5));
            /*Cargas acidentais dos edifícios*/
            String h1 = null;
            String aci = cargasacid.getSelectedItem().toString();
            if("Não há pred. de Equipamentos Fixos nem de el. concentr".equals(aci)){
                h1 = "Locais em que não há predominância de pesos de equipamentos fixos,ou de elevadas concentrações de pessoas";
            }
            if("Há pred. de Equipamentos Fixos ou de elev. Concentração.".equals(aci)){
                h1 = "Locais onde há predominância de pesos de equipamentos fixos, ou de elevadas concentrações de pessoas";
            }
            if("Bibliotecas, arquivos, oficinas ou garagens".equals(aci)){
                h1 = "Bibliotecas, arquivos, oficinas e garagens";
            }
            PdfPCell comprdf235 = new PdfPCell(new Phrase(h1,f5));

            /*adicionando as celulas na tabela 5*/
            table5.addCell(Classecarre35);
            table5.addCell(tipodemad535);
            table5.addCell(classecarre135);
            table5.addCell(classerist1235);
            table5.addCell(resistacom235);
            table5.addCell(comprdf235);
            
             /*Sexta parte do memorial*/
            /*Parágrafo quarto*/
            Paragraph parágrafo6= new Paragraph();
            parágrafo6.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo6.setFont(f6);
            parágrafo6.add("Parâmetros de Cálculo da Ligação.");

            /*construindo tabela 6*/

            /*Tabela de peças de madeira*/
            PdfPTable table6 = new PdfPTable(3);
            /*construindo as celulas da tabela 6*/

            /*primeira linha tabela 6*/
            PdfPCell Classecarre361 = new PdfPCell(new Phrase("Parâmetros de Cálculo para a Madeira",f4));
            Classecarre361.setRowspan(5);
            try {
                com.itextpdf.text.Image hei = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\imagemtexturamadeira.jpg");

                Classecarre361.setImage(hei);
                Classecarre361.setVerticalAlignment(Element.ALIGN_MIDDLE);
                Classecarre361.setHorizontalAlignment(Element.ALIGN_CENTER);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            Classecarre361.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*primeira linha tabela 6*/
            PdfPCell Classecarre36 = new PdfPCell(new Phrase("Parâmetros de Resistência para a Madeira",f4));
            Classecarre36.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre36.setColspan(2);
            Classecarre36.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*segunda linha tabela 6*/
            PdfPCell classecarre136 = new PdfPCell(new Phrase("Resistência de Compressão de Cálculo paralela as fibras (fc0d).",f5));
            PdfPCell classerist1236 = new PdfPCell(new Phrase(jLabel23.getText()+" kN/cm²",f5));
            classerist1236.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*terceira linha tabela 6*/
            PdfPCell resistacom236 = new PdfPCell(new Phrase("Resistência a Compressão de Cálculo normal as fibras (fc90d).",f5));
            PdfPCell comprdf236 = new PdfPCell(new Phrase(jLabel24.getText()+" kN/cm²",f5));
            comprdf236.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quarta linha tabela 6*/
            PdfPCell pro = new PdfPCell(new Phrase("Resistência a Compressão a "+jLabel12.getText()+"° com as fibras (fc"+jLabel12.getText()+"d)",f5));
            PdfPCell df = new PdfPCell(new Phrase(rescomcal2.getText()+" kN/cm²",f5));
            df.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*quarta linha tabela 6*/
            PdfPCell propriedad1236 = new PdfPCell(new Phrase("Resistência ao Cisalhamento paralelo as fibras (fv0d). ",f5));
            PdfPCell dfdfdfd236 = new PdfPCell(new Phrase(resutcis.getText()+" kN/cm²",f5));
            dfdfdfd236.setHorizontalAlignment(Element.ALIGN_CENTER);
            /*adicionadno imagem*/

            /*adicionando as celulas na tabela 6*/
            float columnWidth6[] = {30,120,60};
            table6.setWidths(columnWidth6);
            table6.setWidthPercentage(80);
            table6.addCell(Classecarre361);
            table6.addCell(Classecarre36);
            table6.addCell(classecarre136);
            table6.addCell(classerist1236);
            table6.addCell(resistacom236);
            table6.addCell(comprdf236);
            table6.addCell(pro);
            table6.addCell(df);
            table6.addCell(propriedad1236);
            table6.addCell(dfdfdfd236);
            
             /*Tabela de peças de madeira*/
            PdfPTable table8 = new PdfPTable(2);
            /*construindo as celulas da tabela 6*/
      
            /*primeira linha tabela 8*/
            PdfPCell Classecarre3678 = new PdfPCell(new Phrase("Resistência do Entalhe a Tensão Normal",f4));
            Classecarre3678.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre3678.setColspan(2);
            Classecarre3678.setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            /*segunda linha tabela 8*/
            PdfPCell classecarre13678 = new PdfPCell(new Phrase("Resistência a Compressão a "+jLabel12.getText()+"° parela as fibras (fc"+jLabel12.getText()+"d)",f5));
            PdfPCell classerist123678 = new PdfPCell(new Phrase(rescomcal2.getText()+" kN/cm²",f5));
            classerist123678.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*segunda linha tabela 8*/
            PdfPCell cla = new PdfPCell(new Phrase("Tensão de Compressão Solicitante",f5));
            PdfPCell clas = new PdfPCell(new Phrase(tensaon.getText()+" kN/cm²",f5));
            clas.setHorizontalAlignment(Element.ALIGN_CENTER);
  
            /*segunda linha tabela 8*/
            PdfPCell cla1 = new PdfPCell(new Phrase(jLabel25.getText(),f5));
            if("Resistência < Solicitante".equals(jLabel25.getText())){
                cla1.setBackgroundColor(BaseColor.RED);
            }else{
                cla1.setBackgroundColor(BaseColor.BLUE);
            }
            cla1.setColspan(2);
            cla1.setHorizontalAlignment(Element.ALIGN_CENTER);
  
            /*adicionando as celulas na tabela 7*/
            float columnWidth8[]={100f,100f};
            table8.setTotalWidth(columnWidth1);
            table8.addCell(Classecarre3678);
            table8.addCell(classecarre13678);
            table8.addCell(classerist123678);
            table8.addCell(cla);
            table8.addCell(clas);
            table8.addCell(cla1);
            
             /*construindo tabela 9*/
            
             /*Tabela de peças de madeira*/
            PdfPTable table9 = new PdfPTable(2);
            /*construindo as celulas da tabela 6*/
            
          
            /*primeira linha tabela 9*/
            PdfPCell Classecarre36789 = new PdfPCell(new Phrase("Resistência do Entalhe a Tensão Cisalhante",f4));
            Classecarre36789.setColspan(2);
            Classecarre36789.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre36789.setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            /*segunda linha tabela 9*/
            PdfPCell classecarre136789 = new PdfPCell(new Phrase("Resistência ao Cisalhamento paralelo as fibras (fv0d)",f5));
            classecarre136789.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell classerist1236789 = new PdfPCell(new Phrase(resutcis.getText()+" kN/cm²",f5));
            classerist1236789.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*terceira linha tabela 9*/
            PdfPCell resistacom236789 = new PdfPCell(new Phrase("Tensão de Cisalhamento Solicitante ",f5));
            resistacom236789.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell comprdf236789 = new PdfPCell(new Phrase(tdcis.getText()+" kN/cm²",f5));
            comprdf236789.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            PdfPCell resista = new PdfPCell(new Phrase(jLabel27.getText(),f5));
            if("Resistência < Solicitante".equals(jLabel27.getText())){
                resista.setBackgroundColor(BaseColor.RED);
            }else{
                resista.setBackgroundColor(BaseColor.BLUE);
            }
            resista.setColspan(2);
            resista.setHorizontalAlignment(Element.ALIGN_CENTER);
            
    
            /*adicionando as celulas na tabela 9*/
            table9.setHorizontalAlignment(Element.ALIGN_CENTER);
            table9.setWidthPercentage(85);
            table9.addCell(Classecarre36789);
            table9.addCell(classecarre136789);
            table9.addCell(classerist1236789);
            table9.addCell(resistacom236789);
            table9.addCell(comprdf236789);
            table9.addCell(resista);
            
            
            /*incluindo items no documento*/
            documento.add(titulo);
            documento.add(espaçamento1);
            String imagemcorte = null;
            imagemcorte = "C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\ligentalhe.JPG";
            try {
                com.itextpdf.text.Image hei = com.itextpdf.text.Image.getInstance(imagemcorte);
                hei.scaleAbsolute(300,150);

                float x = (PageSize.A4.getWidth()-hei.getScaledWidth())/2;
                hei.setAlignment((int) x);
                documento.add(hei);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setAbsolutePosition(500, TOP_ALIGNMENT);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);
                heip.setAlignment(Element.ALIGN_RIGHT);
                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setRotationDegrees(180);
                heip.setAbsolutePosition(0,PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);

                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            parágrafo1.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo1);
            documento.add(espaçamento1);
            documento.add(table1);
            documento.add(espaçamento1);
            parágrafo2.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo2);
            documento.add(espaçamento1);
            documento.add(table2);
            documento.add(espaçamento1);
            parágrafo3.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo3);
            documento.add(espaçamento1);
            documento.add(table3);
            documento.add(espaçamento1);
            documento.add(espaçamento1);
            parágrafo4.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo4);
            documento.add(espaçamento1);
            documento.add(table4);
            documento.add(espaçamento1);
            documento.add(table5);
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setAbsolutePosition(500, TOP_ALIGNMENT);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);
                heip.setAlignment(Element.ALIGN_RIGHT);
                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setRotationDegrees(180);
                heip.setAbsolutePosition(0,PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);

                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            documento.add(espaçamento1);
            parágrafo6.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo6);
            documento.add(espaçamento1);
            documento.add(table6);         
            documento.add(espaçamento1);
            documento.add(table8);         
            documento.add(espaçamento1);
            documento.add(table9);         
            documento.add(espaçamento1);

        } catch (FileNotFoundException | DocumentException ex) {
            System.out.println("error");
        }finally{
            documento.close();
        }
        try {
            Desktop.getDesktop().open(new File("Memorial de Cálculo Entalhe Inclinado.pdf"));
        } catch (IOException ex) {
            Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jLabel28MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel28MouseClicked
        if(chapametal.isSelected()){
        jPanel1.setVisible(true);
        escolhachapas.setVisible(false);
        soparafuso.setVisible(true);
        pregoeparafuso.setVisible(false);
        Escolhamadeira.setVisible(false);
        Entalheresult.setVisible(false);
        escolhadacarga.setVisible(false);
        Resultadoparafuso.setVisible(false);
        Resultadoparafuso1.setVisible(false);
        resultadosdospregos.setVisible(false);
        Resultadoparafuso.setVisible(false);
        }
        if(jRadioButton2.isSelected()){
        jPanel1.setVisible(true);
        escolhachapas.setVisible(false);
        soparafuso.setVisible(false);
        pregoeparafuso.setVisible(true);
        Escolhamadeira.setVisible(false);
        Entalheresult.setVisible(false);
        escolhadacarga.setVisible(false);
        Resultadoparafuso.setVisible(false);
        Resultadoparafuso1.setVisible(false);
        resultadosdospregos.setVisible(false);
        Resultadoparafuso.setVisible(false); 
        }
    }//GEN-LAST:event_jLabel28MouseClicked

    private void ligpregoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ligpregoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ligpregoActionPerformed

    private void jLabel29MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel29MouseClicked
        jPanel1.setVisible(true);
        escolhachapas.setVisible(false);
        soparafuso.setVisible(false);
        pregoeparafuso.setVisible(false);
        Escolhamadeira.setVisible(false);
        Entalheresult.setVisible(false);
        escolhadacarga.setVisible(false);
        Resultadoparafuso1.setVisible(false);
        resultadosdospregos.setVisible(false);
        Resultadoparafuso.setVisible(true);
    }//GEN-LAST:event_jLabel29MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         Document documento = new Document();
        DecimalFormat fe = new DecimalFormat("0.00");
        try {
            PdfWriter.getInstance(documento,new FileOutputStream("Memorial de Cálculo Entalhe inclinado.pdf"));
            documento.open();
            documento.newPage();
            documento.setPageSize(PageSize.A4);

            documento.setMargins(85f, 85f, 85f, 85f);
            documento.addCreator("Matheus Felipe de Oliveira Lemos");
            documento.addTitle("Memorial de Cálculo");
            documento.addCreator("Matheus Felipe de Oliveira Lemos");
            documento.addLanguage("Português");
            documento.addKeywords("Ligações,Madeira,Resistência,Solicitação");
            Font f3 = new Font(Font.FontFamily.TIMES_ROMAN, 14f, Font.BOLD);
            Font f4 = new Font(Font.FontFamily.TIMES_ROMAN, 12f, Font.BOLD);
            f4.setColor(BaseColor.WHITE);
            Font f5 = new Font(Font.FontFamily.TIMES_ROMAN, 12f, Font.NORMAL);
            Font f6 = new Font(Font.FontFamily.TIMES_ROMAN, 12f, Font.BOLD);
            Font f8 = new Font(Font.FontFamily.HELVETICA, 12f, Font.NORMAL);
            Paragraph titulo = new Paragraph();
            /*Título principal */
            titulo.setFont(f3);
            titulo.setAlignment(Element.ALIGN_CENTER);
            titulo.add("Memorial de Cálculo Entalhe Inclinado\n");
            /*Parágrafo primeiro*/
            Paragraph parágrafo1= new Paragraph();
            parágrafo1.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo1.setFont(f6);
            parágrafo1.add("Características das Propriedades da Madeira (De acordo com a Norma NBR 7190/1997).");
            /*espaçamento 1*/
            Paragraph espaçamento1 = new Paragraph();
            for (int i = 0; i < 20; i++) {
                espaçamento1.add(new Chunk(" "));
            }
            /*espaçamento 2*/
            Paragraph espaçamento2 = new Paragraph();
            for (int i = 0; i < 20; i++) {
                espaçamento2.add(new Chunk(" "));
            }
            /*espaçamento 3*/
            Paragraph espaçamento3 = new Paragraph();
            for (int i = 0; i < 1500; i++) {
                espaçamento3.add(new Chunk(" "));
            }
            /*Tabela de Propriedades da Madeira*/
            PdfPTable table1 = new PdfPTable(2);
            /*construindo as celulas da tabela*/
            String categoria1 = "";
            if (seldico.isSelected()){
                categoria1 = "Dicotiledônea";
            }
            if(selco.isSelected()){
                categoria1 = "Conífera";
            }
            PdfPCell propriedad = new PdfPCell(new Phrase("Propriedade da Madeira",f4));
            propriedad.setHorizontalAlignment(Element.ALIGN_CENTER);
            propriedad.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell categoria = new PdfPCell(new Phrase(categoria1,f4));
            categoria.setHorizontalAlignment(Element.ALIGN_CENTER);
            categoria.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell classerist = new PdfPCell(new Phrase("Classe de Resistência",f5));
            PdfPCell classerist1 = new PdfPCell(new Phrase("C"+resfc0k.getText(),f5));
            classerist1.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell resistacom = new PdfPCell(new Phrase("Resistência Característica a Compressão Paralela as fibras.",f5));
            PdfPCell comprdf = new PdfPCell(new Phrase(resfc0k.getText()+" MPa",f5));
            comprdf.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell propriedad1 = new PdfPCell(new Phrase("Resistência Característica a Compressão Normal as fibras.",f5));
            PdfPCell dfdfdfd = new PdfPCell(new Phrase(jLabel21.getText()+" MPa",f5));
            dfdfdfd.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell propriedad2 = new PdfPCell(new Phrase("Resistência Característica ao Cisalhamento Paralelo as fibras",f5));
            PdfPCell propriedad3= new PdfPCell(new Phrase(jLabel26.getText()+" MPa",f5));
            propriedad3.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell celulaNome2 = new PdfPCell(new Phrase("Valor médio do módulo de elasticidade na compressão paralela às fibras",f5));
            PdfPCell celulaSexo2 = new PdfPCell(new Phrase(resecom.getText()+" MPa",f5));
            celulaSexo2 .setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell celulaSexo12 = new PdfPCell(new Phrase("Densidade básica",f5));
            PdfPCell celulaSexo121 = new PdfPCell(new Phrase(jLabel22.getText()+"MPa",f5));
            celulaSexo121.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell densidade1 = new PdfPCell(new Phrase("Densidade aparente",f5));
            PdfPCell densidade2 = new PdfPCell(new Phrase(respapa.getText()+" MPA",f5));
            densidade2.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell umidade = new PdfPCell(new Phrase("Umidade",f5));
            PdfPCell umidade2 = new PdfPCell(new Phrase("12%",f5));
            umidade2.setHorizontalAlignment(Element.ALIGN_CENTER);
            /*adicionando as celulas na tabela*/
            float columnWidth[]={300f,100f};
            table1.setTotalWidth(columnWidth);
            table1.addCell(propriedad);
            table1.addCell(categoria);
            table1.addCell(classerist);
            table1.addCell(classerist1);
            table1.addCell(resistacom );
            table1.addCell(comprdf);
            table1.addCell(propriedad1);
            table1.addCell(dfdfdfd);
            table1.addCell(propriedad2);
            table1.addCell(propriedad3);
            table1.addCell(celulaNome2);
            table1.addCell(celulaSexo2);
            table1.addCell(celulaSexo12);
            table1.addCell(celulaSexo121);
            table1.addCell(densidade1);
            table1.addCell(densidade2);
            table1.addCell(umidade);
            table1.addCell(umidade2);
            /*terminar a tabela*/

            /*segunda parte do memorial*/
            /*Parágrafo segundo*/
            Paragraph parágrafo2= new Paragraph();
            parágrafo2.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo2.setFont(f6);
            parágrafo2.add("Caracterização da Madeira e coeficiente de Modificação (De acordo com a Norma NBR 7190/1997).");
            /*construindo tabela 2*/

            /*Tabela de Propriedades da Madeira*/
            PdfPTable table2 = new PdfPTable(2);
            /*construindo as celulas da tabela*/

            /*primeira linha tabela 2*/
            PdfPCell Classecarre = new PdfPCell(new Phrase("Especificações para Modificação",f4));
            Classecarre.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell tipodemad = new PdfPCell(new Phrase("Madeira",f4));
            tipodemad.setBackgroundColor(new BaseColor(223,104,4));
            tipodemad.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*segunda linha tabela 2*/
            PdfPCell classecarre1 = new PdfPCell(new Phrase("Classe de Carregamento",f5));
            String classefdv = jComboBox10.getSelectedItem().toString();
            PdfPCell classerist12 = new PdfPCell(new Phrase(classefdv,f5));
            classerist12.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*terceira linha tabela 2*/
            PdfPCell resistacom2 = new PdfPCell(new Phrase("Tipo de Madeira",f5));
            String resistac = jComboBox9.getSelectedItem().toString();
            PdfPCell comprdf2 = new PdfPCell(new Phrase(resistac,f5));
            comprdf2.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quarta linha tabela 2*/
            PdfPCell propriedad12 = new PdfPCell(new Phrase("Categoria da Madeira",f5));
            String propd = jComboBox15.getSelectedItem().toString();
            PdfPCell dfdfdfd2 = new PdfPCell(new Phrase(propd,f5));
            dfdfdfd2.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quinta linha tabela 2*/
            PdfPCell propriedad22 = new PdfPCell(new Phrase("Classe de Umidade da Madeira",f5));
            String propd1 = jComboBox13.getSelectedItem().toString();
            PdfPCell propriedad32= new PdfPCell(new Phrase(propd1,f5));
            propriedad32.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*sexta linha tabela 2*/
            PdfPCell celulaNome22 = new PdfPCell(new Phrase("kmod1",f5));
            PdfPCell celulaSexo22 = new PdfPCell(new Phrase(resulkmod8.getText(),f5));
            celulaSexo22.setHorizontalAlignment(Element.ALIGN_CENTER);

            /* setima linha tabela 2*/
            PdfPCell celulaSexo122 = new PdfPCell(new Phrase("kmod2",f5));
            PdfPCell celulaSexo1212 = new PdfPCell(new Phrase(resulkmod9.getText(),f5));
            celulaSexo1212.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*oitava linha tabela 2*/
            PdfPCell densidade12 = new PdfPCell(new Phrase("kmod3",f5));
            PdfPCell densidade22 = new PdfPCell(new Phrase(resulkmod10.getText(),f5));
            densidade22.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*nona linha tabela 2*/
            PdfPCell umidade21 = new PdfPCell(new Phrase("kmod = kmod1*kmod2*kmod3",f5));
            PdfPCell umidade22 = new PdfPCell(new Phrase(resulkmod11.getText(),f5));
            umidade22.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*adicionando as celulas na tabela 2*/
            float columnWidth1[]={300f,100f};
            table2.setWidthPercentage(70);

            table2.addCell(Classecarre);
            table2.addCell(tipodemad);
            table2.addCell(classecarre1);
            table2.addCell(classerist12);
            table2.addCell(resistacom2);
            table2.addCell(comprdf2);
            table2.addCell(propriedad12);
            table2.addCell(dfdfdfd2);
            table2.addCell(propriedad22);
            table2.addCell(propriedad32);
            table2.addCell(celulaNome22);
            table2.addCell(celulaSexo22);
            table2.addCell(celulaSexo122);
            table2.addCell(celulaSexo1212);
            table2.addCell(densidade12);
            table2.addCell(densidade22);
            table2.addCell(umidade21);
            table2.addCell(umidade22);

            /*terceira parte do memorial*/
            /*Parágrafo terceira*/
            Paragraph parágrafo3= new Paragraph();
            parágrafo3.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo3.setFont(f6);
            parágrafo3.add("Dimensões das Peças de Madeira.");

            /*construindo tabela 3*/

            /*Tabela de peças de madeira*/
            PdfPTable table3 = new PdfPTable(2);
            /*construindo as celulas da tabela*/

            /*primeira linha tabela 3*/
            PdfPCell Classecarre3 = new PdfPCell(new Phrase("Peças de Madeira",f4));
            Classecarre3.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre3.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell tipodemad53 = new PdfPCell(new Phrase("Madeira",f4));
            tipodemad53.setBackgroundColor(new BaseColor(223,104,4));
            tipodemad53.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*segunda linha tabela 3*/

            PdfPCell classecarre13 = new PdfPCell(new Phrase("Comprimento mínimo (a)",f5));
            PdfPCell classerist123 = new PdfPCell(new Phrase(jTextField2.getText()+" cm",f5));
            classerist123.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*terceira linha tabela 3*/
            PdfPCell resistacom23 = new PdfPCell(new Phrase("Penetração do Banzo Superior (d)",f5));
            PdfPCell comprdf23 = new PdfPCell(new Phrase(jTextField3.getText()+" cm",f5));
            comprdf23.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quarta linha tabela 3*/
            PdfPCell propriedad123 = new PdfPCell(new Phrase("Largura dos Banzos (b)",f5));
            PdfPCell dfdfdfd23 = new PdfPCell(new Phrase(jTextField4.getText()+" cm",f5));
            dfdfdfd23.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*sexta linha tabela 3*/
            PdfPCell celulaNome223 = new PdfPCell(new Phrase("Altura do banzo inferior (hi)",f5));
            PdfPCell celulaSexo223 = new PdfPCell(new Phrase(jTextField6.getText()+" cm",f5));
            celulaSexo223.setHorizontalAlignment(Element.ALIGN_CENTER);

            /* setima linha tabela 3*/
            PdfPCell celulaSexo1223 = new PdfPCell(new Phrase("Altura do banzo superior (hf)",f5));
            PdfPCell celulaSexo12123 = new PdfPCell(new Phrase(jTextField7.getText()+" cm",f5));
            celulaSexo12123.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*oitava linha tabela */
            PdfPCell densidade123 = new PdfPCell(new Phrase("Ângulo entre os banzos (alfa)",f5));
            PdfPCell densidade223 = new PdfPCell(new Phrase(jTextField5.getText()+"°",f5));
            densidade223.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*adicionando as celulas na tabela 3*/
            float columnWidth3[]={300f,100f};
            table3.setWidthPercentage(50);
            table3.setTotalWidth(columnWidth1);
            table3.addCell(Classecarre3);
            table3.addCell(tipodemad53);
            table3.addCell(classecarre13);
            table3.addCell(classerist123);
            table3.addCell(resistacom23);
            table3.addCell(comprdf23);
            table3.addCell(propriedad123);
            table3.addCell(dfdfdfd23);
            table3.addCell(celulaNome223);
            table3.addCell(celulaSexo223);
            table3.addCell(celulaSexo1223);
            table3.addCell(celulaSexo12123);
            table3.addCell(densidade123);
            table3.addCell(densidade223);

            /*Quarta parte do memorial*/
            /*Parágrafo quarto*/
            Paragraph parágrafo4= new Paragraph();
            parágrafo4.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo4.setFont(f6);
            parágrafo4.add("Combinação de Ações. (Combinação Normal, Desfavorável).");

            /*construindo tabela 4*/

            /*Tabela de peças de madeira*/
            PdfPTable table4 = new PdfPTable(3);
            /*construindo as celulas da tabela*/

            /*primeira linha tabela 4*/
            PdfPCell Classecarre34 = new PdfPCell(new Phrase("Ações",f4));
            Classecarre34.setHorizontalAlignment(Element.ALIGN_CENTER);
            Classecarre34.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell tipodemad534 = new PdfPCell(new Phrase("Característica",f4));
            tipodemad534.setHorizontalAlignment(Element.ALIGN_CENTER);
            tipodemad534.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell classecarre134 = new PdfPCell(new Phrase("Valor(kN)",f4));
            classecarre134.setHorizontalAlignment(Element.ALIGN_CENTER);
            classecarre134.setBackgroundColor(new BaseColor(223,104,4));

            /*segunda linha tabela 4*/
            PdfPCell classerist1234 = new PdfPCell(new Phrase("Ações Permanentes",f5));
            classerist1234.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell tipodemad5341 = new PdfPCell(new Phrase(Tipodevariabilidade.getSelectedItem().toString(),f5));
            tipodemad5341.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell classecarre1341 = new PdfPCell(new Phrase(permanente.getText(),f5));
            classecarre1341.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*terceira linha tabela 4*/
            PdfPCell resistacom234 = new PdfPCell(new Phrase("Ações Variáveis (Sobrecarga)",f5));
            PdfPCell comprdf234 = new PdfPCell(new Phrase(variavel.getSelectedItem().toString(),f5));
            comprdf234.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell propriedad1234 = new PdfPCell(new Phrase(sobrecarga.getText(),f5));
            propriedad1234.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quarta linha tabela 4*/
            PdfPCell dfdfdfd234 = new PdfPCell(new Phrase("Vento",f5));
            dfdfdfd234.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell propriedad2234 = new PdfPCell(new Phrase(variavel.getSelectedItem().toString(),f5));
            PdfPCell propriedad3234= new PdfPCell(new Phrase(vento.getText(),f5));
            propriedad3234.setHorizontalAlignment(Element.ALIGN_CENTER);
         
            /*quarta linha tabela 4*/
            PdfPCell lin4col1tab4 = new PdfPCell(new Phrase("Força Majorada pela Combinação Sobrecarga Ação Variável Principal",f5));
            lin4col1tab4.setColspan(2);
            lin4col1tab4.setHorizontalAlignment(Element.ALIGN_LEFT);
            PdfPCell lin4col2tab4 = new PdfPCell(new Phrase(resultperma2.getText()+" kN",f5));
            lin4col2tab4.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*quinta linha tabela 4*/
            PdfPCell lin5col1tab4 = new PdfPCell(new Phrase("Força Majorada pela Combinação Vento como Ação Variável Principal",f5));
            lin5col1tab4.setColspan(2);
            lin5col1tab4.setHorizontalAlignment(Element.ALIGN_LEFT);
            PdfPCell lin5col2tab4 = new PdfPCell(new Phrase(resultvent2.getText()+" kN",f5));
            lin5col2tab4.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*adicionando as celulas na tabela 4*/
            float columnWidth4[]={100f,100f,100f};
            table4.setTotalWidth(columnWidth4);
            table4.addCell(Classecarre34);
            table4.addCell(tipodemad534);
            table4.addCell(classecarre134);
            table4.addCell(classerist1234);
            table4.addCell(tipodemad5341);
            table4.addCell(classecarre1341 );
            table4.addCell(resistacom234);
            table4.addCell(comprdf234);
            table4.addCell(propriedad1234);
            table4.addCell(dfdfdfd234);
            table4.addCell(propriedad2234);
            table4.addCell(propriedad3234);
            table4.addCell(lin4col1tab4);
            table4.addCell(lin4col2tab4);
            table4.addCell(lin5col1tab4);
            table4.addCell(lin5col2tab4);

             /*Quinta parte do memorial*/
            /*Parágrafo Quinto*/
            Paragraph parágrafo5= new Paragraph();
            parágrafo5.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo5.setFont(f6);
            parágrafo5.add("Fatores de Utilização");

            /*construindo tabela 5*/

            /*Tabela de peças de madeira*/
            PdfPTable table5 = new PdfPTable(2);
            /*construindo as celulas da tabela*/

            /*primeira linha tabela 5*/
            PdfPCell Classecarre35 = new PdfPCell(new Phrase("Fatores de Utilização",f4));
            Classecarre35.setHorizontalAlignment(Element.ALIGN_CENTER);
            Classecarre35.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell tipodemad535 = new PdfPCell(new Phrase("Adotado",f4));
            tipodemad535.setHorizontalAlignment(Element.ALIGN_CENTER);
            tipodemad535.setBackgroundColor(new BaseColor(223,104,4));

            /*segunda linha tabela 5*/
            PdfPCell classecarre135 = new PdfPCell(new Phrase("Ações em Estruturas Correntes",f5));
            PdfPCell classerist1235 = new PdfPCell(new Phrase(acoescorrentes.getSelectedItem().toString(),f5));

            /*terceira linha tabela 5*/
            PdfPCell resistacom235 = new PdfPCell(new Phrase("Cargas Acidentais dos Edifícios ",f5));
            /*Cargas acidentais dos edifícios*/
            String h1 = null;
            String aci = cargasacid.getSelectedItem().toString();
            if("Não há pred. de Equipamentos Fixos nem de el. concentr".equals(aci)){
                h1 = "Locais em que não há predominância de pesos de equipamentos fixos,ou de elevadas concentrações de pessoas";
            }
            if("Há pred. de Equipamentos Fixos ou de elev. Concentração.".equals(aci)){
                h1 = "Locais onde há predominância de pesos de equipamentos fixos, ou de elevadas concentrações de pessoas";
            }
            if("Bibliotecas, arquivos, oficinas ou garagens".equals(aci)){
                h1 = "Bibliotecas, arquivos, oficinas e garagens";
            }
            PdfPCell comprdf235 = new PdfPCell(new Phrase(h1,f5));

            /*adicionando as celulas na tabela 5*/
            table5.addCell(Classecarre35);
            table5.addCell(tipodemad535);
            table5.addCell(classecarre135);
            table5.addCell(classerist1235);
            table5.addCell(resistacom235);
            table5.addCell(comprdf235);
            
             /*Sexta parte do memorial*/
            /*Parágrafo quarto*/
            Paragraph parágrafo6= new Paragraph();
            parágrafo6.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo6.setFont(f6);
            parágrafo6.add("Parâmetros de Cálculo do Entalhe.");

            /*construindo tabela 6*/

            /*Tabela de peças de madeira*/
            PdfPTable table6 = new PdfPTable(3);
            /*construindo as celulas da tabela 6*/

            /*primeira linha tabela 6*/
            PdfPCell Classecarre361 = new PdfPCell(new Phrase("Parâmetros de Cálculo para a Madeira Principal",f4));
            Classecarre361.setRowspan(5);
            try {
                com.itextpdf.text.Image hei = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\imagemtexturamadeira.jpg");

                Classecarre361.setImage(hei);
                Classecarre361.setVerticalAlignment(Element.ALIGN_MIDDLE);
                Classecarre361.setHorizontalAlignment(Element.ALIGN_CENTER);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            Classecarre361.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*primeira linha tabela 6*/
            PdfPCell Classecarre36 = new PdfPCell(new Phrase("Parâmetros de Resistência para a Madeira",f4));
            Classecarre36.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre36.setColspan(2);
            Classecarre36.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*segunda linha tabela 6*/
            PdfPCell classecarre136 = new PdfPCell(new Phrase("Resistência de Compressão paralela as fibras (fc0d).",f5));
            PdfPCell classerist1236 = new PdfPCell(new Phrase(jLabel23.getText()+" kN/cm²",f5));
            classerist1236.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*terceira linha tabela 6*/
            PdfPCell resistacom236 = new PdfPCell(new Phrase("Resistência ao Compressão normal as fibras (fc90d).",f5));
            PdfPCell comprdf236 = new PdfPCell(new Phrase(jLabel24.getText()+" kN/cm²",f5));
            comprdf236.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quarta linha tabela 6*/
            PdfPCell pro = new PdfPCell(new Phrase("Resistência a Compressão a "+jLabel12.getText()+"° paralela as fibras (fc"+jLabel12.getText()+"d)",f5));
            PdfPCell df = new PdfPCell(new Phrase(rescomcal2.getText()+" kN/cm²",f5));
            df.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*quarta linha tabela 6*/
            PdfPCell propriedad1236 = new PdfPCell(new Phrase("Resistência ao Cisalhamento paralelo as fibras (fv0d). ",f5));
            PdfPCell dfdfdfd236 = new PdfPCell(new Phrase(resutcis.getText()+" kN/cm²",f5));
            dfdfdfd236.setHorizontalAlignment(Element.ALIGN_CENTER);
            /*adicionadno imagem*/

            /*adicionando as celulas na tabela 6*/
            float columnWidth6[] = {30,120,60};
            table6.setWidths(columnWidth6);
            table6.setWidthPercentage(80);
            table6.addCell(Classecarre361);
            table6.addCell(Classecarre36);
            table6.addCell(classecarre136);
            table6.addCell(classerist1236);
            table6.addCell(resistacom236);
            table6.addCell(comprdf236);
            table6.addCell(pro);
            table6.addCell(df);
            table6.addCell(propriedad1236);
            table6.addCell(dfdfdfd236);
            
             /*Tabela de peças de madeira*/
            PdfPTable table8 = new PdfPTable(2);
            /*construindo as celulas da tabela 6*/
      
            /*primeira linha tabela 8*/
            PdfPCell Classecarre3678 = new PdfPCell(new Phrase("Resistência do Entalhe a Tensão Normal",f4));
            Classecarre3678.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre3678.setColspan(2);
            Classecarre3678.setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            /*segunda linha tabela 8*/
            PdfPCell classecarre13678 = new PdfPCell(new Phrase("Resistência a Compressão a "+jLabel12.getText()+"° parela as fibras (fc"+jLabel12.getText()+"d)",f5));
            PdfPCell classerist123678 = new PdfPCell(new Phrase(rescomcal2.getText()+" kN/cm²",f5));
            classerist123678.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*segunda linha tabela 8*/
            PdfPCell cla = new PdfPCell(new Phrase("Tensão de Compressão Solicitante",f5));
            PdfPCell clas = new PdfPCell(new Phrase(tensaon.getText()+" kN/cm²",f5));
            clas.setHorizontalAlignment(Element.ALIGN_CENTER);
  
            /*segunda linha tabela 8*/
            PdfPCell cla1 = new PdfPCell(new Phrase(jLabel25.getText(),f5));
            if("Resistência < Solicitante".equals(jLabel25.getText())){
                cla1.setBackgroundColor(BaseColor.RED);
            }else{
                cla1.setBackgroundColor(BaseColor.BLUE);
            }
            cla1.setColspan(2);
            cla1.setHorizontalAlignment(Element.ALIGN_CENTER);
  
            /*adicionando as celulas na tabela 7*/
            float columnWidth8[]={100f,100f};
            table8.setTotalWidth(columnWidth1);
            table8.addCell(Classecarre3678);
            table8.addCell(classecarre13678);
            table8.addCell(classerist123678);
            table8.addCell(cla);
            table8.addCell(clas);
            table8.addCell(cla1);
            
             /*construindo tabela 9*/
            
             /*Tabela de peças de madeira*/
            PdfPTable table9 = new PdfPTable(2);
            /*construindo as celulas da tabela 6*/
            
          
            /*primeira linha tabela 9*/
            PdfPCell Classecarre36789 = new PdfPCell(new Phrase("Resistência do Entalhe a Tensão Cisalhante",f4));
            Classecarre36789.setColspan(2);
            Classecarre36789.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre36789.setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            /*segunda linha tabela 9*/
            PdfPCell classecarre136789 = new PdfPCell(new Phrase("Resistência ao Cisalhamento paralelo as fibras (fv0d)",f5));
            classecarre136789.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell classerist1236789 = new PdfPCell(new Phrase(resutcis.getText()+" kN/cm²",f5));
            classerist1236789.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*terceira linha tabela 9*/
            PdfPCell resistacom236789 = new PdfPCell(new Phrase("Tensão de Cisalhamento Solicitante ",f5));
            resistacom236789.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell comprdf236789 = new PdfPCell(new Phrase(tdcis.getText()+" kN/cm²",f5));
            comprdf236789.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            PdfPCell resista = new PdfPCell(new Phrase(jLabel27.getText(),f5));
            if("Resistência < Solicitante".equals(jLabel27.getText())){
                resista.setBackgroundColor(BaseColor.RED);
            }else{
                resista.setBackgroundColor(BaseColor.BLUE);
            }
            resista.setColspan(2);
            resista.setHorizontalAlignment(Element.ALIGN_CENTER);
            
    
            /*adicionando as celulas na tabela 9*/
            table9.setHorizontalAlignment(Element.ALIGN_CENTER);
            table9.setWidthPercentage(85);
            table9.addCell(Classecarre36789);
            table9.addCell(classecarre136789);
            table9.addCell(classerist1236789);
            table9.addCell(resistacom236789);
            table9.addCell(comprdf236789);
            table9.addCell(resista);
            
            /*Tabela de Propriedades da Madeira da Chapa*/
            PdfPTable table10 = new PdfPTable(2);
            /*linha um tabela 10*/
            PdfPCell li1col1tab10 = new PdfPCell(new Phrase("Propriedades da Chapa de Madeira e Parafuso",f4));
            li1col1tab10.setColspan(2);
            li1col1tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
            li1col1tab10.setBackgroundColor(new BaseColor(223,104,4));
            
            /*linha 2 tabela 10*/
            PdfPCell li2col1tab10 = new PdfPCell(new Phrase("Madeira",f5));
            String madeira = null;
            if(seldico1.isSelected()){
                madeira = "Dicotiledônea";
            }
            if(selco1.isSelected()){
                madeira = "Conífera";
            }
            PdfPCell li2col2tab10 = new PdfPCell(new Phrase(madeira,f5));
            li2col2tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*linha 3 tabela 10*/
            
            PdfPCell li3col1tab10 = new PdfPCell(new Phrase("Classe de Resistência",f5));
            String resist = null;
            if(seldico1.isSelected()){
                resist = jComboBox4.getSelectedItem().toString();
            }
            if(selco1.isSelected()){
                resist = jComboBox3.getSelectedItem().toString();
            }
            PdfPCell li3col2tab10 = new PdfPCell(new Phrase(resist,f5));
            li3col2tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
      
            /*linha 4 tabela 10*/
            PdfPCell li4col1tab10 = new PdfPCell(new Phrase("Tipo de madeira",f5));
            PdfPCell li4col2tab10 = new PdfPCell(new Phrase(jComboBox12.getSelectedItem().toString(),f5));
            li4col2tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*linha 5 tabela 10*/
            PdfPCell li5col1tab10 = new PdfPCell(new Phrase("Classe de Umidade",f5));
            PdfPCell li5col2tab10 = new PdfPCell(new Phrase(jComboBox14.getSelectedItem().toString(),f5));
            li5col2tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*linha 6 tabela 10*/
            PdfPCell li6col1tab10 = new PdfPCell(new Phrase("Categoria da Madeira",f5));
            PdfPCell li6col2tab10 = new PdfPCell(new Phrase(jComboBox16.getSelectedItem().toString(),f5));
            li6col2tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*linha 7 tabela 10*/
            PdfPCell li7col1tab10 = new PdfPCell(new Phrase("Kmod",f5));
            PdfPCell li7col2tab10 = new PdfPCell(new Phrase(jLabel39.getText(),f5));
            li7col2tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            
            /*linha 8 tabela 10*/
            String hig = null;
            if("0.95".equals(escopara.getSelectedItem().toString())){
                hig = "";
            }
            if("1.25".equals(escopara.getSelectedItem().toString())){
                hig = "(1/2 pol.)";
            }
            if("1.60".equals(escopara.getSelectedItem().toString())){
                hig = "(5/8 pol.)";
            }
            if("1.90".equals(escopara.getSelectedItem().toString())){
                hig = "(3/4 pol.)";
            }if("2.20".equals(escopara.getSelectedItem().toString())){
                hig = "(7/8 pol.)";
            }
            if("2.50".equals(escopara.getSelectedItem().toString())){
                hig = "(1 pol.)";
            }
            if("3.10".equals(escopara.getSelectedItem().toString())){
                hig = "(1 1/4 pol.)";
            }
            if("3.80".equals(escopara.getSelectedItem().toString())){
                hig = "(1 1/2 pol.)";
            }
            PdfPCell li8col1tab10 = new PdfPCell(new Phrase("Diâmetro do Parafuso",f5));
            PdfPCell li8col2tab10= new PdfPCell(new Phrase(escopara.getSelectedItem()+" mm ou "+hig,f5));
            li8col2tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*linha 9 tabela 10*/
            PdfPCell li9col1tab10 = new PdfPCell(new Phrase("Resistência do Parafuso",f5));
            PdfPCell li9col2tab10 = new PdfPCell(new Phrase("240 MPa",f5));
            li9col2tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*linha 10 certa tabela 10*/
            PdfPCell li10col1tab10 = new PdfPCell(new Phrase("Espessura da Chapa de Madeira",f5));
            PdfPCell li10col2tab10 = new PdfPCell(new Phrase(jTextField9.getText()+" cm",f5));
            li10col2tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
         
            /*adicionando as celulas na tabela*/
            float columnWidth10[]={300f,100f};
            table10.setTotalWidth(columnWidth10);
            table10.addCell(li1col1tab10);
            table10.addCell(li2col1tab10);
            table10.addCell(li2col2tab10);
            table10.addCell(li3col1tab10);
            table10.addCell(li3col2tab10);
            table10.addCell(li4col1tab10);
            table10.addCell(li4col2tab10);
            table10.addCell(li5col1tab10);
            table10.addCell(li5col2tab10);
            table10.addCell(li6col1tab10);
            table10.addCell(li6col2tab10);
            table10.addCell(li7col1tab10);
            table10.addCell(li7col2tab10);
            table10.addCell(li10col1tab10);
            table10.addCell(li10col2tab10);
            table10.addCell(li8col1tab10);
            table10.addCell(li8col2tab10);
            table10.addCell(li9col1tab10);
            table10.addCell(li9col2tab10);
          
            
             /*Sexta parte do memorial*/
            /*Parágrafo quarto*/
            Paragraph parágrafo11= new Paragraph();
            parágrafo11.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo11.setFont(f6);
            parágrafo11.add("Cálculos para dimensionamento da ligação por chapa de Madeira, para este cálculo é necessário verificar a resistência de embutimento da madeira principal pelo parafuso e a resistência da chapa de madeira em contato com o parafuso");
            
            /*Tabela de Verificação do embutimento da madeira principal e Flexão do pino*/
            PdfPTable table11 = new PdfPTable(3);
            
            /*linha 1 tabela 11*/
            PdfPCell li1col1tab11 = new PdfPCell(new Phrase("Verificação do embutimento da chapa de madeira e flexão do Parafuso",f4));
            li1col1tab11.setColspan(3);
            li1col1tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li1col1tab11.setBackgroundColor(new BaseColor(223,104,4));
           
            /*linha 2 tabela 13*/
            PdfPCell li2col1tab11 = new PdfPCell(new Phrase("Resistência ao embutimento da Chapa de Madeira paralelo as fibras (fe0d)",f5));
            li2col1tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col1tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
           
            PdfPCell li2col2tab11 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\equaçãofe0d.JPG"); 
                 li2col2tab11.setImage(hei13);
                 li2col2tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
                 li2col2tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
                 
                 
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            li2col2tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col2tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li2col3tab11 = new PdfPCell(new Phrase(jLabel53.getText()+" kN/cm²",f5));
            li2col3tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col3tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 3 tabela 13*/
            PdfPCell li3col1tab11 = new PdfPCell(new Phrase("Resistência ao embutimento da Madeira normal as fibras (fe90d)",f5));
            li3col1tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col1tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li3col2tab11 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\equacaofe90d.JPG"); 
                 li3col2tab11.setImage(hei13);
                 li3col2tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
                 li3col2tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
                 
                 
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            li3col2tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col2tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li3col3tab11 = new PdfPCell(new Phrase(jLabel54.getText()+" kN/cm²",f5));
            li3col3tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col3tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 4 tabela 13*/
        
            PdfPCell li4col1tab11 = new PdfPCell(new Phrase("Resistência ao embutimento da Madeira paralelo as fibras (fe"+jLabel12.getText()+"d)",f5));
            li4col1tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col1tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li4col2tab11 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\equação em angulo.JPG"); 
                 li4col2tab11.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li4col2tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col2tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li4col3tab11 = new PdfPCell(new Phrase(resutembut2.getText()+" kN/cm²",f5));
            li4col3tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col3tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 5 tabela 13*/
        
            PdfPCell li5col1tab11 = new PdfPCell(new Phrase("Beta (B)",f5));
            li5col1tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col1tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li5col2tab11 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\beta.JPG"); 
                 li5col2tab11.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li5col2tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col2tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li5col3tab11 = new PdfPCell(new Phrase(jLabel55.getText(),f5));
            li5col3tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col3tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 6 tabela 13*/
        
            PdfPCell li6col1tab11 = new PdfPCell(new Phrase("Beta limite (Blim)",f5));
            li6col1tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li6col1tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li6col2tab11 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\betalimite.JPG"); 
                 li6col2tab11.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li6col2tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li6col2tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li6col3tab11 = new PdfPCell(new Phrase(jLabel56.getText(),f5));
            li6col3tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li6col3tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 7 tabela 13*/
          
            PdfPCell li7col1tab11 = new PdfPCell(new Phrase(jLabel65.getText(),f5));
            li7col1tab11.setColspan(3);
            li7col1tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li7col1tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 8 tabela 13*/
            
            PdfPCell li8col1tab11 = new PdfPCell(new Phrase("Resistência de Corte do Parafuso (Rvd,1)",f5));
            li8col1tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li8col1tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li8col2tab11 = new PdfPCell();
            String localarquivo = null;
            if("Beta > Betalimite".equals(jLabel65.getText())){
            localarquivo = "C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\betmaiorres.JPG";    
            }else{
            localarquivo = "C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\betmenorres.JPG";
            }
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance(localarquivo); 
                 li8col2tab11.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li8col2tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li8col2tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li8col3tab11 = new PdfPCell(new Phrase(jLabel67.getText()+" kN",f5));
            li8col3tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li8col3tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
           
            
            /*adicionando as celulas na tabela*/
            
            table11.setWidthPercentage(100);
            table11.addCell(li1col1tab11);
            table11.addCell(li2col1tab11);
            table11.addCell(li2col2tab11);
            table11.addCell(li2col3tab11);
            table11.addCell(li3col1tab11);
            table11.addCell(li3col2tab11);
            table11.addCell(li3col3tab11);
            table11.addCell(li4col1tab11);
            table11.addCell(li4col2tab11);
            table11.addCell(li4col3tab11);
            table11.addCell(li5col1tab11);
            table11.addCell(li5col2tab11);
            table11.addCell(li5col3tab11);
            table11.addCell(li6col1tab11);
            table11.addCell(li6col2tab11);
            table11.addCell(li6col3tab11);
            table11.addCell(li7col1tab11);
            table11.addCell(li8col1tab11);
            table11.addCell(li8col2tab11);
            table11.addCell(li8col3tab11);
            
            /*Tabela verificação para a resistência da madeira principal */
            PdfPTable table13 = new PdfPTable(3);
           
            /*linha um tabela 13*/
            PdfPCell li1col1tab13 = new PdfPCell(new Phrase("Verificações para a Resistência da madeira principal",f4));
            li1col1tab13.setColspan(3);
            li1col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li1col1tab13.setBackgroundColor(new BaseColor(223,104,4));
            
            /*linha 2 tabela 13*/
            PdfPCell li2col1tab13 = new PdfPCell(new Phrase("Resistência ao embutimento da Madeira Principal paralelo as fibras (fe0d)",f5));
            li2col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
           
            PdfPCell li2col2tab13 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\equaçãofe0d.JPG"); 
                 li2col2tab13.setImage(hei13);
                 li2col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
                 li2col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
                 
                 
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            li2col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li2col3tab13 = new PdfPCell(new Phrase(jLabel68.getText()+" kN/cm²",f5));
            li2col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 3 tabela 13*/
            PdfPCell li3col1tab13 = new PdfPCell(new Phrase("Resistência ao embutimento da Madeira normal as fibras (fe90d)",f5));
            li3col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li3col2tab13 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\equacaofe90d.JPG"); 
                 li3col2tab13.setImage(hei13);
                 li3col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
                 li3col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
                 
                 
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            li3col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li3col3tab13 = new PdfPCell(new Phrase(jLabel69.getText()+" kN/cm²",f5));
            li3col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            /*linha 4 tabela 13*/
        
            PdfPCell li4col1tab13 = new PdfPCell(new Phrase("Resistência ao embutimento da Madeira paralelo as fibras (fe"+jLabel12.getText()+"d)",f5));
            li4col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li4col2tab13 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\equação em angulo.JPG"); 
                 li4col2tab13.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li4col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li4col3tab13 = new PdfPCell(new Phrase(resutembut1.getText()+" kN/cm²",f5));
            li4col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 5 tabela 13*/
        
            PdfPCell li5col1tab13 = new PdfPCell(new Phrase("Beta (B)",f5));
            li5col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li5col2tab13 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\beta.JPG"); 
                 li5col2tab13.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li5col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li5col3tab13 = new PdfPCell(new Phrase(jLabel70.getText(),f5));
            li5col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 6 tabela 13*/
        
            PdfPCell li6col1tab13 = new PdfPCell(new Phrase("Beta limite (Blim)",f5));
            li6col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li6col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li6col2tab13 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\betalimite.JPG"); 
                 li6col2tab13.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li6col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li6col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li6col3tab13 = new PdfPCell(new Phrase(jLabel71.getText(),f5));
            li6col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li6col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 7 tabela 13*/
          
            PdfPCell li7col1tab13 = new PdfPCell(new Phrase(jLabel49.getText(),f5));
            li7col1tab13.setColspan(3);
            li7col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li7col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 8 tabela 13*/
            
            PdfPCell li8col1tab13 = new PdfPCell(new Phrase("Resistência de Corte do Parafuso (Rvd,1)",f5));
            li8col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li8col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li8col2tab13 = new PdfPCell();
            String localarquivo1 = null;
            if("Beta > Betalimite".equals(jLabel49.getText())){
            localarquivo1 = "C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\betmaiorres.JPG";    
            }else{
            localarquivo1 = "C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\betmenorres.JPG";
            }
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance(localarquivo); 
                 li8col2tab13.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li8col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li8col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li8col3tab13 = new PdfPCell(new Phrase(jLabel72.getText()+" kN",f5));
            li8col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li8col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
           
            
            /*adicionando as celulas na tabela*/
            
            table13.setWidthPercentage(100);
            table13.addCell(li1col1tab13);
            table13.addCell(li2col1tab13);
            table13.addCell(li2col2tab13);
            table13.addCell(li2col3tab13);
            table13.addCell(li3col1tab13);
            table13.addCell(li3col2tab13);
            table13.addCell(li3col3tab13);
            table13.addCell(li4col1tab13);
            table13.addCell(li4col2tab13);
            table13.addCell(li4col3tab13);
            table13.addCell(li5col1tab13);
            table13.addCell(li5col2tab13);
            table13.addCell(li5col3tab13);
            table13.addCell(li6col1tab13);
            table13.addCell(li6col2tab13);
            table13.addCell(li6col3tab13);
            table13.addCell(li7col1tab13);
            table13.addCell(li8col1tab13);
            table13.addCell(li8col2tab13);
            table13.addCell(li8col3tab13);
            
            /*Cálculo final*/
            PdfPTable table14 = new PdfPTable(2);
           
            /*linha um tabela 14*/
            PdfPCell li1col1tab14 = new PdfPCell(new Phrase("Cálculo Final",f4));
            li1col1tab14.setColspan(2);
            li1col1tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li1col1tab14.setBackgroundColor(new BaseColor(223,104,4));
            
            /*linha 2 tabela 14*/
            PdfPCell li2col1tab14 = new PdfPCell(new Phrase("Força Resistida pelo Entalhe",f5));
            li2col1tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col1tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li2col2tab14 = new PdfPCell(new Phrase(jLabel51.getText()+" kN",f5));
            li2col2tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col2tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 3 tabela 14*/
            
            PdfPCell li3col1tab14 = new PdfPCell(new Phrase("Força solicitante na Chapa e Parafuso",f5));
            li3col1tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col1tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li3col2tab14 = new PdfPCell(new Phrase(frdrecebido.getText()+" kN",f5));
            li3col2tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col2tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 4 tabela 12*/
            
            PdfPCell li4col1tab14 = new PdfPCell(new Phrase("Número mínimo de parafusos em uma seção de Corte",f5));
            li4col1tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col1tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li4col2tab14 = new PdfPCell(new Phrase(numpara1.getText(),f5));
            li4col2tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col2tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 5 tabela 12*/
            
            PdfPCell li5col1tab14 = new PdfPCell(new Phrase("Lembrando que sempre"+
            "será adotado o menor valor de resistência entre Parafuso, Chapa e Madeira para o cálculo do número mínimo de parafusos",f5));
            li5col1tab14.setColspan(2);
            li5col1tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col1tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
           
            /*adicionando as celulas na tabela*/
            table14.setWidthPercentage(100);
            table14.addCell(li1col1tab14);
            table14.addCell(li2col1tab14);
            table14.addCell(li2col2tab14);
            table14.addCell(li3col1tab14);
            table14.addCell(li3col2tab14);
            table14.addCell(li4col1tab14);
            table14.addCell(li4col2tab14);
            table14.addCell(li5col1tab14);
            
            
            
            /*incluindo items no documento*/
            documento.add(titulo);
            documento.add(espaçamento1);
            String imagemcorte = null;
            imagemcorte = "C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\ligentalhechapamad.JPG";
            try {
                com.itextpdf.text.Image hei = com.itextpdf.text.Image.getInstance(imagemcorte);
                hei.scaleAbsolute(300,150);

                float x = (PageSize.A4.getWidth()-hei.getScaledWidth())/2;
                hei.setAlignment((int) x);
                documento.add(hei);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setAbsolutePosition(500, TOP_ALIGNMENT);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);
                heip.setAlignment(Element.ALIGN_RIGHT);
                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setRotationDegrees(180);
                heip.setAbsolutePosition(0,PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);

                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            parágrafo1.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo1);
            documento.add(espaçamento1);
            documento.add(table1);
            documento.add(espaçamento1);
            parágrafo2.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo2);
            documento.add(espaçamento1);
            documento.add(table2);
            documento.add(espaçamento1);
            parágrafo3.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo3);
            documento.add(espaçamento1);
            documento.add(table3);
            documento.add(espaçamento1);
            documento.add(espaçamento1);
            parágrafo4.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo4);
            documento.add(espaçamento1);
            documento.add(table4);
            documento.add(espaçamento1);
            documento.add(table5);
            
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setAbsolutePosition(500, TOP_ALIGNMENT);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);
                heip.setAlignment(Element.ALIGN_RIGHT);
                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setRotationDegrees(180);
                heip.setAbsolutePosition(0,PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);

                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
           
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setAbsolutePosition(500, TOP_ALIGNMENT);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);
                heip.setAlignment(Element.ALIGN_RIGHT);
                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setRotationDegrees(180);
                heip.setAbsolutePosition(0,PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);

                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            documento.add(espaçamento1);
            parágrafo6.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo6);
            documento.add(espaçamento1);
            documento.add(table6);
            documento.add(espaçamento1);
            documento.add(table8);
            documento.add(espaçamento1);
            documento.add(table9);
            documento.add(espaçamento1);
            documento.add(table10);
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setAbsolutePosition(500, TOP_ALIGNMENT);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);
                heip.setAlignment(Element.ALIGN_RIGHT);
                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setRotationDegrees(180);
                heip.setAbsolutePosition(0,PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);

                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            documento.add(espaçamento1);
            documento.add(parágrafo11);
            documento.add(espaçamento1);
            documento.add(table11);
            documento.add(espaçamento1);
            documento.add(table13);
            documento.add(espaçamento1);
            documento.add(table14);
            
        } catch (FileNotFoundException | DocumentException ex) {
            System.out.println("error");
        }finally{
            documento.close();
        }
        try {
            Desktop.getDesktop().open(new File("Memorial de Cálculo Entalhe Inclinado.pdf"));
        } catch (IOException ex) {
            Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
         Document documento = new Document();
        DecimalFormat fe = new DecimalFormat("0.00");
        try {
            PdfWriter.getInstance(documento,new FileOutputStream("Memorial de Cálculo Entalhe inclinado.pdf"));
            documento.open();
            documento.newPage();
            documento.setPageSize(PageSize.A4);

            documento.setMargins(85f, 85f, 85f, 85f);
            documento.addCreator("Matheus Felipe de Oliveira Lemos");
            documento.addTitle("Memorial de Cálculo");
            documento.addCreator("Matheus Felipe de Oliveira Lemos");
            documento.addLanguage("Português");
            documento.addKeywords("Ligações,Madeira,Resistência,Solicitação");
            Font f3 = new Font(Font.FontFamily.TIMES_ROMAN, 14f, Font.BOLD);
            Font f4 = new Font(Font.FontFamily.TIMES_ROMAN, 12f, Font.BOLD);
            f4.setColor(BaseColor.WHITE);
            Font f5 = new Font(Font.FontFamily.TIMES_ROMAN, 12f, Font.NORMAL);
            Font f6 = new Font(Font.FontFamily.TIMES_ROMAN, 12f, Font.BOLD);
            Font f8 = new Font(Font.FontFamily.HELVETICA, 12f, Font.NORMAL);
            Paragraph titulo = new Paragraph();
            /*Título principal */
            titulo.setFont(f3);
            titulo.setAlignment(Element.ALIGN_CENTER);
            titulo.add("Memorial de Cálculo Entalhe Inclinado\n");
            /*Parágrafo primeiro*/
            Paragraph parágrafo1= new Paragraph();
            parágrafo1.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo1.setFont(f6);
            parágrafo1.add("Características das Propriedades da Madeira (De acordo com a Norma NBR 7190/1997).");
            /*espaçamento 1*/
            Paragraph espaçamento1 = new Paragraph();
            for (int i = 0; i < 20; i++) {
                espaçamento1.add(new Chunk(" "));
            }
            /*espaçamento 2*/
            Paragraph espaçamento2 = new Paragraph();
            for (int i = 0; i < 20; i++) {
                espaçamento2.add(new Chunk(" "));
            }
            /*espaçamento 3*/
            Paragraph espaçamento3 = new Paragraph();
            for (int i = 0; i < 1500; i++) {
                espaçamento3.add(new Chunk(" "));
            }
            /*Tabela de Propriedades da Madeira*/
            PdfPTable table1 = new PdfPTable(2);
            /*construindo as celulas da tabela*/
            String categoria1 = "";
            if (seldico.isSelected()){
                categoria1 = "Dicotiledônea";
            }
            if(selco.isSelected()){
                categoria1 = "Conífera";
            }
            PdfPCell propriedad = new PdfPCell(new Phrase("Propriedade da Madeira",f4));
            propriedad.setHorizontalAlignment(Element.ALIGN_CENTER);
            propriedad.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell categoria = new PdfPCell(new Phrase(categoria1,f4));
            categoria.setHorizontalAlignment(Element.ALIGN_CENTER);
            categoria.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell classerist = new PdfPCell(new Phrase("Classe de Resistência",f5));
            PdfPCell classerist1 = new PdfPCell(new Phrase("C"+resfc0k.getText(),f5));
            classerist1.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell resistacom = new PdfPCell(new Phrase("Resistência Característica a Compressão Paralela as fibras.",f5));
            PdfPCell comprdf = new PdfPCell(new Phrase(resfc0k.getText()+" MPa",f5));
            comprdf.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell propriedad1 = new PdfPCell(new Phrase("Resistência Característica a Compressão Normal as fibras.",f5));
            PdfPCell dfdfdfd = new PdfPCell(new Phrase(jLabel21.getText()+" MPa",f5));
            dfdfdfd.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell propriedad2 = new PdfPCell(new Phrase("Resistência Característica ao Cisalhamento Paralelo as fibras",f5));
            PdfPCell propriedad3= new PdfPCell(new Phrase(jLabel26.getText()+" MPa",f5));
            propriedad3.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell celulaNome2 = new PdfPCell(new Phrase("Valor médio do módulo de elasticidade na compressão paralela às fibras",f5));
            PdfPCell celulaSexo2 = new PdfPCell(new Phrase(resecom.getText()+" MPa",f5));
            celulaSexo2 .setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell celulaSexo12 = new PdfPCell(new Phrase("Densidade básica",f5));
            PdfPCell celulaSexo121 = new PdfPCell(new Phrase(jLabel22.getText()+" MPa",f5));
            celulaSexo121.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell densidade1 = new PdfPCell(new Phrase("Densidade aparente",f5));
            PdfPCell densidade2 = new PdfPCell(new Phrase(respapa.getText()+" MPA",f5));
            densidade2.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell umidade = new PdfPCell(new Phrase("Umidade",f5));
            PdfPCell umidade2 = new PdfPCell(new Phrase("12%",f5));
            umidade2.setHorizontalAlignment(Element.ALIGN_CENTER);
            /*adicionando as celulas na tabela*/
            float columnWidth[]={300f,100f};
            table1.setTotalWidth(columnWidth);
            table1.addCell(propriedad);
            table1.addCell(categoria);
            table1.addCell(classerist);
            table1.addCell(classerist1);
            table1.addCell(resistacom );
            table1.addCell(comprdf);
            table1.addCell(propriedad1);
            table1.addCell(dfdfdfd);
            table1.addCell(propriedad2);
            table1.addCell(propriedad3);
            table1.addCell(celulaNome2);
            table1.addCell(celulaSexo2);
            table1.addCell(celulaSexo12);
            table1.addCell(celulaSexo121);
            table1.addCell(densidade1);
            table1.addCell(densidade2);
            table1.addCell(umidade);
            table1.addCell(umidade2);
            /*terminar a tabela*/

            /*segunda parte do memorial*/
            /*Parágrafo segundo*/
            Paragraph parágrafo2= new Paragraph();
            parágrafo2.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo2.setFont(f6);
            parágrafo2.add("Caracterização da Madeira e coeficiente de Modificação (De acordo com a Norma NBR 7190/1997).");
            /*construindo tabela 2*/

            /*Tabela de Propriedades da Madeira*/
            PdfPTable table2 = new PdfPTable(2);
            /*construindo as celulas da tabela*/

            /*primeira linha tabela 2*/
            PdfPCell Classecarre = new PdfPCell(new Phrase("Especificações para Modificação",f4));
            Classecarre.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell tipodemad = new PdfPCell(new Phrase("Madeira",f4));
            tipodemad.setBackgroundColor(new BaseColor(223,104,4));
            tipodemad.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*segunda linha tabela 2*/
            PdfPCell classecarre1 = new PdfPCell(new Phrase("Classe de Carregamento",f5));
            String classefdv = jComboBox10.getSelectedItem().toString();
            PdfPCell classerist12 = new PdfPCell(new Phrase(classefdv,f5));
            classerist12.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*terceira linha tabela 2*/
            PdfPCell resistacom2 = new PdfPCell(new Phrase("Tipo de Madeira",f5));
            String resistac = jComboBox9.getSelectedItem().toString();
            PdfPCell comprdf2 = new PdfPCell(new Phrase(resistac,f5));
            comprdf2.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quarta linha tabela 2*/
            PdfPCell propriedad12 = new PdfPCell(new Phrase("Categoria da Madeira",f5));
            String propd = jComboBox15.getSelectedItem().toString();
            PdfPCell dfdfdfd2 = new PdfPCell(new Phrase(propd,f5));
            dfdfdfd2.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quinta linha tabela 2*/
            PdfPCell propriedad22 = new PdfPCell(new Phrase("Classe de Umidade da Madeira",f5));
            String propd1 = jComboBox13.getSelectedItem().toString();
            PdfPCell propriedad32= new PdfPCell(new Phrase(propd1,f5));
            propriedad32.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*sexta linha tabela 2*/
            PdfPCell celulaNome22 = new PdfPCell(new Phrase("kmod1",f5));
            PdfPCell celulaSexo22 = new PdfPCell(new Phrase(resulkmod8.getText(),f5));
            celulaSexo22.setHorizontalAlignment(Element.ALIGN_CENTER);

            /* setima linha tabela 2*/
            PdfPCell celulaSexo122 = new PdfPCell(new Phrase("kmod2",f5));
            PdfPCell celulaSexo1212 = new PdfPCell(new Phrase(resulkmod9.getText(),f5));
            celulaSexo1212.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*oitava linha tabela 2*/
            PdfPCell densidade12 = new PdfPCell(new Phrase("kmod3",f5));
            PdfPCell densidade22 = new PdfPCell(new Phrase(resulkmod10.getText(),f5));
            densidade22.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*nona linha tabela 2*/
            PdfPCell umidade21 = new PdfPCell(new Phrase("kmod = kmod1*kmod2*kmod3",f5));
            PdfPCell umidade22 = new PdfPCell(new Phrase(resulkmod11.getText(),f5));
            umidade22.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*adicionando as celulas na tabela 2*/
            float columnWidth1[]={300f,100f};
            table2.setWidthPercentage(70);

            table2.addCell(Classecarre);
            table2.addCell(tipodemad);
            table2.addCell(classecarre1);
            table2.addCell(classerist12);
            table2.addCell(resistacom2);
            table2.addCell(comprdf2);
            table2.addCell(propriedad12);
            table2.addCell(dfdfdfd2);
            table2.addCell(propriedad22);
            table2.addCell(propriedad32);
            table2.addCell(celulaNome22);
            table2.addCell(celulaSexo22);
            table2.addCell(celulaSexo122);
            table2.addCell(celulaSexo1212);
            table2.addCell(densidade12);
            table2.addCell(densidade22);
            table2.addCell(umidade21);
            table2.addCell(umidade22);

            /*terceira parte do memorial*/
            /*Parágrafo terceira*/
            Paragraph parágrafo3= new Paragraph();
            parágrafo3.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo3.setFont(f6);
            parágrafo3.add("Dimensões das Peças de Madeira.");

            /*construindo tabela 3*/

            /*Tabela de peças de madeira*/
            PdfPTable table3 = new PdfPTable(2);
            /*construindo as celulas da tabela*/

            /*primeira linha tabela 3*/
            PdfPCell Classecarre3 = new PdfPCell(new Phrase("Peças de Madeira",f4));
            Classecarre3.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre3.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell tipodemad53 = new PdfPCell(new Phrase("Madeira",f4));
            tipodemad53.setBackgroundColor(new BaseColor(223,104,4));
            tipodemad53.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*segunda linha tabela 3*/

            PdfPCell classecarre13 = new PdfPCell(new Phrase("Comprimento mínimo (a)",f5));
            PdfPCell classerist123 = new PdfPCell(new Phrase(jTextField2.getText()+" cm",f5));
            classerist123.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*terceira linha tabela 3*/
            PdfPCell resistacom23 = new PdfPCell(new Phrase("Penetração do Banzo Superior (d)",f5));
            PdfPCell comprdf23 = new PdfPCell(new Phrase(jTextField3.getText()+" cm",f5));
            comprdf23.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quarta linha tabela 3*/
            PdfPCell propriedad123 = new PdfPCell(new Phrase("Largura dos Banzos (b)",f5));
            PdfPCell dfdfdfd23 = new PdfPCell(new Phrase(jTextField4.getText()+" cm",f5));
            dfdfdfd23.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*sexta linha tabela 3*/
            PdfPCell celulaNome223 = new PdfPCell(new Phrase("Altura do banzo inferior (hi)",f5));
            PdfPCell celulaSexo223 = new PdfPCell(new Phrase(jTextField6.getText()+" cm",f5));
            celulaSexo223.setHorizontalAlignment(Element.ALIGN_CENTER);

            /* setima linha tabela 3*/
            PdfPCell celulaSexo1223 = new PdfPCell(new Phrase("Altura do banzo superior (hf)",f5));
            PdfPCell celulaSexo12123 = new PdfPCell(new Phrase(jTextField7.getText()+" cm",f5));
            celulaSexo12123.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*oitava linha tabela */
            PdfPCell densidade123 = new PdfPCell(new Phrase("Ângulo entre os banzos (alfa)",f5));
            PdfPCell densidade223 = new PdfPCell(new Phrase(jTextField5.getText()+"°",f5));
            densidade223.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*adicionando as celulas na tabela 3*/
            float columnWidth3[]={300f,100f};
            table3.setWidthPercentage(50);
            table3.setTotalWidth(columnWidth1);
            table3.addCell(Classecarre3);
            table3.addCell(tipodemad53);
            table3.addCell(classecarre13);
            table3.addCell(classerist123);
            table3.addCell(resistacom23);
            table3.addCell(comprdf23);
            table3.addCell(propriedad123);
            table3.addCell(dfdfdfd23);
            table3.addCell(celulaNome223);
            table3.addCell(celulaSexo223);
            table3.addCell(celulaSexo1223);
            table3.addCell(celulaSexo12123);
            table3.addCell(densidade123);
            table3.addCell(densidade223);

            /*Quarta parte do memorial*/
            /*Parágrafo quarto*/
            Paragraph parágrafo4= new Paragraph();
            parágrafo4.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo4.setFont(f6);
            parágrafo4.add("Combinação de Ações. (Combinação Normal, Desfavorável).");

            /*construindo tabela 4*/

            /*Tabela de peças de madeira*/
            PdfPTable table4 = new PdfPTable(3);
            /*construindo as celulas da tabela*/

            /*primeira linha tabela 4*/
            PdfPCell Classecarre34 = new PdfPCell(new Phrase("Ações",f4));
            Classecarre34.setHorizontalAlignment(Element.ALIGN_CENTER);
            Classecarre34.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell tipodemad534 = new PdfPCell(new Phrase("Característica",f4));
            tipodemad534.setHorizontalAlignment(Element.ALIGN_CENTER);
            tipodemad534.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell classecarre134 = new PdfPCell(new Phrase("Valor(kN)",f4));
            classecarre134.setHorizontalAlignment(Element.ALIGN_CENTER);
            classecarre134.setBackgroundColor(new BaseColor(223,104,4));

            /*segunda linha tabela 4*/
            PdfPCell classerist1234 = new PdfPCell(new Phrase("Ações Permanentes",f5));
            classerist1234.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell tipodemad5341 = new PdfPCell(new Phrase(Tipodevariabilidade.getSelectedItem().toString(),f5));
            tipodemad5341.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell classecarre1341 = new PdfPCell(new Phrase(permanente.getText(),f5));
            classecarre1341.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*terceira linha tabela 4*/
            PdfPCell resistacom234 = new PdfPCell(new Phrase("Ações Variáveis (Sobrecarga)",f5));
            PdfPCell comprdf234 = new PdfPCell(new Phrase(variavel.getSelectedItem().toString(),f5));
            comprdf234.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell propriedad1234 = new PdfPCell(new Phrase(sobrecarga.getText(),f5));
            propriedad1234.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quarta linha tabela 4*/
            PdfPCell dfdfdfd234 = new PdfPCell(new Phrase("Vento",f5));
            dfdfdfd234.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell propriedad2234 = new PdfPCell(new Phrase(variavel.getSelectedItem().toString(),f5));
            PdfPCell propriedad3234= new PdfPCell(new Phrase(vento.getText(),f5));
            propriedad3234.setHorizontalAlignment(Element.ALIGN_CENTER);

             /*quarta linha tabela 4*/
            PdfPCell lin4col1tab4 = new PdfPCell(new Phrase("Força Majorada pela Combinação Sobrecarga Ação Variável Principal",f5));
            lin4col1tab4.setColspan(2);
            lin4col1tab4.setHorizontalAlignment(Element.ALIGN_LEFT);
            PdfPCell lin4col2tab4 = new PdfPCell(new Phrase(resultperma2.getText()+" kN",f5));
            lin4col2tab4.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*quinta linha tabela 4*/
            PdfPCell lin5col1tab4 = new PdfPCell(new Phrase("Força Majorada pela Combinação Vento como Ação Variável Principal",f5));
            lin5col1tab4.setColspan(2);
            lin5col1tab4.setHorizontalAlignment(Element.ALIGN_LEFT);
            PdfPCell lin5col2tab4 = new PdfPCell(new Phrase(resultvent2.getText()+" kN",f5));
            lin5col2tab4.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*adicionando as celulas na tabela 4*/
            float columnWidth4[]={100f,100f,100f};
            table4.setTotalWidth(columnWidth4);
            table4.addCell(Classecarre34);
            table4.addCell(tipodemad534);
            table4.addCell(classecarre134);
            table4.addCell(classerist1234);
            table4.addCell(tipodemad5341);
            table4.addCell(classecarre1341 );
            table4.addCell(resistacom234);
            table4.addCell(comprdf234);
            table4.addCell(propriedad1234);
            table4.addCell(dfdfdfd234);
            table4.addCell(propriedad2234);
            table4.addCell(propriedad3234);
            table4.addCell(lin4col1tab4);
            table4.addCell(lin4col2tab4);
            table4.addCell(lin5col1tab4);
            table4.addCell(lin5col2tab4);

             /*Quinta parte do memorial*/
            /*Parágrafo Quinto*/
            Paragraph parágrafo5= new Paragraph();
            parágrafo5.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo5.setFont(f6);
            parágrafo5.add("Fatores de Utilização");

            /*construindo tabela 5*/

            /*Tabela de peças de madeira*/
            PdfPTable table5 = new PdfPTable(2);
            /*construindo as celulas da tabela*/

            /*primeira linha tabela 5*/
            PdfPCell Classecarre35 = new PdfPCell(new Phrase("Fatores de Utilização",f4));
            Classecarre35.setHorizontalAlignment(Element.ALIGN_CENTER);
            Classecarre35.setBackgroundColor(new BaseColor(223,104,4));
            PdfPCell tipodemad535 = new PdfPCell(new Phrase("Adotado",f4));
            tipodemad535.setHorizontalAlignment(Element.ALIGN_CENTER);
            tipodemad535.setBackgroundColor(new BaseColor(223,104,4));

            /*segunda linha tabela 5*/
            PdfPCell classecarre135 = new PdfPCell(new Phrase("Ações em Estruturas Correntes",f5));
            PdfPCell classerist1235 = new PdfPCell(new Phrase(acoescorrentes.getSelectedItem().toString(),f5));

            /*terceira linha tabela 5*/
            PdfPCell resistacom235 = new PdfPCell(new Phrase("Cargas Acidentais dos Edifícios ",f5));
            /*Cargas acidentais dos edifícios*/
            String h1 = null;
            String aci = cargasacid.getSelectedItem().toString();
            if("Não há pred. de Equipamentos Fixos nem de el. concentr".equals(aci)){
                h1 = "Locais em que não há predominância de pesos de equipamentos fixos,ou de elevadas concentrações de pessoas";
            }
            if("Há pred. de Equipamentos Fixos ou de elev. Concentração.".equals(aci)){
                h1 = "Locais onde há predominância de pesos de equipamentos fixos, ou de elevadas concentrações de pessoas";
            }
            if("Bibliotecas, arquivos, oficinas ou garagens".equals(aci)){
                h1 = "Bibliotecas, arquivos, oficinas e garagens";
            }
            PdfPCell comprdf235 = new PdfPCell(new Phrase(h1,f5));

            /*adicionando as celulas na tabela 5*/
            table5.addCell(Classecarre35);
            table5.addCell(tipodemad535);
            table5.addCell(classecarre135);
            table5.addCell(classerist1235);
            table5.addCell(resistacom235);
            table5.addCell(comprdf235);
            
             /*Sexta parte do memorial*/
            /*Parágrafo quarto*/
            Paragraph parágrafo6= new Paragraph();
            parágrafo6.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo6.setFont(f6);
            parágrafo6.add("Parâmetros de Cálculo do Entalhe.");

            /*construindo tabela 6*/

            /*Tabela de peças de madeira*/
            PdfPTable table6 = new PdfPTable(3);
            /*construindo as celulas da tabela 6*/

            /*primeira linha tabela 6*/
            PdfPCell Classecarre361 = new PdfPCell(new Phrase("Parâmetros de Cálculo para a Madeira Principal",f4));
            Classecarre361.setRowspan(5);
            try {
                com.itextpdf.text.Image hei = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\imagemtexturamadeira.jpg");

                Classecarre361.setImage(hei);
                Classecarre361.setVerticalAlignment(Element.ALIGN_MIDDLE);
                Classecarre361.setHorizontalAlignment(Element.ALIGN_CENTER);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            Classecarre361.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*primeira linha tabela 6*/
            PdfPCell Classecarre36 = new PdfPCell(new Phrase("Parâmetros de Resistência para a Madeira",f4));
            Classecarre36.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre36.setColspan(2);
            Classecarre36.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*segunda linha tabela 6*/
            PdfPCell classecarre136 = new PdfPCell(new Phrase("Resistência de Compressão paralela as fibras (fc0d).",f5));
            PdfPCell classerist1236 = new PdfPCell(new Phrase(jLabel23.getText()+" kN/cm²",f5));
            classerist1236.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*terceira linha tabela 6*/
            PdfPCell resistacom236 = new PdfPCell(new Phrase("Resistência ao Compressão normal as fibras (fc90d).",f5));
            PdfPCell comprdf236 = new PdfPCell(new Phrase(jLabel24.getText()+" kN/cm²",f5));
            comprdf236.setHorizontalAlignment(Element.ALIGN_CENTER);

            /*quarta linha tabela 6*/
            PdfPCell pro = new PdfPCell(new Phrase("Resistência a Compressão a "+jLabel12.getText()+"° paralela as fibras (fc"+jLabel12.getText()+"d)",f5));
            PdfPCell df = new PdfPCell(new Phrase(rescomcal2.getText()+" kN/cm²",f5));
            df.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*quarta linha tabela 6*/
            PdfPCell propriedad1236 = new PdfPCell(new Phrase("Resistência ao Cisalhamento paralelo as fibras (fv0d). ",f5));
            PdfPCell dfdfdfd236 = new PdfPCell(new Phrase(resutcis.getText()+" kN/cm²",f5));
            dfdfdfd236.setHorizontalAlignment(Element.ALIGN_CENTER);
            /*adicionadno imagem*/

            /*adicionando as celulas na tabela 6*/
            float columnWidth6[] = {30,120,60};
            table6.setWidths(columnWidth6);
            table6.setWidthPercentage(80);
            table6.addCell(Classecarre361);
            table6.addCell(Classecarre36);
            table6.addCell(classecarre136);
            table6.addCell(classerist1236);
            table6.addCell(resistacom236);
            table6.addCell(comprdf236);
            table6.addCell(pro);
            table6.addCell(df);
            table6.addCell(propriedad1236);
            table6.addCell(dfdfdfd236);
            
             /*Tabela de peças de madeira*/
            PdfPTable table8 = new PdfPTable(2);
            /*construindo as celulas da tabela 6*/
      
            /*primeira linha tabela 8*/
            PdfPCell Classecarre3678 = new PdfPCell(new Phrase("Resistência do Entalhe a Tensão Normal",f4));
            Classecarre3678.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre3678.setColspan(2);
            Classecarre3678.setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            /*segunda linha tabela 8*/
            PdfPCell classecarre13678 = new PdfPCell(new Phrase("Resistência a Compressão a "+jLabel12.getText()+"° parela as fibras (fc"+jLabel12.getText()+"d)",f5));
            PdfPCell classerist123678 = new PdfPCell(new Phrase(rescomcal2.getText()+" kN/cm²",f5));
            classerist123678.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*segunda linha tabela 8*/
            PdfPCell cla = new PdfPCell(new Phrase("Tensão de Compressão Solicitante",f5));
            PdfPCell clas = new PdfPCell(new Phrase(tensaon.getText()+" kN/cm²",f5));
            clas.setHorizontalAlignment(Element.ALIGN_CENTER);
  
            /*segunda linha tabela 8*/
            PdfPCell cla1 = new PdfPCell(new Phrase(jLabel25.getText(),f5));
            if("Resistência < Solicitante".equals(jLabel25.getText())){
                cla1.setBackgroundColor(BaseColor.RED);
            }else{
                cla1.setBackgroundColor(BaseColor.BLUE);
            }
            cla1.setColspan(2);
            cla1.setHorizontalAlignment(Element.ALIGN_CENTER);
  
            /*adicionando as celulas na tabela 7*/
            float columnWidth8[]={100f,100f};
            table8.setTotalWidth(columnWidth1);
            table8.addCell(Classecarre3678);
            table8.addCell(classecarre13678);
            table8.addCell(classerist123678);
            table8.addCell(cla);
            table8.addCell(clas);
            table8.addCell(cla1);
            
             /*construindo tabela 9*/
            
             /*Tabela de peças de madeira*/
            PdfPTable table9 = new PdfPTable(2);
            /*construindo as celulas da tabela 6*/
            
          
            /*primeira linha tabela 9*/
            PdfPCell Classecarre36789 = new PdfPCell(new Phrase("Resistência do Entalhe a Tensão Cisalhante",f4));
            Classecarre36789.setColspan(2);
            Classecarre36789.setBackgroundColor(new BaseColor(223,104,4));
            Classecarre36789.setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            /*segunda linha tabela 9*/
            PdfPCell classecarre136789 = new PdfPCell(new Phrase("Resistência ao Cisalhamento paralelo as fibras (fv0d)",f5));
            classecarre136789.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell classerist1236789 = new PdfPCell(new Phrase(resutcis.getText()+" kN/cm²",f5));
            classerist1236789.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*terceira linha tabela 9*/
            PdfPCell resistacom236789 = new PdfPCell(new Phrase("Tensão de Cisalhamento Solicitante ",f5));
            resistacom236789.setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell comprdf236789 = new PdfPCell(new Phrase(tdcis.getText()+" kN/cm²",f5));
            comprdf236789.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            PdfPCell resista = new PdfPCell(new Phrase(jLabel27.getText(),f5));
            if("Resistência < Solicitante".equals(jLabel27.getText())){
                resista.setBackgroundColor(BaseColor.RED);
            }else{
                resista.setBackgroundColor(BaseColor.BLUE);
            }
            resista.setColspan(2);
            resista.setHorizontalAlignment(Element.ALIGN_CENTER);
            
    
            /*adicionando as celulas na tabela 9*/
            table9.setHorizontalAlignment(Element.ALIGN_CENTER);
            table9.setWidthPercentage(85);
            table9.addCell(Classecarre36789);
            table9.addCell(classecarre136789);
            table9.addCell(classerist1236789);
            table9.addCell(resistacom236789);
            table9.addCell(comprdf236789);
            table9.addCell(resista);
            
            /*Tabela de Propriedades da Madeira da Chapa*/
            PdfPTable table10 = new PdfPTable(2);
            /*linha um tabela 10*/
            PdfPCell li1col1tab10 = new PdfPCell(new Phrase("Propriedades da Chapa de Madeira e Prego",f4));
            li1col1tab10.setColspan(2);
            li1col1tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
            li1col1tab10.setBackgroundColor(new BaseColor(223,104,4));
            
            /*linha 2 tabela 10*/
            PdfPCell li2col1tab10 = new PdfPCell(new Phrase("Madeira",f5));
            String madeira = null;
            if(seldico1.isSelected()){
                madeira = "Dicotiledônea";
            }
            if(selco1.isSelected()){
                madeira = "Conífera";
            }
            PdfPCell li2col2tab10 = new PdfPCell(new Phrase(madeira,f5));
            li2col2tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*linha 3 tabela 10*/
            
            PdfPCell li3col1tab10 = new PdfPCell(new Phrase("Classe de Resistência",f5));
            String resist = null;
            if(seldico1.isSelected()){
                resist = jComboBox4.getSelectedItem().toString();
            }
            if(selco1.isSelected()){
                resist = jComboBox3.getSelectedItem().toString();
            }
            PdfPCell li3col2tab10 = new PdfPCell(new Phrase(resist,f5));
            li3col2tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
      
            /*linha 4 tabela 10*/
            PdfPCell li4col1tab10 = new PdfPCell(new Phrase("Tipo de madeira",f5));
            PdfPCell li4col2tab10 = new PdfPCell(new Phrase(jComboBox12.getSelectedItem().toString(),f5));
            li4col2tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*linha 5 tabela 10*/
            PdfPCell li5col1tab10 = new PdfPCell(new Phrase("Classe de Umidade",f5));
            PdfPCell li5col2tab10 = new PdfPCell(new Phrase(jComboBox14.getSelectedItem().toString(),f5));
            li5col2tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*linha 6 tabela 10*/
            PdfPCell li6col1tab10 = new PdfPCell(new Phrase("Categoria da Madeira",f5));
            PdfPCell li6col2tab10 = new PdfPCell(new Phrase(jComboBox16.getSelectedItem().toString(),f5));
            li6col2tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*linha 7 tabela 10*/
            PdfPCell li7col1tab10 = new PdfPCell(new Phrase("Kmod",f5));
            PdfPCell li7col2tab10 = new PdfPCell(new Phrase(jLabel39.getText(),f5));
            li7col2tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            
            /*linha 8 tabela 10*/
            
            PdfPCell li8col1tab10 = new PdfPCell(new Phrase("Diâmetro do Prego",f5));
            PdfPCell li8col2tab10= new PdfPCell(new Phrase(diametroprego.getText()+" mm",f5));
            li8col2tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
            
            /*linha 9 tabela 10*/
            PdfPCell li9col1tab10 = new PdfPCell(new Phrase("Resistência do Prego",f5));
            PdfPCell li9col2tab10 = new PdfPCell(new Phrase("600 MPa",f5));
            li9col2tab10.setHorizontalAlignment(Element.ALIGN_CENTER);
         
            /*adicionando as celulas na tabela*/
            float columnWidth10[]={300f,100f};
            table10.setTotalWidth(columnWidth10);
            table10.addCell(li1col1tab10);
            table10.addCell(li2col1tab10);
            table10.addCell(li2col2tab10);
            table10.addCell(li3col1tab10);
            table10.addCell(li3col2tab10);
            table10.addCell(li4col1tab10);
            table10.addCell(li4col2tab10);
            table10.addCell(li5col1tab10);
            table10.addCell(li5col2tab10);
            table10.addCell(li6col1tab10);
            table10.addCell(li6col2tab10);
            table10.addCell(li7col1tab10);
            table10.addCell(li7col2tab10);
            table10.addCell(li8col1tab10);
            table10.addCell(li8col2tab10);
            table10.addCell(li9col1tab10);
            table10.addCell(li9col2tab10);
          
            
             /*Sexta parte do memorial*/
            /*Parágrafo quarto*/
            Paragraph parágrafo11= new Paragraph();
            parágrafo11.setAlignment(Element.ALIGN_JUSTIFIED);
            parágrafo11.setFont(f6);
            parágrafo11.add("Cálculos para dimensionamento da ligação por chapa de Madeira, para este cálculo é necessário verificar a resistência de embutimento da madeira principal pelo prego e a resistência da chapa de madeira em contato com o prego");
            
            /*Tabela de Verificação do embutimento da madeira principal e Flexão do pino*/
            PdfPTable table11 = new PdfPTable(3);
            
            /*linha 1 tabela 11*/
            PdfPCell li1col1tab11 = new PdfPCell(new Phrase("Verificação do embutimento da chapa de madeira e flexão do Parafuso",f4));
            li1col1tab11.setColspan(3);
            li1col1tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li1col1tab11.setBackgroundColor(new BaseColor(223,104,4));
           
            /*linha 2 tabela 13*/
            PdfPCell li2col1tab11 = new PdfPCell(new Phrase("Resistência ao embutimento da Chapa de Madeira paralelo as fibras (fe0d)",f5));
            li2col1tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col1tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
           
            PdfPCell li2col2tab11 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\equaçãofe0d.JPG"); 
                 li2col2tab11.setImage(hei13);
                 li2col2tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
                 li2col2tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
                 
                 
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            li2col2tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col2tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li2col3tab11 = new PdfPCell(new Phrase(jLabel73.getText()+" kN/cm²",f5));
            li2col3tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col3tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 3 tabela 13*/
            PdfPCell li3col1tab11 = new PdfPCell(new Phrase("Resistência ao embutimento da Madeira normal as fibras (fe90d)",f5));
            li3col1tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col1tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li3col2tab11 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\equacaofe90d.JPG"); 
                 li3col2tab11.setImage(hei13);
                 li3col2tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
                 li3col2tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
                 
                 
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            li3col2tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col2tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li3col3tab11 = new PdfPCell(new Phrase(jLabel74.getText()+" kN/cm²",f5));
            li3col3tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col3tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 4 tabela 13*/
        
            PdfPCell li4col1tab11 = new PdfPCell(new Phrase("Resistência ao embutimento da Madeira paralelo as fibras (fe"+jLabel12.getText()+"d)",f5));
            li4col1tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col1tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li4col2tab11 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\equação em angulo.JPG"); 
                 li4col2tab11.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li4col2tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col2tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li4col3tab11 = new PdfPCell(new Phrase(jLabel64.getText()+" kN/cm²",f5));
            li4col3tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col3tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 5 tabela 13*/
        
            PdfPCell li5col1tab11 = new PdfPCell(new Phrase("Beta (B)",f5));
            li5col1tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col1tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li5col2tab11 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\beta.JPG"); 
                 li5col2tab11.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li5col2tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col2tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li5col3tab11 = new PdfPCell(new Phrase(jLabel75.getText(),f5));
            li5col3tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col3tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 6 tabela 13*/
        
            PdfPCell li6col1tab11 = new PdfPCell(new Phrase("Beta limite (Blim)",f5));
            li6col1tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li6col1tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li6col2tab11 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\betalimite.JPG"); 
                 li6col2tab11.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li6col2tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li6col2tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li6col3tab11 = new PdfPCell(new Phrase(jLabel76.getText(),f5));
            li6col3tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li6col3tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 7 tabela 13*/
          
            PdfPCell li7col1tab11 = new PdfPCell(new Phrase(jLabel78.getText(),f5));
            li7col1tab11.setColspan(3);
            li7col1tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li7col1tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 8 tabela 13*/
            
            PdfPCell li8col1tab11 = new PdfPCell(new Phrase("Resistência de Corte do Parafuso (Rvd,1)",f5));
            li8col1tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li8col1tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li8col2tab11 = new PdfPCell();
            String localarquivo = null;
            if("Beta > Betalimite".equals(jLabel78.getText())){
            localarquivo = "C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\betmaiorres.JPG";    
            }else{
            localarquivo = "C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\betmenorres.JPG";
            }
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance(localarquivo); 
                 li8col2tab11.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li8col2tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li8col2tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li8col3tab11 = new PdfPCell(new Phrase(jLabel77.getText()+" kN",f5));
            li8col3tab11.setHorizontalAlignment(Element.ALIGN_CENTER);
            li8col3tab11.setVerticalAlignment(Element.ALIGN_MIDDLE);
           
            
            /*adicionando as celulas na tabela*/
            
            table11.setWidthPercentage(100);
            table11.addCell(li1col1tab11);
            table11.addCell(li2col1tab11);
            table11.addCell(li2col2tab11);
            table11.addCell(li2col3tab11);
            table11.addCell(li3col1tab11);
            table11.addCell(li3col2tab11);
            table11.addCell(li3col3tab11);
            table11.addCell(li4col1tab11);
            table11.addCell(li4col2tab11);
            table11.addCell(li4col3tab11);
            table11.addCell(li5col1tab11);
            table11.addCell(li5col2tab11);
            table11.addCell(li5col3tab11);
            table11.addCell(li6col1tab11);
            table11.addCell(li6col2tab11);
            table11.addCell(li6col3tab11);
            table11.addCell(li7col1tab11);
            table11.addCell(li8col1tab11);
            table11.addCell(li8col2tab11);
            table11.addCell(li8col3tab11);
            
            /*Tabela verificação para a resistência da madeira principal */
            PdfPTable table13 = new PdfPTable(3);
           
            /*linha um tabela 13*/
            PdfPCell li1col1tab13 = new PdfPCell(new Phrase("Verificações para a Resistência da madeira principal",f4));
            li1col1tab13.setColspan(3);
            li1col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li1col1tab13.setBackgroundColor(new BaseColor(223,104,4));
            
            /*linha 2 tabela 13*/
            PdfPCell li2col1tab13 = new PdfPCell(new Phrase("Resistência ao embutimento da Madeira Principal paralelo as fibras (fe0d)",f5));
            li2col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
           
            PdfPCell li2col2tab13 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\equaçãofe0d.JPG"); 
                 li2col2tab13.setImage(hei13);
                 li2col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
                 li2col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
                 
                 
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            li2col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li2col3tab13 = new PdfPCell(new Phrase(jLabel68.getText()+" kN/cm²",f5));
            li2col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 3 tabela 13*/
            PdfPCell li3col1tab13 = new PdfPCell(new Phrase("Resistência ao embutimento da Madeira normal as fibras (fe90d)",f5));
            li3col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li3col2tab13 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\equacaofe90d.JPG"); 
                 li3col2tab13.setImage(hei13);
                 li3col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
                 li3col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
                 
                 
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            li3col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li3col3tab13 = new PdfPCell(new Phrase(jLabel69.getText()+" kN/cm²",f5));
            li3col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            /*linha 4 tabela 13*/
        
            PdfPCell li4col1tab13 = new PdfPCell(new Phrase("Resistência ao embutimento da Madeira paralelo as fibras (fe"+jLabel12.getText()+"d)",f5));
            li4col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li4col2tab13 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\equação em angulo.JPG"); 
                 li4col2tab13.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li4col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li4col3tab13 = new PdfPCell(new Phrase(resistembut.getText()+" kN/cm²",f5));
            li4col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 5 tabela 13*/
        
            PdfPCell li5col1tab13 = new PdfPCell(new Phrase("Beta (B)",f5));
            li5col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li5col2tab13 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\beta.JPG"); 
                 li5col2tab13.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li5col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li5col3tab13 = new PdfPCell(new Phrase(jLabel70.getText(),f5));
            li5col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 6 tabela 13*/
        
            PdfPCell li6col1tab13 = new PdfPCell(new Phrase("Beta limite (Blim)",f5));
            li6col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li6col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li6col2tab13 = new PdfPCell();
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\betalimite.JPG"); 
                 li6col2tab13.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li6col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li6col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li6col3tab13 = new PdfPCell(new Phrase(jLabel71.getText(),f5));
            li6col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li6col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 7 tabela 13*/
          
            PdfPCell li7col1tab13 = new PdfPCell(new Phrase(jLabel49.getText(),f5));
            li7col1tab13.setColspan(3);
            li7col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li7col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 8 tabela 13*/
            
            PdfPCell li8col1tab13 = new PdfPCell(new Phrase("Resistência de Corte do Parafuso (Rvd,1)",f5));
            li8col1tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li8col1tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li8col2tab13 = new PdfPCell();
            String localarquivo1 = null;
            if("Beta > Betalimite".equals(jLabel49.getText())){
            localarquivo1 = "C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\betmaiorres.JPG";    
            }else{
            localarquivo1 = "C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\equacao\\betmenorres.JPG";
            }
            try {
                 com.itextpdf.text.Image hei13 = com.itextpdf.text.Image.getInstance(localarquivo); 
                 li8col2tab13.addElement(hei13);
                 hei13.setWidthPercentage(10);
             } catch (BadElementException | IOException ex) {
                 Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            li8col2tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li8col2tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li8col3tab13 = new PdfPCell(new Phrase(jLabel72.getText()+" kN",f5));
            li8col3tab13.setHorizontalAlignment(Element.ALIGN_CENTER);
            li8col3tab13.setVerticalAlignment(Element.ALIGN_MIDDLE);
           
            /*adicionando as celulas na tabela*/
            
            table13.setWidthPercentage(100);
            table13.addCell(li1col1tab13);
            table13.addCell(li2col1tab13);
            table13.addCell(li2col2tab13);
            table13.addCell(li2col3tab13);
            table13.addCell(li3col1tab13);
            table13.addCell(li3col2tab13);
            table13.addCell(li3col3tab13);
            table13.addCell(li4col1tab13);
            table13.addCell(li4col2tab13);
            table13.addCell(li4col3tab13);
            table13.addCell(li5col1tab13);
            table13.addCell(li5col2tab13);
            table13.addCell(li5col3tab13);
            table13.addCell(li6col1tab13);
            table13.addCell(li6col2tab13);
            table13.addCell(li6col3tab13);
            table13.addCell(li7col1tab13);
            table13.addCell(li8col1tab13);
            table13.addCell(li8col2tab13);
            table13.addCell(li8col3tab13);
            
            /*Cálculo final*/
            PdfPTable table14 = new PdfPTable(2);
           
            /*linha um tabela 14*/
            PdfPCell li1col1tab14 = new PdfPCell(new Phrase("Cálculo Final",f4));
            li1col1tab14.setColspan(2);
            li1col1tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li1col1tab14.setBackgroundColor(new BaseColor(223,104,4));
            
            /*linha 2 tabela 14*/
            PdfPCell li2col1tab14 = new PdfPCell(new Phrase("Força Resistida pelo Entalhe",f5));
            li2col1tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col1tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li2col2tab14 = new PdfPCell(new Phrase(jLabel51.getText()+" kN",f5));
            li2col2tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li2col2tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 3 tabela 14*/
            
            PdfPCell li3col1tab14 = new PdfPCell(new Phrase("Força solicitante na Chapa e Parafuso",f5));
            li3col1tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col1tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li3col2tab14 = new PdfPCell(new Phrase(frdrecebido.getText()+" kN",f5));
            li3col2tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li3col2tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 4 tabela 12*/
            
            PdfPCell li4col1tab14 = new PdfPCell(new Phrase("Número mínimo de parafusos em uma seção de Corte",f5));
            li4col1tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col1tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            PdfPCell li4col2tab14 = new PdfPCell(new Phrase(jLabel59.getText(),f5));
            li4col2tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li4col2tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
            /*linha 5 tabela 12*/
            
            PdfPCell li5col1tab14 = new PdfPCell(new Phrase("Lembrando que sempre"+
            "será adotado o menor valor de resistência entre Parafuso, Chapa e Madeira para o cálculo do número mínimo de parafusos",f5));
            li5col1tab14.setColspan(2);
            li5col1tab14.setHorizontalAlignment(Element.ALIGN_CENTER);
            li5col1tab14.setVerticalAlignment(Element.ALIGN_MIDDLE);
            
           
            /*adicionando as celulas na tabela*/
            table14.setWidthPercentage(100);
            table14.addCell(li1col1tab14);
            table14.addCell(li2col1tab14);
            table14.addCell(li2col2tab14);
            table14.addCell(li3col1tab14);
            table14.addCell(li3col2tab14);
            table14.addCell(li4col1tab14);
            table14.addCell(li4col2tab14);
            table14.addCell(li5col1tab14);
            
            
            
            /*incluindo items no documento*/
            documento.add(titulo);
            documento.add(espaçamento1);
            String imagemcorte = null;
            imagemcorte = "C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\ligentalhechapamad.JPG";
            try {
                com.itextpdf.text.Image hei = com.itextpdf.text.Image.getInstance(imagemcorte);
                hei.scaleAbsolute(300,150);
                float x = (PageSize.A4.getWidth()-hei.getScaledWidth())/2;
                hei.setAlignment((int) x);
                documento.add(hei);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setAbsolutePosition(500, TOP_ALIGNMENT);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);
                heip.setAlignment(Element.ALIGN_RIGHT);
                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setRotationDegrees(180);
                heip.setAbsolutePosition(0,PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);

                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            parágrafo1.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo1);
            documento.add(espaçamento1);
            documento.add(table1);
            documento.add(espaçamento1);
            parágrafo2.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo2);
            documento.add(espaçamento1);
            documento.add(table2);
            documento.add(espaçamento1);
            parágrafo3.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo3);
            documento.add(espaçamento1);
            documento.add(table3);
            documento.add(espaçamento1);
            documento.add(espaçamento1);
            parágrafo4.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo4);
            documento.add(espaçamento1);
            documento.add(table4);
            documento.add(espaçamento1);
            documento.add(table5);
            
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setAbsolutePosition(500, TOP_ALIGNMENT);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);
                heip.setAlignment(Element.ALIGN_RIGHT);
                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setRotationDegrees(180);
                heip.setAbsolutePosition(0,PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);

                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
           
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setAbsolutePosition(500, TOP_ALIGNMENT);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);
                heip.setAlignment(Element.ALIGN_RIGHT);
                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setRotationDegrees(180);
                heip.setAbsolutePosition(0,PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);

                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            documento.add(espaçamento1);
            parágrafo6.setAlignment(Element.ALIGN_CENTER);
            documento.add(parágrafo6);
            documento.add(espaçamento1);
            documento.add(table6);
            documento.add(espaçamento1);
            documento.add(table8);
            documento.add(espaçamento1);
            documento.add(table9);
            documento.add(espaçamento1);
            documento.add(table10);
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setAbsolutePosition(500, TOP_ALIGNMENT);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);
                heip.setAlignment(Element.ALIGN_RIGHT);
                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                com.itextpdf.text.Image heip = com.itextpdf.text.Image.getInstance("C:\\Users\\mathe\\Documents\\NetBeansProjects\\ProjetoMadeira\\src\\imagens\\Imagem1.png");
                heip.setRotationDegrees(180);
                heip.setAbsolutePosition(0,PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteHeight(PageSize.A4.getHeight()/2);
                heip.scaleAbsoluteWidth(100);

                documento.add(heip);

            } catch (BadElementException | IOException ex) {
                Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
            }
            documento.add(espaçamento1);
            documento.add(parágrafo11);
            documento.add(espaçamento1);
            documento.add(table11);
            documento.add(espaçamento1);
            documento.add(table13);
            documento.add(espaçamento1);
            documento.add(table14);
            
        } catch (FileNotFoundException | DocumentException ex) {
            System.out.println("error");
        }finally{
            documento.close();
        }
        try {
            Desktop.getDesktop().open(new File("Memorial de Cálculo Entalhe Inclinado.pdf"));
        } catch (IOException ex) {
            Logger.getLogger(TelaCorteDuplo10.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Telaentalheinclinado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Telaentalheinclinado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Telaentalheinclinado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Telaentalheinclinado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Telaentalheinclinado().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Bitola;
    private javax.swing.JPanel Entalheresult;
    private javax.swing.JPanel Escolhamadeira;
    private javax.swing.JPanel Resultadoparafuso;
    private javax.swing.JPanel Resultadoparafuso1;
    private javax.swing.JPanel Teladimensao;
    private javax.swing.JComboBox<String> Tipodevariabilidade;
    private javax.swing.JLabel acaosol;
    private javax.swing.JComboBox<String> acoescorrentes;
    private javax.swing.JLabel adichapa;
    private javax.swing.JLabel afc;
    private javax.swing.JLabel alfaetext;
    private javax.swing.JLabel alfaetext1;
    private javax.swing.JLabel bet;
    private javax.swing.JLabel bet1;
    private javax.swing.JLabel betlimite;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.ButtonGroup buttonGroup8;
    private javax.swing.JComboBox<String> cargasacid;
    private javax.swing.JRadioButton chapametal;
    private javax.swing.JComboBox<String> combinação;
    private javax.swing.JLabel comprprego;
    private javax.swing.JLabel diam;
    private javax.swing.JLabel diam1;
    private javax.swing.JLabel diametfd;
    private javax.swing.JLabel diametroprego;
    private javax.swing.JPanel escolhachapas;
    private javax.swing.JPanel escolhadacarga;
    private javax.swing.JComboBox<String> escometal;
    private javax.swing.JComboBox<String> escopara;
    private javax.swing.JComboBox<String> escoprego;
    private javax.swing.JLabel espechp;
    private javax.swing.JLabel forc;
    private javax.swing.JLabel forcasolicitante;
    private javax.swing.JLabel fr;
    private javax.swing.JLabel frdrecebido;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox10;
    private javax.swing.JComboBox<String> jComboBox12;
    private javax.swing.JComboBox<String> jComboBox13;
    private javax.swing.JComboBox<String> jComboBox14;
    private javax.swing.JComboBox<String> jComboBox15;
    private javax.swing.JComboBox<String> jComboBox16;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JLabel jlabelre;
    private javax.swing.JLabel jlabelre1;
    private javax.swing.JLabel jlabelre2;
    private javax.swing.JRadioButton ligpara;
    private javax.swing.JRadioButton ligprego;
    private javax.swing.JLabel maxiresistc;
    private javax.swing.JLabel numpara;
    private javax.swing.JLabel numpara1;
    private javax.swing.JComboBox<String> paraefeitos;
    private javax.swing.JLabel penmini;
    private javax.swing.JTextField permanente;
    private javax.swing.JPanel pregoeparafuso;
    private javax.swing.JLabel rescomcal2;
    private javax.swing.JLabel resecom;
    private javax.swing.JLabel resfc0k;
    private javax.swing.JLabel resistchp;
    private javax.swing.JLabel resistembut;
    private javax.swing.JLabel respapa;
    private javax.swing.JLabel resulkmod10;
    private javax.swing.JLabel resulkmod11;
    private javax.swing.JLabel resulkmod8;
    private javax.swing.JLabel resulkmod9;
    private javax.swing.JLabel result;
    private javax.swing.JPanel resultadosdospregos;
    private javax.swing.JLabel resultperma2;
    private javax.swing.JLabel resultvent2;
    private javax.swing.JLabel resutcis;
    private javax.swing.JLabel resutembut1;
    private javax.swing.JLabel resutembut2;
    private javax.swing.JRadioButton selco;
    private javax.swing.JRadioButton selco1;
    private javax.swing.JRadioButton seldico;
    private javax.swing.JRadioButton seldico1;
    private javax.swing.JTextField sobrecarga;
    private javax.swing.JPanel soparafuso;
    private javax.swing.JLabel tamanhopeca;
    private javax.swing.JLabel tdcis;
    private javax.swing.JLabel teladefundoprincipal;
    private javax.swing.JLabel tensaon;
    private javax.swing.JLabel tipomad;
    private javax.swing.JComboBox<String> variavel;
    private javax.swing.JTextField vento;
    // End of variables declaration//GEN-END:variables
}
